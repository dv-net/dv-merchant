// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package models

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type AmlCheck struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	ServiceID  uuid.UUID        `db:"service_id" json:"service_id"`
	ExternalID string           `db:"external_id" json:"external_id"`
	Status     AMLCheckStatus   `db:"status" json:"status"`
	Score      decimal.Decimal  `db:"score" json:"score"`
	RiskLevel  *AmlRiskLevel    `db:"risk_level" json:"risk_level"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type AmlCheckHistory struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	AmlCheckID      uuid.UUID        `db:"aml_check_id" json:"aml_check_id"`
	RequestPayload  []byte           `db:"request_payload" json:"request_payload"`
	ServiceResponse []byte           `db:"service_response" json:"service_response"`
	ErrorMsg        pgtype.Text      `db:"error_msg" json:"error_msg"`
	AttemptNumber   int32            `db:"attempt_number" json:"attempt_number"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type AmlCheckQueue struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	AmlCheckID uuid.UUID        `db:"aml_check_id" json:"aml_check_id"`
	Attempts   int32            `db:"attempts" json:"attempts"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type AmlService struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	Slug      AMLSlug          `db:"slug" json:"slug"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type AmlServiceKey struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	ServiceID   uuid.UUID        `db:"service_id" json:"service_id"`
	Name        AmlKeyType       `db:"name" json:"name"`
	Description string           `db:"description" json:"description"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type AmlSupportedAsset struct {
	ServiceSlug    AMLSlug `db:"service_slug" json:"service_slug"`
	CurrencyID     string  `db:"currency_id" json:"currency_id"`
	AssetIdentity  string  `db:"asset_identity" json:"asset_identity"`
	BlockchainName string  `db:"blockchain_name" json:"blockchain_name"`
}

type AmlUserKey struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	KeyID     uuid.UUID        `db:"key_id" json:"key_id"`
	UserID    uuid.UUID        `db:"user_id" json:"user_id"`
	Value     string           `db:"value" json:"value"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Currency struct {
	ID                   string           `db:"id" json:"id"`
	Code                 string           `db:"code" json:"code"`
	Name                 string           `db:"name" json:"name"`
	Precision            int16            `db:"precision" json:"precision"`
	IsFiat               bool             `db:"is_fiat" json:"is_fiat"`
	Blockchain           *Blockchain      `db:"blockchain" json:"blockchain"`
	ContractAddress      pgtype.Text      `db:"contract_address" json:"contract_address"`
	WithdrawalMinBalance *decimal.Decimal `db:"withdrawal_min_balance" json:"withdrawal_min_balance"`
	HasBalance           bool             `db:"has_balance" json:"has_balance"`
	Status               bool             `db:"status" json:"status"`
	SortOrder            int16            `db:"sort_order" json:"sort_order"`
	MinConfirmation      pgtype.Int2      `db:"min_confirmation" json:"min_confirmation"`
	CreatedAt            pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt            pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsStablecoin         bool             `db:"is_stablecoin" json:"is_stablecoin"`
	CurrencyLabel        pgtype.Text      `db:"currency_label" json:"currency_label"`
	TokenLabel           pgtype.Text      `db:"token_label" json:"token_label"`
}

type Exchange struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	Slug      ExchangeSlug     `db:"slug" json:"slug"`
	Name      string           `db:"name" json:"name"`
	IsActive  bool             `db:"is_active" json:"is_active"`
	Url       string           `db:"url" json:"url"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type ExchangeAddress struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	Address     string           `db:"address" json:"address"`
	Chain       string           `db:"chain" json:"chain"`
	Currency    string           `db:"currency" json:"currency"`
	AddressType string           `db:"address_type" json:"address_type"`
	UserID      uuid.UUID        `db:"user_id" json:"user_id"`
	CreateType  string           `db:"create_type" json:"create_type"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	ExchangeID  uuid.UUID        `db:"exchange_id" json:"exchange_id"`
}

type ExchangeChain struct {
	ID         uuid.UUID    `db:"id" json:"id"`
	Slug       ExchangeSlug `db:"slug" json:"slug"`
	CurrencyID string       `db:"currency_id" json:"currency_id"`
	Ticker     string       `db:"ticker" json:"ticker"`
	Chain      string       `db:"chain" json:"chain"`
}

type ExchangeKey struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	ExchangeID uuid.UUID        `db:"exchange_id" json:"exchange_id"`
	Name       ExchangeKeyName  `db:"name" json:"name"`
	Title      string           `db:"title" json:"title"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type ExchangeOrder struct {
	ID                     uuid.UUID           `db:"id" json:"id"`
	ExchangeID             uuid.UUID           `db:"exchange_id" json:"exchange_id"`
	ExchangeOrderID        pgtype.Text         `db:"exchange_order_id" json:"exchange_order_id"`
	ClientOrderID          pgtype.Text         `db:"client_order_id" json:"client_order_id"`
	Symbol                 string              `db:"symbol" json:"symbol"`
	Side                   OrderSide           `db:"side" json:"side"`
	Amount                 decimal.Decimal     `db:"amount" json:"amount"`
	OrderCreatedAt         pgtype.Timestamp    `db:"order_created_at" json:"order_created_at"`
	CreatedAt              pgtype.Timestamp    `db:"created_at" json:"created_at"`
	UpdatedAt              pgtype.Timestamp    `db:"updated_at" json:"updated_at"`
	FailReason             pgtype.Text         `db:"fail_reason" json:"fail_reason"`
	Status                 ExchangeOrderStatus `db:"status" json:"status"`
	UserID                 uuid.UUID           `db:"user_id" json:"user_id"`
	AmountUsd              decimal.NullDecimal `db:"amount_usd" json:"amount_usd"`
	ExchangeConnectionHash pgtype.Text         `db:"exchange_connection_hash" json:"exchange_connection_hash"`
}

type ExchangeUserKey struct {
	ID            uuid.UUID        `db:"id" json:"id"`
	UserID        uuid.UUID        `db:"user_id" json:"user_id"`
	ExchangeKeyID uuid.UUID        `db:"exchange_key_id" json:"exchange_key_id"`
	Value         string           `db:"value" json:"value"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type ExchangeWithdrawalHistory struct {
	ID                     uuid.UUID               `db:"id" json:"id"`
	UserID                 uuid.UUID               `db:"user_id" json:"user_id"`
	ExchangeID             uuid.UUID               `db:"exchange_id" json:"exchange_id"`
	ExchangeOrderID        pgtype.Text             `db:"exchange_order_id" json:"exchange_order_id"`
	Address                string                  `db:"address" json:"address"`
	NativeAmount           decimal.NullDecimal     `db:"native_amount" json:"native_amount"`
	FiatAmount             decimal.NullDecimal     `db:"fiat_amount" json:"fiat_amount"`
	Currency               string                  `db:"currency" json:"currency"`
	Chain                  string                  `db:"chain" json:"chain"`
	Status                 WithdrawalHistoryStatus `db:"status" json:"status"`
	Txid                   pgtype.Text             `db:"txid" json:"txid"`
	CreatedAt              pgtype.Timestamp        `db:"created_at" json:"created_at"`
	UpdatedAt              pgtype.Timestamp        `db:"updated_at" json:"updated_at"`
	FailReason             pgtype.Text             `db:"fail_reason" json:"fail_reason"`
	ExchangeConnectionHash pgtype.Text             `db:"exchange_connection_hash" json:"exchange_connection_hash"`
}

type ExchangeWithdrawalSetting struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	ExchangeID uuid.UUID        `db:"exchange_id" json:"exchange_id"`
	Currency   string           `db:"currency" json:"currency"`
	Chain      string           `db:"chain" json:"chain"`
	Address    string           `db:"address" json:"address"`
	MinAmount  decimal.Decimal  `db:"min_amount" json:"min_amount"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsEnabled  bool             `db:"is_enabled" json:"is_enabled"`
}

type Log struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	LogTypeSlug string           `db:"log_type_slug" json:"log_type_slug"`
	ProcessID   uuid.UUID        `db:"process_id" json:"process_id"`
	Level       string           `db:"level" json:"level"`
	Status      string           `db:"status" json:"status"`
	Message     string           `db:"message" json:"message"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type LogType struct {
	ID                    int32            `db:"id" json:"id"`
	Slug                  string           `db:"slug" json:"slug"`
	Title                 string           `db:"title" json:"title"`
	ErrorCount            int32            `db:"error_count" json:"error_count"`
	ErrorCountNotifyLimit int32            `db:"error_count_notify_limit" json:"error_count_notify_limit"`
	StartParams           []byte           `db:"start_params" json:"start_params"`
	NotifyParams          []byte           `db:"notify_params" json:"notify_params"`
	CreatedAt             pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt             pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type MultiWithdrawalRule struct {
	ID                 uuid.UUID           `db:"id" json:"id"`
	WithdrawalWalletID uuid.UUID           `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
	Mode               MultiWithdrawalMode `db:"mode" json:"mode"`
	ManualAddress      pgtype.Text         `db:"manual_address" json:"manual_address"`
	CreatedAt          pgtype.Timestamp    `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp    `db:"updated_at" json:"updated_at"`
}

type Notification struct {
	ID       uuid.UUID             `db:"id" json:"id"`
	Category *NotificationCategory `db:"category" json:"category"`
	Type     NotificationType      `db:"type" json:"type"`
}

type NotificationSendHistory struct {
	ID                      uuid.UUID        `db:"id" json:"id"`
	Destination             string           `db:"destination" json:"destination"`
	MessageText             pgtype.Text      `db:"message_text" json:"message_text"`
	Sender                  string           `db:"sender" json:"sender"`
	CreatedAt               pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt               pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	SentAt                  pgtype.Timestamp `db:"sent_at" json:"sent_at"`
	Type                    NotificationType `db:"type" json:"type"`
	Channel                 DeliveryChannel  `db:"channel" json:"channel"`
	NotificationSendQueueID uuid.UUID        `db:"notification_send_queue_id" json:"notification_send_queue_id"`
	StoreID                 uuid.NullUUID    `db:"store_id" json:"store_id"`
	UserID                  uuid.NullUUID    `db:"user_id" json:"user_id"`
}

type NotificationSendQueue struct {
	ID          uuid.UUID         `db:"id" json:"id"`
	Destination string            `db:"destination" json:"destination"`
	Type        NotificationType  `db:"type" json:"type"`
	Parameters  []byte            `db:"parameters" json:"parameters"`
	Channel     DeliveryChannel   `db:"channel" json:"channel"`
	Attempts    int32             `db:"attempts" json:"attempts"`
	CreatedAt   pgtype.Timestamp  `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp  `db:"updated_at" json:"updated_at"`
	Args        *NotificationArgs `db:"args" json:"args"`
}

type PersonalAccessToken struct {
	ID            uuid.UUID        `db:"id" json:"id"`
	TokenableType string           `db:"tokenable_type" json:"tokenable_type"`
	TokenableID   uuid.UUID        `db:"tokenable_id" json:"tokenable_id"`
	Name          string           `db:"name" json:"name"`
	Token         string           `db:"token" json:"token"`
	LastUsedAt    pgtype.Timestamp `db:"last_used_at" json:"last_used_at"`
	ExpiresAt     *time.Time       `db:"expires_at" json:"expires_at"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Receipt struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	Status     ReceiptStatus    `db:"status" json:"status"`
	StoreID    uuid.UUID        `db:"store_id" json:"store_id"`
	CurrencyID string           `db:"currency_id" json:"currency_id"`
	Amount     decimal.Decimal  `db:"amount" json:"amount"`
	WalletID   uuid.NullUUID    `db:"wallet_id" json:"wallet_id"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type Setting struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	ModelID   uuid.NullUUID    `db:"model_id" json:"model_id"`
	ModelType *string          `db:"model_type" json:"model_type"`
	Name      string           `db:"name" json:"name"`
	Value     string           `db:"value" json:"value"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsMutable bool             `db:"is_mutable" json:"is_mutable"`
}

type Store struct {
	ID                       uuid.UUID        `db:"id" json:"id"`
	UserID                   uuid.UUID        `db:"user_id" json:"user_id"`
	Name                     string           `db:"name" json:"name"`
	Site                     *string          `db:"site" json:"site"`
	CurrencyID               string           `db:"currency_id" json:"currency_id"`
	RateSource               RateSource       `db:"rate_source" json:"rate_source"`
	ReturnUrl                *string          `db:"return_url" json:"return_url"`
	SuccessUrl               *string          `db:"success_url" json:"success_url"`
	RateScale                decimal.Decimal  `db:"rate_scale" json:"rate_scale"`
	Status                   bool             `db:"status" json:"status"`
	MinimalPayment           decimal.Decimal  `db:"minimal_payment" json:"minimal_payment"`
	CreatedAt                pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt                pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt                pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
	PublicPaymentFormEnabled bool             `db:"public_payment_form_enabled" json:"public_payment_form_enabled"`
}

type StoreApiKey struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	StoreID   uuid.UUID        `db:"store_id" json:"store_id"`
	Key       string           `db:"key" json:"key"`
	Enabled   bool             `db:"enabled" json:"enabled"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type StoreCurrency struct {
	CurrencyID string    `db:"currency_id" json:"currency_id"`
	StoreID    uuid.UUID `db:"store_id" json:"store_id"`
}

type StoreSecret struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	StoreID   uuid.UUID        `db:"store_id" json:"store_id"`
	Secret    string           `db:"secret" json:"secret"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type StoreWebhook struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	StoreID   uuid.UUID        `db:"store_id" json:"store_id"`
	Url       string           `db:"url" json:"url"`
	Enabled   bool             `db:"enabled" json:"enabled"`
	Events    []*WebhookEvent  `db:"events" json:"events"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type StoreWhitelist struct {
	Ip      string    `db:"ip" json:"ip"`
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
}

type Transaction struct {
	ID                 uuid.UUID           `db:"id" json:"id"`
	UserID             uuid.UUID           `db:"user_id" json:"user_id"`
	StoreID            uuid.NullUUID       `db:"store_id" json:"store_id"`
	ReceiptID          uuid.NullUUID       `db:"receipt_id" json:"receipt_id"`
	WalletID           uuid.NullUUID       `db:"wallet_id" json:"wallet_id"`
	CurrencyID         string              `db:"currency_id" json:"currency_id"`
	Blockchain         string              `db:"blockchain" json:"blockchain"`
	TxHash             string              `db:"tx_hash" json:"tx_hash"`
	BcUniqKey          *string             `db:"bc_uniq_key" json:"bc_uniq_key"`
	Type               TransactionsType    `db:"type" json:"type"`
	FromAddress        string              `db:"from_address" json:"from_address"`
	ToAddress          string              `db:"to_address" json:"to_address"`
	Amount             decimal.Decimal     `db:"amount" json:"amount"`
	AmountUsd          decimal.NullDecimal `db:"amount_usd" json:"amount_usd"`
	Fee                decimal.Decimal     `db:"fee" json:"fee"`
	WithdrawalIsManual bool                `db:"withdrawal_is_manual" json:"withdrawal_is_manual"`
	NetworkCreatedAt   pgtype.Timestamp    `db:"network_created_at" json:"network_created_at"`
	CreatedAt          pgtype.Timestamp    `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp    `db:"updated_at" json:"updated_at"`
	CreatedAtIndex     pgtype.Int8         `db:"created_at_index" json:"created_at_index"`
	IsSystem           bool                `db:"is_system" json:"is_system"`
}

type Transfer struct {
	ID            uuid.UUID        `db:"id" json:"id"`
	Number        int64            `db:"number" json:"number"`
	UserID        uuid.UUID        `db:"user_id" json:"user_id"`
	Kind          TransferKind     `db:"kind" json:"kind"`
	CurrencyID    string           `db:"currency_id" json:"currency_id"`
	Status        TransferStatus   `db:"status" json:"status"`
	Stage         TransferStage    `db:"stage" json:"stage"`
	Amount        decimal.Decimal  `db:"amount" json:"amount"`
	AmountUsd     decimal.Decimal  `db:"amount_usd" json:"amount_usd"`
	Message       *string          `db:"message" json:"message"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	Blockchain    Blockchain       `db:"blockchain" json:"blockchain"`
	FromAddresses []string         `db:"from_addresses" json:"from_addresses"`
	ToAddresses   []string         `db:"to_addresses" json:"to_addresses"`
	Step          *string          `db:"step" json:"step"`
	TxHash        *string          `db:"tx_hash" json:"tx_hash"`
}

type TransferTransaction struct {
	ID                uuid.UUID                  `db:"id" json:"id"`
	TransferID        uuid.UUID                  `db:"transfer_id" json:"transfer_id"`
	TxHash            string                     `db:"tx_hash" json:"tx_hash"`
	BandwidthAmount   decimal.Decimal            `db:"bandwidth_amount" json:"bandwidth_amount"`
	EnergyAmount      decimal.Decimal            `db:"energy_amount" json:"energy_amount"`
	NativeTokenAmount decimal.Decimal            `db:"native_token_amount" json:"native_token_amount"`
	NativeTokenFee    decimal.Decimal            `db:"native_token_fee" json:"native_token_fee"`
	TxType            TransferTransactionType    `db:"tx_type" json:"tx_type"`
	Status            TransferTransactionsStatus `db:"status" json:"status"`
	Step              string                     `db:"step" json:"step"`
	CreatedAt         pgtype.Timestamptz         `db:"created_at" json:"created_at"`
	UpdatedAt         pgtype.Timestamptz         `db:"updated_at" json:"updated_at"`
}

type TronWalletBalanceStatistic struct {
	ID                 uuid.UUID          `db:"id" json:"id"`
	ProcessingOwnerID  uuid.UUID          `db:"processing_owner_id" json:"processing_owner_id"`
	Address            string             `db:"address" json:"address"`
	StakedBandwidth    decimal.Decimal    `db:"staked_bandwidth" json:"staked_bandwidth"`
	StakedEnergy       decimal.Decimal    `db:"staked_energy" json:"staked_energy"`
	DelegatedEnergy    decimal.Decimal    `db:"delegated_energy" json:"delegated_energy"`
	DelegatedBandwidth decimal.Decimal    `db:"delegated_bandwidth" json:"delegated_bandwidth"`
	AvailableBandwidth decimal.Decimal    `db:"available_bandwidth" json:"available_bandwidth"`
	AvailableEnergy    decimal.Decimal    `db:"available_energy" json:"available_energy"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

type UnconfirmedTransaction struct {
	ID               uuid.UUID           `db:"id" json:"id"`
	UserID           uuid.UUID           `db:"user_id" json:"user_id"`
	StoreID          uuid.NullUUID       `db:"store_id" json:"store_id"`
	WalletID         uuid.NullUUID       `db:"wallet_id" json:"wallet_id"`
	CurrencyID       string              `db:"currency_id" json:"currency_id"`
	TxHash           string              `db:"tx_hash" json:"tx_hash"`
	BcUniqKey        *string             `db:"bc_uniq_key" json:"bc_uniq_key"`
	Type             TransactionsType    `db:"type" json:"type"`
	FromAddress      string              `db:"from_address" json:"from_address"`
	ToAddress        string              `db:"to_address" json:"to_address"`
	Amount           decimal.Decimal     `db:"amount" json:"amount"`
	AmountUsd        decimal.NullDecimal `db:"amount_usd" json:"amount_usd"`
	NetworkCreatedAt pgtype.Timestamp    `db:"network_created_at" json:"network_created_at"`
	CreatedAt        pgtype.Timestamp    `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamp    `db:"updated_at" json:"updated_at"`
	Blockchain       string              `db:"blockchain" json:"blockchain"`
}

type UpdateBalanceQueue struct {
	ID                       uuid.UUID        `db:"id" json:"id"`
	CurrencyID               string           `db:"currency_id" json:"currency_id"`
	Address                  string           `db:"address" json:"address"`
	NativeTokenBalanceUpdate bool             `db:"native_token_balance_update" json:"native_token_balance_update"`
	CreatedAt                pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt                pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type User struct {
	ID                uuid.UUID        `db:"id" json:"id"`
	Email             string           `db:"email" json:"email" validate:"required,email"`
	EmailVerifiedAt   pgtype.Timestamp `db:"email_verified_at" json:"email_verified_at"`
	Password          string           `db:"password" json:"password" validate:"required,min=8,max=32"`
	RememberToken     pgtype.Text      `db:"remember_token" json:"remember_token"`
	ProcessingOwnerID uuid.NullUUID    `db:"processing_owner_id" json:"processing_owner_id"`
	Location          string           `db:"location" json:"location" validate:"required,timezone"`
	Language          string           `db:"language" json:"language"`
	RateSource        RateSource       `db:"rate_source" json:"rate_source"`
	CreatedAt         pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt         pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt         pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
	Banned            pgtype.Bool      `db:"banned" json:"banned"`
	ExchangeSlug      *ExchangeSlug    `db:"exchange_slug" json:"exchange_slug"`
	RateScale         decimal.Decimal  `db:"rate_scale" json:"rate_scale"`
	DvnetToken        pgtype.Text      `db:"dvnet_token" json:"dvnet_token"`
}

type UserAddressBook struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	UserID      uuid.UUID        `db:"user_id" json:"user_id"`
	Address     string           `db:"address" json:"address"`
	CurrencyID  string           `db:"currency_id" json:"currency_id"`
	Name        pgtype.Text      `db:"name" json:"name"`
	Tag         pgtype.Text      `db:"tag" json:"tag"`
	Blockchain  *Blockchain      `db:"blockchain" json:"blockchain"`
	Type        AddressBookType  `db:"type" json:"type"`
	SubmittedAt pgtype.Timestamp `db:"submitted_at" json:"submitted_at"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt   pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}

type UserExchange struct {
	ID              uuid.UUID               `db:"id" json:"id"`
	ExchangeID      uuid.UUID               `db:"exchange_id" json:"exchange_id"`
	UserID          uuid.UUID               `db:"user_id" json:"user_id"`
	WithdrawalState ExchangeWithdrawalState `db:"withdrawal_state" json:"withdrawal_state"`
	SwapState       ExchangeSwapState       `db:"swap_state" json:"swap_state"`
}

type UserExchangePair struct {
	ID           uuid.UUID `db:"id" json:"id"`
	ExchangeID   uuid.UUID `db:"exchange_id" json:"exchange_id"`
	UserID       uuid.UUID `db:"user_id" json:"user_id"`
	CurrencyFrom string    `db:"currency_from" json:"currency_from"`
	CurrencyTo   string    `db:"currency_to" json:"currency_to"`
	Symbol       string    `db:"symbol" json:"symbol"`
	Type         OrderSide `db:"type" json:"type"`
}

type UserNotification struct {
	ID             uuid.UUID        `db:"id" json:"id"`
	UserID         uuid.UUID        `db:"user_id" json:"user_id"`
	NotificationID uuid.UUID        `db:"notification_id" json:"notification_id"`
	EmailEnabled   bool             `db:"email_enabled" json:"email_enabled"`
	TgEnabled      bool             `db:"tg_enabled" json:"tg_enabled"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type UserStore struct {
	ID        uuid.UUID        `db:"id" json:"id"`
	UserID    uuid.UUID        `db:"user_id" json:"user_id"`
	StoreID   uuid.UUID        `db:"store_id" json:"store_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type Wallet struct {
	ID              uuid.UUID        `db:"id" json:"id"`
	StoreID         uuid.UUID        `db:"store_id" json:"store_id"`
	StoreExternalID string           `db:"store_external_id" json:"store_external_id"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt       pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
	Email           pgtype.Text      `db:"email" json:"email"`
	IpAddress       pgtype.Text      `db:"ip_address" json:"ip_address"`
	UntrustedEmail  pgtype.Text      `db:"untrusted_email" json:"untrusted_email"`
	Locale          string           `db:"locale" json:"locale"`
}

type WalletAddress struct {
	ID         uuid.UUID        `db:"id" json:"id"`
	WalletID   uuid.UUID        `db:"wallet_id" json:"wallet_id"`
	UserID     uuid.UUID        `db:"user_id" json:"user_id"`
	CurrencyID string           `db:"currency_id" json:"currency_id"`
	Blockchain Blockchain       `db:"blockchain" json:"blockchain"`
	Address    string           `db:"address" json:"address"`
	Amount     decimal.Decimal  `db:"amount" json:"amount"`
	CreatedAt  pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
	Dirty      bool             `db:"dirty" json:"dirty"`
}

type WalletAddressesActivityLog struct {
	ID                uuid.UUID        `db:"id" json:"id"`
	WalletAddressesID uuid.UUID        `db:"wallet_addresses_id" json:"wallet_addresses_id"`
	Text              string           `db:"text" json:"text"`
	TextVariables     []byte           `db:"text_variables" json:"text_variables"`
	CreatedAt         pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt         pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

type WebhookSendHistory struct {
	ID                 uuid.UUID        `db:"id" json:"id"`
	TxID               uuid.UUID        `db:"tx_id" json:"tx_id"`
	SendQueueJobID     uuid.NullUUID    `db:"send_queue_job_id" json:"send_queue_job_id"`
	Type               string           `db:"type" json:"type"`
	Url                string           `db:"url" json:"url"`
	Status             string           `db:"status" json:"status"`
	Request            []byte           `db:"request" json:"request"`
	Response           *string          `db:"response" json:"response"`
	ResponseStatusCode int              `db:"response_status_code" json:"response_status_code"`
	CreatedAt          pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	IsManual           pgtype.Bool      `db:"is_manual" json:"is_manual"`
	StoreID            uuid.NullUUID    `db:"store_id" json:"store_id"`
}

type WebhookSendQueue struct {
	ID            uuid.UUID        `db:"id" json:"id"`
	WebhookID     uuid.UUID        `db:"webhook_id" json:"webhook_id"`
	SecondsDelay  int16            `db:"seconds_delay" json:"seconds_delay"`
	TransactionID uuid.UUID        `db:"transaction_id" json:"transaction_id"`
	Payload       []byte           `db:"payload" json:"payload"`
	Signature     string           `db:"signature" json:"signature"`
	Event         string           `db:"event" json:"event"`
	LastSentAt    pgtype.Timestamp `db:"last_sent_at" json:"last_sent_at"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type WithdrawalFromProcessingWallet struct {
	ID          uuid.UUID        `db:"id" json:"id"`
	CurrencyID  string           `db:"currency_id" json:"currency_id"`
	StoreID     uuid.UUID        `db:"store_id" json:"store_id"`
	TransferID  uuid.NullUUID    `db:"transfer_id" json:"transfer_id"`
	AddressFrom string           `db:"address_from" json:"address_from"`
	AddressTo   string           `db:"address_to" json:"address_to"`
	Amount      decimal.Decimal  `db:"amount" json:"amount"`
	AmountUsd   decimal.Decimal  `db:"amount_usd" json:"amount_usd"`
	CreatedAt   pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	RequestID   *string          `db:"request_id" json:"request_id"`
}

type WithdrawalWallet struct {
	ID                      uuid.UUID           `db:"id" json:"id"`
	UserID                  uuid.UUID           `db:"user_id" json:"user_id"`
	Blockchain              Blockchain          `db:"blockchain" json:"blockchain"`
	CurrencyID              string              `db:"currency_id" json:"currency_id"`
	WithdrawalMinBalance    decimal.NullDecimal `db:"withdrawal_min_balance" json:"withdrawal_min_balance"`
	WithdrawalInterval      string              `db:"withdrawal_interval" json:"withdrawal_interval"`
	CreatedAt               pgtype.Timestamp    `db:"created_at" json:"created_at"`
	DeletedAt               pgtype.Timestamp    `db:"deleted_at" json:"deleted_at"`
	UpdatedAt               pgtype.Timestamp    `db:"updated_at" json:"updated_at"`
	WithdrawalEnabled       string              `db:"withdrawal_enabled" json:"withdrawal_enabled"`
	WithdrawalMinBalanceUsd decimal.NullDecimal `db:"withdrawal_min_balance_usd" json:"withdrawal_min_balance_usd"`
}

type WithdrawalWalletAddress struct {
	ID                 uuid.UUID        `db:"id" json:"id"`
	WithdrawalWalletID uuid.UUID        `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
	Name               *string          `db:"name" json:"name"`
	Address            string           `db:"address" json:"address"`
	CreatedAt          pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	DeletedAt          pgtype.Timestamp `db:"deleted_at" json:"deleted_at"`
}
