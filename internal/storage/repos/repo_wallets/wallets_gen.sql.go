// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallets_gen.sql

package repo_wallets

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO wallets (store_id, store_external_id, created_at, email, ip_address, untrusted_email, locale)
	VALUES ($1, $2, now(), $3, $4, $5, $6)
	RETURNING id, store_id, store_external_id, created_at, updated_at, deleted_at, email, ip_address, untrusted_email, locale
`

type CreateParams struct {
	StoreID         uuid.UUID   `db:"store_id" json:"store_id"`
	StoreExternalID string      `db:"store_external_id" json:"store_external_id"`
	Email           pgtype.Text `db:"email" json:"email"`
	IpAddress       pgtype.Text `db:"ip_address" json:"ip_address"`
	UntrustedEmail  pgtype.Text `db:"untrusted_email" json:"untrusted_email"`
	Locale          string      `db:"locale" json:"locale"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Wallet, error) {
	row := q.db.QueryRow(ctx, create,
		arg.StoreID,
		arg.StoreExternalID,
		arg.Email,
		arg.IpAddress,
		arg.UntrustedEmail,
		arg.Locale,
	)
	var i models.Wallet
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.IpAddress,
		&i.UntrustedEmail,
		&i.Locale,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, store_id, store_external_id, created_at, updated_at, deleted_at, email, ip_address, untrusted_email, locale FROM wallets WHERE deleted_at IS NULL AND id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.Wallet, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.Wallet
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.StoreExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.IpAddress,
		&i.UntrustedEmail,
		&i.Locale,
	)
	return &i, err
}
