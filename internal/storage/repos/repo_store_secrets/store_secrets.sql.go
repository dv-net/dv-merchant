// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_secrets.sql

package repo_store_secrets

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO store_secrets (store_id, secret)
VALUES ($1, $2) ON CONFLICT (store_id) DO UPDATE SET secret = $2, updated_at = now()
RETURNING id, store_id, secret, created_at, updated_at
`

type CreateParams struct {
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
	Secret  string    `db:"secret" json:"secret"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.StoreSecret, error) {
	row := q.db.QueryRow(ctx, create, arg.StoreID, arg.Secret)
	var i models.StoreSecret
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Secret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteBuStoreID = `-- name: DeleteBuStoreID :exec
DELETE FROM store_secrets WHERE store_id=$1
`

func (q *Queries) DeleteBuStoreID(ctx context.Context, storeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBuStoreID, storeID)
	return err
}

const getSecretByStoreID = `-- name: GetSecretByStoreID :one
SELECT secret FROM store_secrets WHERE store_id = $1 LIMIT 1
`

func (q *Queries) GetSecretByStoreID(ctx context.Context, storeID uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getSecretByStoreID, storeID)
	var secret string
	err := row.Scan(&secret)
	return secret, err
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE store_secrets
SET secret=$1, updated_at=now()
WHERE store_id=$2
    RETURNING id, store_id, secret, created_at, updated_at
`

type UpdateSecretParams struct {
	Secret  string    `db:"secret" json:"secret"`
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (*models.StoreSecret, error) {
	row := q.db.QueryRow(ctx, updateSecret, arg.Secret, arg.StoreID)
	var i models.StoreSecret
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Secret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
