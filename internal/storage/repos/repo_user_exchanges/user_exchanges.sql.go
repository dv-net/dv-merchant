// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_exchanges.sql

package repo_user_exchanges

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const createByUserID = `-- name: CreateByUserID :exec
WITH active_user_exchanges AS (
    SELECT DISTINCT u.id AS user_id, e.id AS exchange_id
    FROM users u
             LEFT JOIN exchange_user_keys euk ON euk.user_id = u.id
             LEFT JOIN exchange_keys ek ON ek.id = euk.exchange_key_id
             LEFT JOIN exchanges e ON e.id = ek.exchange_id
    WHERE euk.exchange_key_id IS NOT NULL
    AND u.id = $1
)
INSERT INTO user_exchanges (user_id, exchange_id, withdrawal_state, swap_state)
SELECT user_id, exchange_id, 'disabled', 'disabled'
FROM active_user_exchanges
ON CONFLICT (user_id, exchange_id) DO NOTHING
`

func (q *Queries) CreateByUserID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, createByUserID, id)
	return err
}

const deleteByKeyID = `-- name: DeleteByKeyID :exec
WITH exchange_key AS (
    SELECT DISTINCT euk.user_id, ek.exchange_id FROM exchange_user_keys euk
    LEFT JOIN exchange_keys ek ON ek.id = euk.exchange_key_id
    WHERE euk.id = $1
)
DELETE FROM user_exchanges ue
USING exchange_key
WHERE ue.exchange_id = exchange_key.exchange_id
AND ue.user_id = exchange_key.user_id
`

func (q *Queries) DeleteByKeyID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteByKeyID, id)
	return err
}

const deleteByUserAndExchangeID = `-- name: DeleteByUserAndExchangeID :exec
DELETE FROM user_exchanges WHERE user_id = $1 AND exchange_id = $2
`

type DeleteByUserAndExchangeIDParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
}

func (q *Queries) DeleteByUserAndExchangeID(ctx context.Context, arg DeleteByUserAndExchangeIDParams) error {
	_, err := q.db.Exec(ctx, deleteByUserAndExchangeID, arg.UserID, arg.ExchangeID)
	return err
}

const getByUserAndExchangeID = `-- name: GetByUserAndExchangeID :one
SELECT id, exchange_id, user_id, withdrawal_state, swap_state FROM user_exchanges WHERE user_id = $1 AND exchange_id = $2
`

type GetByUserAndExchangeIDParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
}

func (q *Queries) GetByUserAndExchangeID(ctx context.Context, arg GetByUserAndExchangeIDParams) (*models.UserExchange, error) {
	row := q.db.QueryRow(ctx, getByUserAndExchangeID, arg.UserID, arg.ExchangeID)
	var i models.UserExchange
	err := row.Scan(
		&i.ID,
		&i.ExchangeID,
		&i.UserID,
		&i.WithdrawalState,
		&i.SwapState,
	)
	return &i, err
}

const getByUserID = `-- name: GetByUserID :one
SELECT id, exchange_id, user_id, withdrawal_state, swap_state FROM user_exchanges WHERE user_id = $1 AND exchange_id = $2
`

type GetByUserIDParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
}

func (q *Queries) GetByUserID(ctx context.Context, arg GetByUserIDParams) (*models.UserExchange, error) {
	row := q.db.QueryRow(ctx, getByUserID, arg.UserID, arg.ExchangeID)
	var i models.UserExchange
	err := row.Scan(
		&i.ID,
		&i.ExchangeID,
		&i.UserID,
		&i.WithdrawalState,
		&i.SwapState,
	)
	return &i, err
}
