// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_whitelist.sql

package repo_store_whitelist

import (
	"context"

	"github.com/google/uuid"
)

const checkExistsByIP = `-- name: CheckExistsByIP :one
SELECT (
    EXISTS (
        SELECT ip, store_id FROM store_whitelist WHERE ip = $1 AND store_id = $2
    )
)
`

type CheckExistsByIPParams struct {
	Ip      string    `db:"ip" json:"ip"`
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
}

func (q *Queries) CheckExistsByIP(ctx context.Context, arg CheckExistsByIPParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsByIP, arg.Ip, arg.StoreID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const delete = `-- name: Delete :exec
DELETE FROM store_whitelist WHERE store_id=$1
`

func (q *Queries) Delete(ctx context.Context, storeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, storeID)
	return err
}

const deleteByIP = `-- name: DeleteByIP :exec
DELETE FROM store_whitelist WHERE ip=$1 AND store_id=$2
`

type DeleteByIPParams struct {
	Ip      string    `db:"ip" json:"ip"`
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
}

func (q *Queries) DeleteByIP(ctx context.Context, arg DeleteByIPParams) error {
	_, err := q.db.Exec(ctx, deleteByIP, arg.Ip, arg.StoreID)
	return err
}
