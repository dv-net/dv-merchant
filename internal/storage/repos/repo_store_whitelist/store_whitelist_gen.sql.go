// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_whitelist_gen.sql

package repo_store_whitelist

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO store_whitelist (ip, store_id)
	VALUES ($1, $2)
	RETURNING ip, store_id
`

type CreateParams struct {
	Ip      string    `db:"ip" json:"ip"`
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.StoreWhitelist, error) {
	row := q.db.QueryRow(ctx, create, arg.Ip, arg.StoreID)
	var i models.StoreWhitelist
	err := row.Scan(&i.Ip, &i.StoreID)
	return &i, err
}

const find = `-- name: Find :many
SELECT ip, store_id FROM store_whitelist WHERE store_id=$1
`

func (q *Queries) Find(ctx context.Context, storeID uuid.UUID) ([]*models.StoreWhitelist, error) {
	rows, err := q.db.Query(ctx, find, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.StoreWhitelist{}
	for rows.Next() {
		var i models.StoreWhitelist
		if err := rows.Scan(&i.Ip, &i.StoreID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
