// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_exchange_user_keys

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchDeleteByID = `-- name: BatchDeleteByID :batchexec
DELETE FROM exchange_user_keys WHERE id = $1
`

type BatchDeleteByIDBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) BatchDeleteByID(ctx context.Context, id []uuid.UUID) *BatchDeleteByIDBatchResults {
	batch := &pgx.Batch{}
	for _, a := range id {
		vals := []interface{}{
			a,
		}
		batch.Queue(batchDeleteByID, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchDeleteByIDBatchResults{br, len(id), false}
}

func (b *BatchDeleteByIDBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchDeleteByIDBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
