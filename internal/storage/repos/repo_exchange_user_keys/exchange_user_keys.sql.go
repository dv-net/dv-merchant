// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_user_keys.sql

package repo_exchange_user_keys

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const createOrUpdateUserKey = `-- name: CreateOrUpdateUserKey :one
INSERT INTO exchange_user_keys (user_id, exchange_key_id, value, created_at, updated_at)
 VALUES ($1, $2, $3, now(), now())
ON CONFLICT (user_id, exchange_key_id) DO UPDATE
 SET value = $3,
     updated_at = now()
RETURNING id, user_id, exchange_key_id, value, created_at, updated_at
`

type CreateOrUpdateUserKeyParams struct {
	UserID        uuid.UUID `db:"user_id" json:"user_id"`
	ExchangeKeyID uuid.UUID `db:"exchange_key_id" json:"exchange_key_id"`
	Value         string    `db:"value" json:"value"`
}

func (q *Queries) CreateOrUpdateUserKey(ctx context.Context, arg CreateOrUpdateUserKeyParams) (*models.ExchangeUserKey, error) {
	row := q.db.QueryRow(ctx, createOrUpdateUserKey, arg.UserID, arg.ExchangeKeyID, arg.Value)
	var i models.ExchangeUserKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExchangeKeyID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteByID = `-- name: DeleteByID :exec
DELETE FROM exchange_user_keys WHERE id=$1
`

func (q *Queries) DeleteByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteByID, id)
	return err
}

const getKeysByExchangeSlug = `-- name: GetKeysByExchangeSlug :many
SELECT euk.id, ek.name, euk.value FROM exchanges e
    JOIN exchange_keys ek ON e.id = ek.exchange_id
    JOIN exchange_user_keys euk ON ek.id = euk.exchange_key_id AND euk.user_id = $1
where e.slug = $2
`

type GetKeysByExchangeSlugParams struct {
	UserID       uuid.UUID           `db:"user_id" json:"user_id"`
	ExchangeSlug models.ExchangeSlug `db:"exchange_slug" json:"exchange_slug"`
}

type GetKeysByExchangeSlugRow struct {
	ID    uuid.UUID              `db:"id" json:"id"`
	Name  models.ExchangeKeyName `db:"name" json:"name"`
	Value string                 `db:"value" json:"value"`
}

func (q *Queries) GetKeysByExchangeSlug(ctx context.Context, arg GetKeysByExchangeSlugParams) ([]*GetKeysByExchangeSlugRow, error) {
	rows, err := q.db.Query(ctx, getKeysByExchangeSlug, arg.UserID, arg.ExchangeSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetKeysByExchangeSlugRow{}
	for rows.Next() {
		var i GetKeysByExchangeSlugRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
