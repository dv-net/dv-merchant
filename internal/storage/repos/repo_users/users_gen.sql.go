// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_gen.sql

package repo_users

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO users (email, email_verified_at, password, remember_token, processing_owner_id, location, language, rate_source, created_at, deleted_at, banned, exchange_slug, rate_scale, dvnet_token)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now(), $9, $10, $11, $12, $13)
	RETURNING id, email, email_verified_at, password, remember_token, processing_owner_id, location, language, rate_source, created_at, updated_at, deleted_at, banned, exchange_slug, rate_scale, dvnet_token
`

type CreateParams struct {
	Email             string               `db:"email" json:"email" validate:"required,email"`
	EmailVerifiedAt   pgtype.Timestamp     `db:"email_verified_at" json:"email_verified_at"`
	Password          string               `db:"password" json:"password" validate:"required,min=8,max=32"`
	RememberToken     pgtype.Text          `db:"remember_token" json:"remember_token"`
	ProcessingOwnerID uuid.NullUUID        `db:"processing_owner_id" json:"processing_owner_id"`
	Location          string               `db:"location" json:"location" validate:"required,timezone"`
	Language          string               `db:"language" json:"language"`
	RateSource        models.RateSource    `db:"rate_source" json:"rate_source"`
	DeletedAt         pgtype.Timestamp     `db:"deleted_at" json:"deleted_at"`
	Banned            pgtype.Bool          `db:"banned" json:"banned"`
	ExchangeSlug      *models.ExchangeSlug `db:"exchange_slug" json:"exchange_slug"`
	RateScale         decimal.Decimal      `db:"rate_scale" json:"rate_scale"`
	DvnetToken        pgtype.Text          `db:"dvnet_token" json:"dvnet_token"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.User, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Email,
		arg.EmailVerifiedAt,
		arg.Password,
		arg.RememberToken,
		arg.ProcessingOwnerID,
		arg.Location,
		arg.Language,
		arg.RateSource,
		arg.DeletedAt,
		arg.Banned,
		arg.ExchangeSlug,
		arg.RateScale,
		arg.DvnetToken,
	)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.Password,
		&i.RememberToken,
		&i.ProcessingOwnerID,
		&i.Location,
		&i.Language,
		&i.RateSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Banned,
		&i.ExchangeSlug,
		&i.RateScale,
		&i.DvnetToken,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, email, email_verified_at, password, remember_token, processing_owner_id, location, language, rate_source, created_at, updated_at, deleted_at, banned, exchange_slug, rate_scale, dvnet_token FROM users WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]*models.User, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.User{}
	for rows.Next() {
		var i models.User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.EmailVerifiedAt,
			&i.Password,
			&i.RememberToken,
			&i.ProcessingOwnerID,
			&i.Location,
			&i.Language,
			&i.RateSource,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Banned,
			&i.ExchangeSlug,
			&i.RateScale,
			&i.DvnetToken,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE users
	SET location=$1, language=$2, rate_source=$3, updated_at=now(), banned=$4, exchange_slug=$5, 
		rate_scale=$6
	WHERE id=$7
	RETURNING id, email, email_verified_at, password, remember_token, processing_owner_id, location, language, rate_source, created_at, updated_at, deleted_at, banned, exchange_slug, rate_scale, dvnet_token
`

type UpdateParams struct {
	Location     string               `db:"location" json:"location" validate:"required,timezone"`
	Language     string               `db:"language" json:"language"`
	RateSource   models.RateSource    `db:"rate_source" json:"rate_source"`
	Banned       pgtype.Bool          `db:"banned" json:"banned"`
	ExchangeSlug *models.ExchangeSlug `db:"exchange_slug" json:"exchange_slug"`
	RateScale    decimal.Decimal      `db:"rate_scale" json:"rate_scale"`
	ID           uuid.UUID            `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.Location,
		arg.Language,
		arg.RateSource,
		arg.Banned,
		arg.ExchangeSlug,
		arg.RateScale,
		arg.ID,
	)
	var i models.User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EmailVerifiedAt,
		&i.Password,
		&i.RememberToken,
		&i.ProcessingOwnerID,
		&i.Location,
		&i.Language,
		&i.RateSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Banned,
		&i.ExchangeSlug,
		&i.RateScale,
		&i.DvnetToken,
	)
	return &i, err
}
