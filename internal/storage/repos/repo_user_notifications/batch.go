// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_user_notifications

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createOrUpdate = `-- name: CreateOrUpdate :batchexec
INSERT INTO user_notifications (user_id, notification_id, email_enabled, tg_enabled, created_at)
VALUES ($1, $2, $3, $4, now())
ON CONFLICT (user_id, notification_id) DO UPDATE set tg_enabled    = $4,
                                                     email_enabled = $3,
                                                     updated_at    = now()
`

type CreateOrUpdateBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateOrUpdateParams struct {
	UserID         uuid.UUID `db:"user_id" json:"user_id"`
	NotificationID uuid.UUID `db:"notification_id" json:"notification_id"`
	EmailEnabled   bool      `db:"email_enabled" json:"email_enabled"`
	TgEnabled      bool      `db:"tg_enabled" json:"tg_enabled"`
}

func (q *Queries) CreateOrUpdate(ctx context.Context, arg []CreateOrUpdateParams) *CreateOrUpdateBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.UserID,
			a.NotificationID,
			a.EmailEnabled,
			a.TgEnabled,
		}
		batch.Queue(createOrUpdate, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateOrUpdateBatchResults{br, len(arg), false}
}

func (b *CreateOrUpdateBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateOrUpdateBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
