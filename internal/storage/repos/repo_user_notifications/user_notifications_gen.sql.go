// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_notifications_gen.sql

package repo_user_notifications

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO user_notifications (user_id, notification_id, email_enabled, tg_enabled, created_at, updated_at)
	VALUES ($1, $2, $3, $4, $5, $6)
	RETURNING id, user_id, notification_id, email_enabled, tg_enabled, created_at, updated_at
`

type CreateParams struct {
	UserID         uuid.UUID        `db:"user_id" json:"user_id"`
	NotificationID uuid.UUID        `db:"notification_id" json:"notification_id"`
	EmailEnabled   bool             `db:"email_enabled" json:"email_enabled"`
	TgEnabled      bool             `db:"tg_enabled" json:"tg_enabled"`
	CreatedAt      pgtype.Timestamp `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at" json:"updated_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.UserNotification, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.NotificationID,
		arg.EmailEnabled,
		arg.TgEnabled,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i models.UserNotification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotificationID,
		&i.EmailEnabled,
		&i.TgEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, user_id, notification_id, email_enabled, tg_enabled, created_at, updated_at FROM user_notifications WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.UserNotification, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.UserNotification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.NotificationID,
		&i.EmailEnabled,
		&i.TgEnabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
