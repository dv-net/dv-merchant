// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_stores.sql

package repo_user_stores

import (
	"context"

	"github.com/google/uuid"
)

const checkStoreHasUser = `-- name: CheckStoreHasUser :one
SELECT EXISTS(SELECT id, user_id, store_id, created_at FROM user_stores WHERE store_id = $1 and user_id = $2)
`

type CheckStoreHasUserParams struct {
	StoreID uuid.UUID `db:"store_id" json:"store_id"`
	UserID  uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) CheckStoreHasUser(ctx context.Context, arg CheckStoreHasUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkStoreHasUser, arg.StoreID, arg.UserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getStoreIDsByUser = `-- name: GetStoreIDsByUser :many
SELECT distinct(store_id) FROM user_stores WHERE user_id = $1
AND ($2::uuid[] IS NULL OR store_id = ANY ($2::uuid[]))
`

type GetStoreIDsByUserParams struct {
	UserID     uuid.UUID   `db:"user_id" json:"user_id"`
	StoreUuids []uuid.UUID `db:"store_uuids" json:"store_uuids"`
}

func (q *Queries) GetStoreIDsByUser(ctx context.Context, arg GetStoreIDsByUserParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getStoreIDsByUser, arg.UserID, arg.StoreUuids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []uuid.UUID{}
	for rows.Next() {
		var store_id uuid.UUID
		if err := rows.Scan(&store_id); err != nil {
			return nil, err
		}
		items = append(items, store_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
