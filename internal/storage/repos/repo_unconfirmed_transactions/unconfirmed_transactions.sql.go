// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: unconfirmed_transactions.sql

package repo_unconfirmed_transactions

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"
)

const collapseAllByConfirmed = `-- name: CollapseAllByConfirmed :exec
DELETE FROM unconfirmed_transactions ut
       USING transactions t
       WHERE t.tx_hash=ut.tx_hash AND t.currency_id=ut.currency_id AND t.bc_uniq_key=ut.bc_uniq_key
`

func (q *Queries) CollapseAllByConfirmed(ctx context.Context) error {
	_, err := q.db.Exec(ctx, collapseAllByConfirmed)
	return err
}

const getOneByHashAndBlockchain = `-- name: GetOneByHashAndBlockchain :one
SELECT id, user_id, store_id, wallet_id, currency_id, tx_hash, bc_uniq_key, type, from_address, to_address, amount, amount_usd, network_created_at, created_at, updated_at, blockchain FROM unconfirmed_transactions WHERE tx_hash=$1 and blockchain=$2 LIMIT 1
`

type GetOneByHashAndBlockchainParams struct {
	TxHash     string `db:"tx_hash" json:"tx_hash"`
	Blockchain string `db:"blockchain" json:"blockchain"`
}

func (q *Queries) GetOneByHashAndBlockchain(ctx context.Context, arg GetOneByHashAndBlockchainParams) (*models.UnconfirmedTransaction, error) {
	row := q.db.QueryRow(ctx, getOneByHashAndBlockchain, arg.TxHash, arg.Blockchain)
	var i models.UnconfirmedTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreID,
		&i.WalletID,
		&i.CurrencyID,
		&i.TxHash,
		&i.BcUniqKey,
		&i.Type,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.AmountUsd,
		&i.NetworkCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Blockchain,
	)
	return &i, err
}
