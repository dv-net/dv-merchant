// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: unconfirmed_transactions_gen.sql

package repo_unconfirmed_transactions

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO unconfirmed_transactions (user_id, store_id, wallet_id, currency_id, tx_hash, bc_uniq_key, type, from_address, to_address, amount, amount_usd, network_created_at, created_at, blockchain)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, now(), $13)
	RETURNING id, user_id, store_id, wallet_id, currency_id, tx_hash, bc_uniq_key, type, from_address, to_address, amount, amount_usd, network_created_at, created_at, updated_at, blockchain
`

type CreateParams struct {
	UserID           uuid.UUID               `db:"user_id" json:"user_id"`
	StoreID          uuid.NullUUID           `db:"store_id" json:"store_id"`
	WalletID         uuid.NullUUID           `db:"wallet_id" json:"wallet_id"`
	CurrencyID       string                  `db:"currency_id" json:"currency_id"`
	TxHash           string                  `db:"tx_hash" json:"tx_hash"`
	BcUniqKey        *string                 `db:"bc_uniq_key" json:"bc_uniq_key"`
	Type             models.TransactionsType `db:"type" json:"type"`
	FromAddress      string                  `db:"from_address" json:"from_address"`
	ToAddress        string                  `db:"to_address" json:"to_address"`
	Amount           decimal.Decimal         `db:"amount" json:"amount"`
	AmountUsd        decimal.NullDecimal     `db:"amount_usd" json:"amount_usd"`
	NetworkCreatedAt pgtype.Timestamp        `db:"network_created_at" json:"network_created_at"`
	Blockchain       string                  `db:"blockchain" json:"blockchain"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.UnconfirmedTransaction, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.StoreID,
		arg.WalletID,
		arg.CurrencyID,
		arg.TxHash,
		arg.BcUniqKey,
		arg.Type,
		arg.FromAddress,
		arg.ToAddress,
		arg.Amount,
		arg.AmountUsd,
		arg.NetworkCreatedAt,
		arg.Blockchain,
	)
	var i models.UnconfirmedTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreID,
		&i.WalletID,
		&i.CurrencyID,
		&i.TxHash,
		&i.BcUniqKey,
		&i.Type,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.AmountUsd,
		&i.NetworkCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Blockchain,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, user_id, store_id, wallet_id, currency_id, tx_hash, bc_uniq_key, type, from_address, to_address, amount, amount_usd, network_created_at, created_at, updated_at, blockchain FROM unconfirmed_transactions WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.UnconfirmedTransaction, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.UnconfirmedTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StoreID,
		&i.WalletID,
		&i.CurrencyID,
		&i.TxHash,
		&i.BcUniqKey,
		&i.Type,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.AmountUsd,
		&i.NetworkCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Blockchain,
	)
	return &i, err
}
