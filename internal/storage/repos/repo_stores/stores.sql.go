// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stores.sql

package repo_stores

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const getArchivedByUser = `-- name: GetArchivedByUser :many
SELECT id, user_id, name, site, currency_id, rate_source, return_url, success_url, rate_scale, status, minimal_payment, created_at, updated_at, deleted_at, public_payment_form_enabled
FROM stores
WHERE user_id = $1
  AND deleted_at IS NOT NULL
ORDER BY created_at DESC
`

func (q *Queries) GetArchivedByUser(ctx context.Context, userID uuid.UUID) ([]*models.Store, error) {
	rows, err := q.db.Query(ctx, getArchivedByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Store{}
	for rows.Next() {
		var i models.Store
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Site,
			&i.CurrencyID,
			&i.RateSource,
			&i.ReturnUrl,
			&i.SuccessUrl,
			&i.RateScale,
			&i.Status,
			&i.MinimalPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PublicPaymentFormEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByIDWithPublicFormEnabled = `-- name: GetByIDWithPublicFormEnabled :one
SELECT id, user_id, name, site, currency_id, rate_source, return_url, success_url, rate_scale, status, minimal_payment, created_at, updated_at, deleted_at, public_payment_form_enabled
FROM stores
WHERE id = $1::uuid
  AND public_payment_form_enabled = true
LIMIT 1
`

func (q *Queries) GetByIDWithPublicFormEnabled(ctx context.Context, storeID uuid.UUID) (*models.Store, error) {
	row := q.db.QueryRow(ctx, getByIDWithPublicFormEnabled, storeID)
	var i models.Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Site,
		&i.CurrencyID,
		&i.RateSource,
		&i.ReturnUrl,
		&i.SuccessUrl,
		&i.RateScale,
		&i.Status,
		&i.MinimalPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PublicPaymentFormEnabled,
	)
	return &i, err
}

const getByUser = `-- name: GetByUser :many
SELECT id, user_id, name, site, currency_id, rate_source, return_url, success_url, rate_scale, status, minimal_payment, created_at, updated_at, deleted_at, public_payment_form_enabled
FROM stores
WHERE user_id = $1
  AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetByUser(ctx context.Context, userID uuid.UUID) ([]*models.Store, error) {
	rows, err := q.db.Query(ctx, getByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Store{}
	for rows.Next() {
		var i models.Store
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Site,
			&i.CurrencyID,
			&i.RateSource,
			&i.ReturnUrl,
			&i.SuccessUrl,
			&i.RateScale,
			&i.Status,
			&i.MinimalPayment,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.PublicPaymentFormEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStoreByStoreApiKey = `-- name: GetStoreByStoreApiKey :one
SELECT s.id, s.user_id, s.name, s.site, s.currency_id, s.rate_source, s.return_url, s.success_url, s.rate_scale, s.status, s.minimal_payment, s.created_at, s.updated_at, s.deleted_at, s.public_payment_form_enabled
FROM stores s
         JOIN
     store_api_keys sak
     ON
         s.id = sak.store_id
WHERE s.deleted_at IS NULL
  AND sak.key = $1
  AND sak.enabled = true
LIMIT 1
`

func (q *Queries) GetStoreByStoreApiKey(ctx context.Context, key string) (*models.Store, error) {
	row := q.db.QueryRow(ctx, getStoreByStoreApiKey, key)
	var i models.Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Site,
		&i.CurrencyID,
		&i.RateSource,
		&i.ReturnUrl,
		&i.SuccessUrl,
		&i.RateScale,
		&i.Status,
		&i.MinimalPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PublicPaymentFormEnabled,
	)
	return &i, err
}

const getStoreByWalletAddress = `-- name: GetStoreByWalletAddress :one
SELECT s.id, s.user_id, s.name, s.site, s.currency_id, s.rate_source, s.return_url, s.success_url, s.rate_scale, s.status, s.minimal_payment, s.created_at, s.updated_at, s.deleted_at, s.public_payment_form_enabled
FROM stores s
         JOIN wallets w ON s.id = w.store_id
         LEFT JOIN wallet_addresses wa
                   ON wa.wallet_id = w.id
WHERE wa.address = $1
  AND wa.currency_id = $2
LIMIT 1
`

type GetStoreByWalletAddressParams struct {
	Address    string `db:"address" json:"address"`
	CurrencyID string `db:"currency_id" json:"currency_id"`
}

func (q *Queries) GetStoreByWalletAddress(ctx context.Context, arg GetStoreByWalletAddressParams) (*models.Store, error) {
	row := q.db.QueryRow(ctx, getStoreByWalletAddress, arg.Address, arg.CurrencyID)
	var i models.Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Site,
		&i.CurrencyID,
		&i.RateSource,
		&i.ReturnUrl,
		&i.SuccessUrl,
		&i.RateScale,
		&i.Status,
		&i.MinimalPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PublicPaymentFormEnabled,
	)
	return &i, err
}

const getStoreByWalletID = `-- name: GetStoreByWalletID :one
SELECT s.id, s.user_id, s.name, s.site, s.currency_id, s.rate_source, s.return_url, s.success_url, s.rate_scale, s.status, s.minimal_payment, s.created_at, s.updated_at, s.deleted_at, s.public_payment_form_enabled
FROM stores s 
JOIN wallets w ON s.id = w.store_id
WHERE w.id = $1
LIMIT 1
`

func (q *Queries) GetStoreByWalletID(ctx context.Context, id uuid.UUID) (*models.Store, error) {
	row := q.db.QueryRow(ctx, getStoreByWalletID, id)
	var i models.Store
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Site,
		&i.CurrencyID,
		&i.RateSource,
		&i.ReturnUrl,
		&i.SuccessUrl,
		&i.RateScale,
		&i.Status,
		&i.MinimalPayment,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.PublicPaymentFormEnabled,
	)
	return &i, err
}

const getStoreCurrencies = `-- name: GetStoreCurrencies :many
SELECT c.id, c.code, c.name, c.precision, c.is_fiat, c.blockchain, c.contract_address, c.withdrawal_min_balance, c.has_balance, c.status, c.sort_order, c.min_confirmation, c.created_at, c.updated_at, c.is_stablecoin, c.currency_label, c.token_label
FROM store_currencies sc
         INNER JOIN currencies c on sc.currency_id = c.id
WHERE sc.store_id = $1
`

func (q *Queries) GetStoreCurrencies(ctx context.Context, storeID uuid.UUID) ([]*models.Currency, error) {
	rows, err := q.db.Query(ctx, getStoreCurrencies, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Currency{}
	for rows.Next() {
		var i models.Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Precision,
			&i.IsFiat,
			&i.Blockchain,
			&i.ContractAddress,
			&i.WithdrawalMinBalance,
			&i.HasBalance,
			&i.Status,
			&i.SortOrder,
			&i.MinConfirmation,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsStablecoin,
			&i.CurrencyLabel,
			&i.TokenLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restore = `-- name: Restore :exec
UPDATE stores
SET deleted_at = NULL, updated_at = now()
WHERE id = $1
`

func (q *Queries) Restore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, restore, id)
	return err
}

const softDelete = `-- name: SoftDelete :exec
UPDATE stores
SET deleted_at = now(), updated_at = now()
WHERE id = $1
`

func (q *Queries) SoftDelete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDelete, id)
	return err
}

const updateRate = `-- name: UpdateRate :exec
UPDATE stores
SET rate_scale=$1,
    rate_source = $2,
    updated_at=now()
WHERE user_id = $3
`

type UpdateRateParams struct {
	RateScale  decimal.Decimal   `db:"rate_scale" json:"rate_scale"`
	RateSource models.RateSource `db:"rate_source" json:"rate_source"`
	UserID     uuid.UUID         `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateRate(ctx context.Context, arg UpdateRateParams) error {
	_, err := q.db.Exec(ctx, updateRate, arg.RateScale, arg.RateSource, arg.UserID)
	return err
}
