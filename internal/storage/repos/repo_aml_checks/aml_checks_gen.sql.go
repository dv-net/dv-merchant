// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: aml_checks_gen.sql

package repo_aml_checks

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO aml_checks (user_id, service_id, external_id, status, score, risk_level, created_at, updated_at)
	VALUES ($1, $2, $3, $4, $5, $6, now(), $7)
	RETURNING id, user_id, service_id, external_id, status, score, risk_level, created_at, updated_at
`

type CreateParams struct {
	UserID     uuid.UUID             `db:"user_id" json:"user_id"`
	ServiceID  uuid.UUID             `db:"service_id" json:"service_id"`
	ExternalID string                `db:"external_id" json:"external_id"`
	Status     models.AMLCheckStatus `db:"status" json:"status"`
	Score      decimal.Decimal       `db:"score" json:"score"`
	RiskLevel  *models.AmlRiskLevel  `db:"risk_level" json:"risk_level"`
	UpdatedAt  pgtype.Timestamp      `db:"updated_at" json:"updated_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.AmlCheck, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.ServiceID,
		arg.ExternalID,
		arg.Status,
		arg.Score,
		arg.RiskLevel,
		arg.UpdatedAt,
	)
	var i models.AmlCheck
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ServiceID,
		&i.ExternalID,
		&i.Status,
		&i.Score,
		&i.RiskLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
