// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhook_send_histories_gen.sql

package repo_webhook_send_histories

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO webhook_send_histories (tx_id, send_queue_job_id, type, url, status, request, response, response_status_code, created_at, is_manual, store_id)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now(), $9, $10)
	RETURNING id, tx_id, send_queue_job_id, type, url, status, request, response, response_status_code, created_at, updated_at, is_manual, store_id
`

type CreateParams struct {
	TxID               uuid.UUID     `db:"tx_id" json:"tx_id"`
	SendQueueJobID     uuid.NullUUID `db:"send_queue_job_id" json:"send_queue_job_id"`
	Type               string        `db:"type" json:"type"`
	Url                string        `db:"url" json:"url"`
	Status             string        `db:"status" json:"status"`
	Request            []byte        `db:"request" json:"request"`
	Response           *string       `db:"response" json:"response"`
	ResponseStatusCode int           `db:"response_status_code" json:"response_status_code"`
	IsManual           pgtype.Bool   `db:"is_manual" json:"is_manual"`
	StoreID            uuid.NullUUID `db:"store_id" json:"store_id"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.WebhookSendHistory, error) {
	row := q.db.QueryRow(ctx, create,
		arg.TxID,
		arg.SendQueueJobID,
		arg.Type,
		arg.Url,
		arg.Status,
		arg.Request,
		arg.Response,
		arg.ResponseStatusCode,
		arg.IsManual,
		arg.StoreID,
	)
	var i models.WebhookSendHistory
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.SendQueueJobID,
		&i.Type,
		&i.Url,
		&i.Status,
		&i.Request,
		&i.Response,
		&i.ResponseStatusCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsManual,
		&i.StoreID,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, tx_id, send_queue_job_id, type, url, status, request, response, response_status_code, created_at, updated_at, is_manual, store_id FROM webhook_send_histories WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.WebhookSendHistory, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.WebhookSendHistory
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.SendQueueJobID,
		&i.Type,
		&i.Url,
		&i.Status,
		&i.Request,
		&i.Response,
		&i.ResponseStatusCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsManual,
		&i.StoreID,
	)
	return &i, err
}
