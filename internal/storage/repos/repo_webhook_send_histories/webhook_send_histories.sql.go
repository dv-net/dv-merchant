// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhook_send_histories.sql

package repo_webhook_send_histories

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const checkWebhookWasSent = `-- name: CheckWebhookWasSent :one
SELECT EXISTS(SELECT 1 from webhook_send_histories where tx_id=$1 and type=$2 and url=$3 and status='success')
`

type CheckWebhookWasSentParams struct {
	TxID uuid.UUID `db:"tx_id" json:"tx_id"`
	Type string    `db:"type" json:"type"`
	Url  string    `db:"url" json:"url"`
}

func (q *Queries) CheckWebhookWasSent(ctx context.Context, arg CheckWebhookWasSentParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkWebhookWasSent, arg.TxID, arg.Type, arg.Url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllByTxID = `-- name: GetAllByTxID :many
SELECT id, tx_id, send_queue_job_id, type, url, status, request, response, response_status_code, created_at, updated_at, is_manual, store_id FROM webhook_send_histories where tx_id=$1 ORDER BY created_at DESC
`

func (q *Queries) GetAllByTxID(ctx context.Context, txID uuid.UUID) ([]*models.WebhookSendHistory, error) {
	rows, err := q.db.Query(ctx, getAllByTxID, txID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.WebhookSendHistory{}
	for rows.Next() {
		var i models.WebhookSendHistory
		if err := rows.Scan(
			&i.ID,
			&i.TxID,
			&i.SendQueueJobID,
			&i.Type,
			&i.Url,
			&i.Status,
			&i.Request,
			&i.Response,
			&i.ResponseStatusCode,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsManual,
			&i.StoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFailedAttemptsCount = `-- name: GetFailedAttemptsCount :one
SELECT COUNT(id) FROM webhook_send_histories WHERE tx_id=$1 AND type=$2 AND url=$3 AND status='failed'
`

type GetFailedAttemptsCountParams struct {
	TxID uuid.UUID `db:"tx_id" json:"tx_id"`
	Type string    `db:"type" json:"type"`
	Url  string    `db:"url" json:"url"`
}

func (q *Queries) GetFailedAttemptsCount(ctx context.Context, arg GetFailedAttemptsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getFailedAttemptsCount, arg.TxID, arg.Type, arg.Url)
	var count int64
	err := row.Scan(&count)
	return count, err
}
