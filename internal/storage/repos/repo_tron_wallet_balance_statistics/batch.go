// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_tron_wallet_balance_statistics

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const insertTronWalletBalanceStatisticsBatch = `-- name: InsertTronWalletBalanceStatisticsBatch :batchexec
INSERT INTO tron_wallet_balance_statistics (processing_owner_id,
                                            address,
                                            staked_bandwidth,
                                            staked_energy,
                                            delegated_energy,
                                            delegated_bandwidth,
                                            available_energy,
                                            available_bandwidth)
VALUES ($1::uuid,
        $2::varchar,
        $3::numeric,
        $4::numeric,
        $5::numeric,
        $6::numeric,
        $7::numeric,
        $8::numeric)
ON CONFLICT (processing_owner_id, address, created_at) DO NOTHING
`

type InsertTronWalletBalanceStatisticsBatchBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertTronWalletBalanceStatisticsBatchParams struct {
	ProcessingOwnerID  uuid.UUID       `db:"processing_owner_id" json:"processing_owner_id"`
	Address            string          `db:"address" json:"address"`
	StakedBandwidth    decimal.Decimal `db:"staked_bandwidth" json:"staked_bandwidth"`
	StakedEnergy       decimal.Decimal `db:"staked_energy" json:"staked_energy"`
	DelegatedEnergy    decimal.Decimal `db:"delegated_energy" json:"delegated_energy"`
	DelegatedBandwidth decimal.Decimal `db:"delegated_bandwidth" json:"delegated_bandwidth"`
	AvailableEnergy    decimal.Decimal `db:"available_energy" json:"available_energy"`
	AvailableBandwidth decimal.Decimal `db:"available_bandwidth" json:"available_bandwidth"`
}

func (q *Queries) InsertTronWalletBalanceStatisticsBatch(ctx context.Context, arg []InsertTronWalletBalanceStatisticsBatchParams) *InsertTronWalletBalanceStatisticsBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ProcessingOwnerID,
			a.Address,
			a.StakedBandwidth,
			a.StakedEnergy,
			a.DelegatedEnergy,
			a.DelegatedBandwidth,
			a.AvailableEnergy,
			a.AvailableBandwidth,
		}
		batch.Queue(insertTronWalletBalanceStatisticsBatch, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InsertTronWalletBalanceStatisticsBatchBatchResults{br, len(arg), false}
}

func (b *InsertTronWalletBalanceStatisticsBatchBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *InsertTronWalletBalanceStatisticsBatchBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
