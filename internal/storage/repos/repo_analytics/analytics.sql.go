// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analytics.sql

package repo_analytics

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/shopspring/decimal"
)

const getTransactionStatsByType = `-- name: GetTransactionStatsByType :many
SELECT
    tr.type as transaction_type,
    tr.currency_id as currency_id,
    c.code as currency_code,
       COUNT(tr.id) as total_count,
       COALESCE(SUM(tr.amount), 0)::numeric as total_amount
FROM
    transactions tr
        JOIN currencies c ON tr.currency_id = c.id
WHERE
    tr.type IN ('transfer', 'deposit')
GROUP BY
    tr.type, tr.currency_id, c.code
ORDER BY
    tr.type
`

type GetTransactionStatsByTypeRow struct {
	TransactionType models.TransactionsType `db:"transaction_type" json:"transaction_type"`
	CurrencyID      string                  `db:"currency_id" json:"currency_id"`
	CurrencyCode    string                  `db:"currency_code" json:"currency_code"`
	TotalCount      int64                   `db:"total_count" json:"total_count"`
	TotalAmount     decimal.Decimal         `db:"total_amount" json:"total_amount"`
}

func (q *Queries) GetTransactionStatsByType(ctx context.Context) ([]*GetTransactionStatsByTypeRow, error) {
	rows, err := q.db.Query(ctx, getTransactionStatsByType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTransactionStatsByTypeRow{}
	for rows.Next() {
		var i GetTransactionStatsByTypeRow
		if err := rows.Scan(
			&i.TransactionType,
			&i.CurrencyID,
			&i.CurrencyCode,
			&i.TotalCount,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
