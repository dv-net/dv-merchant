// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_settings

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const updateSettingsWithReplace = `-- name: UpdateSettingsWithReplace :batchexec
INSERT INTO settings (name, value, model_id, model_type, created_at, updated_at)
VALUES ($1, $2, $3, $4, now(), now())
ON CONFLICT (name, model_id, model_type) DO UPDATE
    SET value      = $2,
        updated_at = now()
`

type UpdateSettingsWithReplaceBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateSettingsWithReplaceParams struct {
	Name      string        `db:"name" json:"name"`
	Value     string        `db:"value" json:"value"`
	ModelID   uuid.NullUUID `db:"model_id" json:"model_id"`
	ModelType *string       `db:"model_type" json:"model_type"`
}

func (q *Queries) UpdateSettingsWithReplace(ctx context.Context, arg []UpdateSettingsWithReplaceParams) *UpdateSettingsWithReplaceBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Name,
			a.Value,
			a.ModelID,
			a.ModelType,
		}
		batch.Queue(updateSettingsWithReplace, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateSettingsWithReplaceBatchResults{br, len(arg), false}
}

func (b *UpdateSettingsWithReplaceBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateSettingsWithReplaceBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
