// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_currencies.sql

package repo_store_currencies

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const createOne = `-- name: CreateOne :exec
INSERT INTO store_currencies (currency_id, store_id)
VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type CreateOneParams struct {
	CurrencyID string    `db:"currency_id" json:"currency_id"`
	StoreID    uuid.UUID `db:"store_id" json:"store_id"`
}

func (q *Queries) CreateOne(ctx context.Context, arg CreateOneParams) error {
	_, err := q.db.Exec(ctx, createOne, arg.CurrencyID, arg.StoreID)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM store_currencies WHERE store_id=$1 and currency_id=$2
`

type DeleteParams struct {
	StoreID    uuid.UUID `db:"store_id" json:"store_id"`
	CurrencyID string    `db:"currency_id" json:"currency_id"`
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.StoreID, arg.CurrencyID)
	return err
}

const findAllByStoreID = `-- name: FindAllByStoreID :many
SELECT currency_id, store_id FROM store_currencies
WHERE store_id=$1
`

func (q *Queries) FindAllByStoreID(ctx context.Context, storeID uuid.UUID) ([]*models.StoreCurrency, error) {
	rows, err := q.db.Query(ctx, findAllByStoreID, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.StoreCurrency{}
	for rows.Next() {
		var i models.StoreCurrency
		if err := rows.Scan(&i.CurrencyID, &i.StoreID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByStoreID = `-- name: FindByStoreID :one
SELECT currency_id, store_id FROM store_currencies
WHERE store_id=$1 and currency_id=$2
`

type FindByStoreIDParams struct {
	StoreID    uuid.UUID `db:"store_id" json:"store_id"`
	CurrencyID string    `db:"currency_id" json:"currency_id"`
}

func (q *Queries) FindByStoreID(ctx context.Context, arg FindByStoreIDParams) (*models.StoreCurrency, error) {
	row := q.db.QueryRow(ctx, findByStoreID, arg.StoreID, arg.CurrencyID)
	var i models.StoreCurrency
	err := row.Scan(&i.CurrencyID, &i.StoreID)
	return &i, err
}

const getAllByStoreID = `-- name: GetAllByStoreID :many
SELECT id, code, name, precision, is_fiat, blockchain, contract_address, withdrawal_min_balance, has_balance, status, sort_order, min_confirmation, created_at, updated_at, is_stablecoin, currency_label, token_label FROM currencies
WHERE id IN (
    SELECT currency_id FROM store_currencies
    WHERE store_id = $1
)
`

func (q *Queries) GetAllByStoreID(ctx context.Context, storeID uuid.UUID) ([]*models.Currency, error) {
	rows, err := q.db.Query(ctx, getAllByStoreID, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Currency{}
	for rows.Next() {
		var i models.Currency
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Precision,
			&i.IsFiat,
			&i.Blockchain,
			&i.ContractAddress,
			&i.WithdrawalMinBalance,
			&i.HasBalance,
			&i.Status,
			&i.SortOrder,
			&i.MinConfirmation,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsStablecoin,
			&i.CurrencyLabel,
			&i.TokenLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
