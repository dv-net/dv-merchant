// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_address_book.sql

package repo_user_address_book

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkExists = `-- name: CheckExists :one
SELECT EXISTS(
    SELECT 1 FROM user_address_book 
    WHERE user_id = $1 AND address = $2 AND currency_id = $3 AND type = $4
) AS exists
`

type CheckExistsParams struct {
	UserID     uuid.UUID              `db:"user_id" json:"user_id"`
	Address    string                 `db:"address" json:"address"`
	CurrencyID string                 `db:"currency_id" json:"currency_id"`
	Type       models.AddressBookType `db:"type" json:"type"`
}

func (q *Queries) CheckExists(ctx context.Context, arg CheckExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExists,
		arg.UserID,
		arg.Address,
		arg.CurrencyID,
		arg.Type,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkExistsWithTrashed = `-- name: CheckExistsWithTrashed :one
SELECT EXISTS(
    SELECT 1 FROM user_address_book 
    WHERE user_id = $1 AND address = $2 AND currency_id = $3
) AS exists
`

type CheckExistsWithTrashedParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	Address    string    `db:"address" json:"address"`
	CurrencyID string    `db:"currency_id" json:"currency_id"`
}

func (q *Queries) CheckExistsWithTrashed(ctx context.Context, arg CheckExistsWithTrashedParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkExistsWithTrashed, arg.UserID, arg.Address, arg.CurrencyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const create = `-- name: Create :one
INSERT INTO user_address_book (user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at
`

type CreateParams struct {
	UserID     uuid.UUID              `db:"user_id" json:"user_id"`
	Address    string                 `db:"address" json:"address"`
	CurrencyID string                 `db:"currency_id" json:"currency_id"`
	Name       pgtype.Text            `db:"name" json:"name"`
	Tag        pgtype.Text            `db:"tag" json:"tag"`
	Blockchain *models.Blockchain     `db:"blockchain" json:"blockchain"`
	Type       models.AddressBookType `db:"type" json:"type"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.Address,
		arg.CurrencyID,
		arg.Name,
		arg.Tag,
		arg.Blockchain,
		arg.Type,
	)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM user_address_book 
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getByID = `-- name: GetByID :one
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getByUserAddressAndBlockchain = `-- name: GetByUserAddressAndBlockchain :many
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND address = $2 AND blockchain = $3 AND type = $4 AND deleted_at IS NULL
`

type GetByUserAddressAndBlockchainParams struct {
	UserID     uuid.UUID              `db:"user_id" json:"user_id"`
	Address    string                 `db:"address" json:"address"`
	Blockchain *models.Blockchain     `db:"blockchain" json:"blockchain"`
	Type       models.AddressBookType `db:"type" json:"type"`
}

func (q *Queries) GetByUserAddressAndBlockchain(ctx context.Context, arg GetByUserAddressAndBlockchainParams) ([]*models.UserAddressBook, error) {
	rows, err := q.db.Query(ctx, getByUserAddressAndBlockchain,
		arg.UserID,
		arg.Address,
		arg.Blockchain,
		arg.Type,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserAddressBook{}
	for rows.Next() {
		var i models.UserAddressBook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.CurrencyID,
			&i.Name,
			&i.Tag,
			&i.Blockchain,
			&i.Type,
			&i.SubmittedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByUserAndAddress = `-- name: GetByUserAndAddress :one
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND address = $2 AND currency_id = $3 AND type = $4
`

type GetByUserAndAddressParams struct {
	UserID     uuid.UUID              `db:"user_id" json:"user_id"`
	Address    string                 `db:"address" json:"address"`
	CurrencyID string                 `db:"currency_id" json:"currency_id"`
	Type       models.AddressBookType `db:"type" json:"type"`
}

func (q *Queries) GetByUserAndAddress(ctx context.Context, arg GetByUserAndAddressParams) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, getByUserAndAddress,
		arg.UserID,
		arg.Address,
		arg.CurrencyID,
		arg.Type,
	)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getByUserAndAddressAllCurrencies = `-- name: GetByUserAndAddressAllCurrencies :many
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND address = $2 AND type = $3 AND deleted_at IS NULL
`

type GetByUserAndAddressAllCurrenciesParams struct {
	UserID  uuid.UUID              `db:"user_id" json:"user_id"`
	Address string                 `db:"address" json:"address"`
	Type    models.AddressBookType `db:"type" json:"type"`
}

func (q *Queries) GetByUserAndAddressAllCurrencies(ctx context.Context, arg GetByUserAndAddressAllCurrenciesParams) ([]*models.UserAddressBook, error) {
	rows, err := q.db.Query(ctx, getByUserAndAddressAllCurrencies, arg.UserID, arg.Address, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserAddressBook{}
	for rows.Next() {
		var i models.UserAddressBook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.CurrencyID,
			&i.Name,
			&i.Tag,
			&i.Blockchain,
			&i.Type,
			&i.SubmittedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByUserAndBlockchain = `-- name: GetByUserAndBlockchain :many
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND blockchain = $2 AND deleted_at IS NULL
ORDER BY submitted_at DESC
`

type GetByUserAndBlockchainParams struct {
	UserID     uuid.UUID          `db:"user_id" json:"user_id"`
	Blockchain *models.Blockchain `db:"blockchain" json:"blockchain"`
}

func (q *Queries) GetByUserAndBlockchain(ctx context.Context, arg GetByUserAndBlockchainParams) ([]*models.UserAddressBook, error) {
	rows, err := q.db.Query(ctx, getByUserAndBlockchain, arg.UserID, arg.Blockchain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserAddressBook{}
	for rows.Next() {
		var i models.UserAddressBook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.CurrencyID,
			&i.Name,
			&i.Tag,
			&i.Blockchain,
			&i.Type,
			&i.SubmittedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByUserAndCurrency = `-- name: GetByUserAndCurrency :many
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND currency_id = $2 AND deleted_at IS NULL
ORDER BY submitted_at DESC
`

type GetByUserAndCurrencyParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	CurrencyID string    `db:"currency_id" json:"currency_id"`
}

func (q *Queries) GetByUserAndCurrency(ctx context.Context, arg GetByUserAndCurrencyParams) ([]*models.UserAddressBook, error) {
	rows, err := q.db.Query(ctx, getByUserAndCurrency, arg.UserID, arg.CurrencyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserAddressBook{}
	for rows.Next() {
		var i models.UserAddressBook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.CurrencyID,
			&i.Name,
			&i.Tag,
			&i.Blockchain,
			&i.Type,
			&i.SubmittedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByUserID = `-- name: GetByUserID :many
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND deleted_at IS NULL
ORDER BY submitted_at DESC
`

func (q *Queries) GetByUserID(ctx context.Context, userID uuid.UUID) ([]*models.UserAddressBook, error) {
	rows, err := q.db.Query(ctx, getByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserAddressBook{}
	for rows.Next() {
		var i models.UserAddressBook
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.CurrencyID,
			&i.Name,
			&i.Tag,
			&i.Blockchain,
			&i.Type,
			&i.SubmittedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrashedEntry = `-- name: GetTrashedEntry :one
SELECT id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at FROM user_address_book 
WHERE user_id = $1 AND address = $2 AND currency_id = $3 AND deleted_at IS NOT NULL
`

type GetTrashedEntryParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	Address    string    `db:"address" json:"address"`
	CurrencyID string    `db:"currency_id" json:"currency_id"`
}

func (q *Queries) GetTrashedEntry(ctx context.Context, arg GetTrashedEntryParams) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, getTrashedEntry, arg.UserID, arg.Address, arg.CurrencyID)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const restoreFromTrash = `-- name: RestoreFromTrash :one
UPDATE user_address_book 
SET deleted_at = NULL, name = $5, tag = $6, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1 AND address = $2 AND currency_id = $3 AND type = $4 AND deleted_at IS NOT NULL
RETURNING id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at
`

type RestoreFromTrashParams struct {
	UserID     uuid.UUID              `db:"user_id" json:"user_id"`
	Address    string                 `db:"address" json:"address"`
	CurrencyID string                 `db:"currency_id" json:"currency_id"`
	Type       models.AddressBookType `db:"type" json:"type"`
	Name       pgtype.Text            `db:"name" json:"name"`
	Tag        pgtype.Text            `db:"tag" json:"tag"`
}

func (q *Queries) RestoreFromTrash(ctx context.Context, arg RestoreFromTrashParams) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, restoreFromTrash,
		arg.UserID,
		arg.Address,
		arg.CurrencyID,
		arg.Type,
		arg.Name,
		arg.Tag,
	)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const softDelete = `-- name: SoftDelete :exec
UPDATE user_address_book 
SET deleted_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) SoftDelete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDelete, id)
	return err
}

const update = `-- name: Update :one
UPDATE user_address_book 
SET name = $2, tag = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, user_id, address, currency_id, name, tag, blockchain, type, submitted_at, created_at, updated_at, deleted_at
`

type UpdateParams struct {
	ID   uuid.UUID   `db:"id" json:"id"`
	Name pgtype.Text `db:"name" json:"name"`
	Tag  pgtype.Text `db:"tag" json:"tag"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.UserAddressBook, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Name, arg.Tag)
	var i models.UserAddressBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.CurrencyID,
		&i.Name,
		&i.Tag,
		&i.Blockchain,
		&i.Type,
		&i.SubmittedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
