// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_withdrawal_history_gen.sql

package repo_exchange_withdrawal_history

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO exchange_withdrawal_history (user_id, exchange_id, exchange_order_id, address, native_amount, fiat_amount, currency, chain, status, created_at, fail_reason, exchange_connection_hash)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, now(), $10, $11)
	RETURNING id, user_id, exchange_id, exchange_order_id, address, native_amount, fiat_amount, currency, chain, status, txid, created_at, updated_at, fail_reason, exchange_connection_hash
`

type CreateParams struct {
	UserID                 uuid.UUID                      `db:"user_id" json:"user_id"`
	ExchangeID             uuid.UUID                      `db:"exchange_id" json:"exchange_id"`
	ExchangeOrderID        pgtype.Text                    `db:"exchange_order_id" json:"exchange_order_id"`
	Address                string                         `db:"address" json:"address"`
	NativeAmount           decimal.NullDecimal            `db:"native_amount" json:"native_amount"`
	FiatAmount             decimal.NullDecimal            `db:"fiat_amount" json:"fiat_amount"`
	Currency               string                         `db:"currency" json:"currency"`
	Chain                  string                         `db:"chain" json:"chain"`
	Status                 models.WithdrawalHistoryStatus `db:"status" json:"status"`
	FailReason             pgtype.Text                    `db:"fail_reason" json:"fail_reason"`
	ExchangeConnectionHash pgtype.Text                    `db:"exchange_connection_hash" json:"exchange_connection_hash"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.ExchangeWithdrawalHistory, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.ExchangeID,
		arg.ExchangeOrderID,
		arg.Address,
		arg.NativeAmount,
		arg.FiatAmount,
		arg.Currency,
		arg.Chain,
		arg.Status,
		arg.FailReason,
		arg.ExchangeConnectionHash,
	)
	var i models.ExchangeWithdrawalHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExchangeID,
		&i.ExchangeOrderID,
		&i.Address,
		&i.NativeAmount,
		&i.FiatAmount,
		&i.Currency,
		&i.Chain,
		&i.Status,
		&i.Txid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FailReason,
		&i.ExchangeConnectionHash,
	)
	return &i, err
}
