// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: update_balance_queue.sql

package repo_update_balance_queue

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"
)

const getQueuedWithCurrency = `-- name: GetQueuedWithCurrency :many
SELECT ubq.id, ubq.currency_id, ubq.address, ubq.native_token_balance_update, ubq.created_at, ubq.updated_at, c.id, c.code, c.name, c.precision, c.is_fiat, c.blockchain, c.contract_address, c.withdrawal_min_balance, c.has_balance, c.status, c.sort_order, c.min_confirmation, c.created_at, c.updated_at, c.is_stablecoin, c.currency_label, c.token_label
FROM update_balance_queue ubq
         INNER JOIN currencies c ON ubq.currency_id = c.id
ORDER BY ubq.created_at
`

type GetQueuedWithCurrencyRow struct {
	UpdateBalanceQueue models.UpdateBalanceQueue `db:"update_balance_queue" json:"update_balance_queue"`
	Currency           models.Currency           `db:"currency" json:"currency"`
}

func (q *Queries) GetQueuedWithCurrency(ctx context.Context) ([]*GetQueuedWithCurrencyRow, error) {
	rows, err := q.db.Query(ctx, getQueuedWithCurrency)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetQueuedWithCurrencyRow{}
	for rows.Next() {
		var i GetQueuedWithCurrencyRow
		if err := rows.Scan(
			&i.UpdateBalanceQueue.ID,
			&i.UpdateBalanceQueue.CurrencyID,
			&i.UpdateBalanceQueue.Address,
			&i.UpdateBalanceQueue.NativeTokenBalanceUpdate,
			&i.UpdateBalanceQueue.CreatedAt,
			&i.UpdateBalanceQueue.UpdatedAt,
			&i.Currency.ID,
			&i.Currency.Code,
			&i.Currency.Name,
			&i.Currency.Precision,
			&i.Currency.IsFiat,
			&i.Currency.Blockchain,
			&i.Currency.ContractAddress,
			&i.Currency.WithdrawalMinBalance,
			&i.Currency.HasBalance,
			&i.Currency.Status,
			&i.Currency.SortOrder,
			&i.Currency.MinConfirmation,
			&i.Currency.CreatedAt,
			&i.Currency.UpdatedAt,
			&i.Currency.IsStablecoin,
			&i.Currency.CurrencyLabel,
			&i.Currency.TokenLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
