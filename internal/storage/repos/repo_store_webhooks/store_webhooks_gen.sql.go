// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_webhooks_gen.sql

package repo_store_webhooks

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO store_webhooks (store_id, url, enabled, events, created_at)
	VALUES ($1, $2, $3, $4, now())
	RETURNING id, store_id, url, enabled, events, created_at, updated_at
`

type CreateParams struct {
	StoreID uuid.UUID              `db:"store_id" json:"store_id"`
	Url     string                 `db:"url" json:"url"`
	Enabled bool                   `db:"enabled" json:"enabled"`
	Events  []*models.WebhookEvent `db:"events" json:"events"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.StoreWebhook, error) {
	row := q.db.QueryRow(ctx, create,
		arg.StoreID,
		arg.Url,
		arg.Enabled,
		arg.Events,
	)
	var i models.StoreWebhook
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Url,
		&i.Enabled,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM store_webhooks WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getById = `-- name: GetById :one
SELECT id, store_id, url, enabled, events, created_at, updated_at FROM store_webhooks WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.StoreWebhook, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.StoreWebhook
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Url,
		&i.Enabled,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE store_webhooks
	SET url=$1, enabled=$2, events=$3, updated_at=$4
	WHERE id=$5
	RETURNING id, store_id, url, enabled, events, created_at, updated_at
`

type UpdateParams struct {
	Url       string                 `db:"url" json:"url"`
	Enabled   bool                   `db:"enabled" json:"enabled"`
	Events    []*models.WebhookEvent `db:"events" json:"events"`
	UpdatedAt pgtype.Timestamp       `db:"updated_at" json:"updated_at"`
	ID        uuid.UUID              `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.StoreWebhook, error) {
	row := q.db.QueryRow(ctx, update,
		arg.Url,
		arg.Enabled,
		arg.Events,
		arg.UpdatedAt,
		arg.ID,
	)
	var i models.StoreWebhook
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Url,
		&i.Enabled,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
