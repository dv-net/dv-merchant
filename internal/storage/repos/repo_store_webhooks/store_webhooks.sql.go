// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_webhooks.sql

package repo_store_webhooks

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const disableAllByStore = `-- name: DisableAllByStore :exec
UPDATE store_webhooks SET enabled = false, updated_at = now() WHERE store_id = $1
`

func (q *Queries) DisableAllByStore(ctx context.Context, storeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, disableAllByStore, storeID)
	return err
}

const enableAllByStore = `-- name: EnableAllByStore :exec
UPDATE store_webhooks SET enabled = true, updated_at = now() WHERE store_id = $1
`

func (q *Queries) EnableAllByStore(ctx context.Context, storeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, enableAllByStore, storeID)
	return err
}

const getByStoreAndType = `-- name: GetByStoreAndType :many
SELECT sw.id, sw.store_id, sw.url, sw.enabled, sw.events, sw.created_at, sw.updated_at, ss.secret
FROM store_webhooks sw
LEFT JOIN store_secrets ss on ss.store_id = $1
WHERE sw.store_id = $1
  and $2::varchar in (select json_array_elements_text(sw.events))
  and sw.enabled = true
ORDER BY sw.created_at
`

type GetByStoreAndTypeParams struct {
	StoreID   uuid.UUID `db:"store_id" json:"store_id"`
	EventType string    `db:"event_type" json:"event_type"`
}

type GetByStoreAndTypeRow struct {
	StoreWebhook models.StoreWebhook `db:"store_webhook" json:"store_webhook"`
	Secret       pgtype.Text         `db:"secret" json:"secret"`
}

func (q *Queries) GetByStoreAndType(ctx context.Context, arg GetByStoreAndTypeParams) ([]*GetByStoreAndTypeRow, error) {
	rows, err := q.db.Query(ctx, getByStoreAndType, arg.StoreID, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetByStoreAndTypeRow{}
	for rows.Next() {
		var i GetByStoreAndTypeRow
		if err := rows.Scan(
			&i.StoreWebhook.ID,
			&i.StoreWebhook.StoreID,
			&i.StoreWebhook.Url,
			&i.StoreWebhook.Enabled,
			&i.StoreWebhook.Events,
			&i.StoreWebhook.CreatedAt,
			&i.StoreWebhook.UpdatedAt,
			&i.Secret,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByStoreId = `-- name: GetByStoreId :many
SELECT id, store_id, url, enabled, events, created_at, updated_at FROM store_webhooks WHERE store_id=$1 ORDER BY created_at
`

func (q *Queries) GetByStoreId(ctx context.Context, storeID uuid.UUID) ([]*models.StoreWebhook, error) {
	rows, err := q.db.Query(ctx, getByStoreId, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.StoreWebhook{}
	for rows.Next() {
		var i models.StoreWebhook
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.Url,
			&i.Enabled,
			&i.Events,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
