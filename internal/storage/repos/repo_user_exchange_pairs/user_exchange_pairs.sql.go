// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_exchange_pairs.sql

package repo_user_exchange_pairs

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const delete = `-- name: Delete :exec
DELETE FROM user_exchange_pairs WHERE exchange_id=$1 AND user_id=$2
`

type DeleteParams struct {
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) error {
	_, err := q.db.Exec(ctx, delete, arg.ExchangeID, arg.UserID)
	return err
}

const deleteByUserAndExchangeID = `-- name: DeleteByUserAndExchangeID :exec
DELETE FROM user_exchange_pairs WHERE user_id = $1 AND exchange_id = $2
`

type DeleteByUserAndExchangeIDParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
}

func (q *Queries) DeleteByUserAndExchangeID(ctx context.Context, arg DeleteByUserAndExchangeIDParams) error {
	_, err := q.db.Exec(ctx, deleteByUserAndExchangeID, arg.UserID, arg.ExchangeID)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, exchange_id, user_id, currency_from, currency_to, symbol, type FROM user_exchange_pairs
`

func (q *Queries) GetAll(ctx context.Context) ([]*models.UserExchangePair, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.UserExchangePair{}
	for rows.Next() {
		var i models.UserExchangePair
		if err := rows.Scan(
			&i.ID,
			&i.ExchangeID,
			&i.UserID,
			&i.CurrencyFrom,
			&i.CurrencyTo,
			&i.Symbol,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
