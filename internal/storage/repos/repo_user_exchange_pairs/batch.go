// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_user_exchange_pairs

import (
	"context"
	"errors"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const updatePairs = `-- name: UpdatePairs :batchexec
INSERT INTO user_exchange_pairs (exchange_id, user_id, currency_from, currency_to, symbol, type)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT DO NOTHING
`

type UpdatePairsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdatePairsParams struct {
	ExchangeID   uuid.UUID        `db:"exchange_id" json:"exchange_id"`
	UserID       uuid.UUID        `db:"user_id" json:"user_id"`
	CurrencyFrom string           `db:"currency_from" json:"currency_from"`
	CurrencyTo   string           `db:"currency_to" json:"currency_to"`
	Symbol       string           `db:"symbol" json:"symbol"`
	Type         models.OrderSide `db:"type" json:"type"`
}

func (q *Queries) UpdatePairs(ctx context.Context, arg []UpdatePairsParams) *UpdatePairsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ExchangeID,
			a.UserID,
			a.CurrencyFrom,
			a.CurrencyTo,
			a.Symbol,
			a.Type,
		}
		batch.Queue(updatePairs, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdatePairsBatchResults{br, len(arg), false}
}

func (b *UpdatePairsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdatePairsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
