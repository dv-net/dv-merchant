// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: withdrawal_wallets_gen.sql

package repo_withdrawal_wallets

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO withdrawal_wallets (user_id, blockchain, currency_id, withdrawal_min_balance, withdrawal_interval, created_at, withdrawal_enabled, withdrawal_min_balance_usd)
	VALUES ($1, $2, $3, $4, $5, now(), $6, $7)
	RETURNING id, user_id, blockchain, currency_id, withdrawal_min_balance, withdrawal_interval, created_at, deleted_at, updated_at, withdrawal_enabled, withdrawal_min_balance_usd
`

type CreateParams struct {
	UserID                  uuid.UUID           `db:"user_id" json:"user_id"`
	Blockchain              models.Blockchain   `db:"blockchain" json:"blockchain"`
	CurrencyID              string              `db:"currency_id" json:"currency_id"`
	WithdrawalMinBalance    decimal.NullDecimal `db:"withdrawal_min_balance" json:"withdrawal_min_balance"`
	WithdrawalInterval      string              `db:"withdrawal_interval" json:"withdrawal_interval"`
	WithdrawalEnabled       string              `db:"withdrawal_enabled" json:"withdrawal_enabled"`
	WithdrawalMinBalanceUsd decimal.NullDecimal `db:"withdrawal_min_balance_usd" json:"withdrawal_min_balance_usd"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.WithdrawalWallet, error) {
	row := q.db.QueryRow(ctx, create,
		arg.UserID,
		arg.Blockchain,
		arg.CurrencyID,
		arg.WithdrawalMinBalance,
		arg.WithdrawalInterval,
		arg.WithdrawalEnabled,
		arg.WithdrawalMinBalanceUsd,
	)
	var i models.WithdrawalWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Blockchain,
		&i.CurrencyID,
		&i.WithdrawalMinBalance,
		&i.WithdrawalInterval,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.WithdrawalEnabled,
		&i.WithdrawalMinBalanceUsd,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, user_id, blockchain, currency_id, withdrawal_min_balance, withdrawal_interval, created_at, deleted_at, updated_at, withdrawal_enabled, withdrawal_min_balance_usd FROM withdrawal_wallets WHERE deleted_at IS NULL AND id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.WithdrawalWallet, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.WithdrawalWallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Blockchain,
		&i.CurrencyID,
		&i.WithdrawalMinBalance,
		&i.WithdrawalInterval,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.WithdrawalEnabled,
		&i.WithdrawalMinBalanceUsd,
	)
	return &i, err
}
