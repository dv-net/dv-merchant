// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallet_addresses_gen.sql

package repo_wallet_addresses

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO wallet_addresses (wallet_id, user_id, currency_id, blockchain, address, created_at, dirty)
	VALUES ($1, $2, $3, $4, $5, now(), $6)
	RETURNING id, wallet_id, user_id, currency_id, blockchain, address, amount, created_at, updated_at, deleted_at, dirty
`

type CreateParams struct {
	WalletID   uuid.UUID         `db:"wallet_id" json:"wallet_id"`
	UserID     uuid.UUID         `db:"user_id" json:"user_id"`
	CurrencyID string            `db:"currency_id" json:"currency_id"`
	Blockchain models.Blockchain `db:"blockchain" json:"blockchain"`
	Address    string            `db:"address" json:"address"`
	Dirty      bool              `db:"dirty" json:"dirty"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.WalletAddress, error) {
	row := q.db.QueryRow(ctx, create,
		arg.WalletID,
		arg.UserID,
		arg.CurrencyID,
		arg.Blockchain,
		arg.Address,
		arg.Dirty,
	)
	var i models.WalletAddress
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.UserID,
		&i.CurrencyID,
		&i.Blockchain,
		&i.Address,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Dirty,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, wallet_id, user_id, currency_id, blockchain, address, amount, created_at, updated_at, deleted_at, dirty FROM wallet_addresses WHERE deleted_at IS NULL AND id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.WalletAddress, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.WalletAddress
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.UserID,
		&i.CurrencyID,
		&i.Blockchain,
		&i.Address,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Dirty,
	)
	return &i, err
}
