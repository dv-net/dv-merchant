// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchanges_gen.sql

package repo_exchanges

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO exchanges (slug, name, is_active, url, created_at)
	VALUES ($1, $2, $3, $4, now())
	RETURNING id, slug, name, is_active, url, created_at, updated_at
`

type CreateParams struct {
	Slug     models.ExchangeSlug `db:"slug" json:"slug"`
	Name     string              `db:"name" json:"name"`
	IsActive bool                `db:"is_active" json:"is_active"`
	Url      string              `db:"url" json:"url"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Exchange, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Slug,
		arg.Name,
		arg.IsActive,
		arg.Url,
	)
	var i models.Exchange
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.IsActive,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAll = `-- name: GetAll :many
SELECT id, slug, name, is_active, url, created_at, updated_at FROM exchanges
`

func (q *Queries) GetAll(ctx context.Context) ([]*models.Exchange, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Exchange{}
	for rows.Next() {
		var i models.Exchange
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.IsActive,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, slug, name, is_active, url, created_at, updated_at FROM exchanges WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Exchange, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Exchange
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.IsActive,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
