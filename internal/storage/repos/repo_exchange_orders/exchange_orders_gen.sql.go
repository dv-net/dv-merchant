// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_orders_gen.sql

package repo_exchange_orders

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO exchange_orders (exchange_id, exchange_order_id, client_order_id, symbol, side, amount, order_created_at, created_at, fail_reason, status, user_id, amount_usd, exchange_connection_hash)
	VALUES ($1, $2, $3, $4, $5, $6, $7, now(), $8, $9, $10, $11, $12)
	RETURNING id, exchange_id, exchange_order_id, client_order_id, symbol, side, amount, order_created_at, created_at, updated_at, fail_reason, status, user_id, amount_usd, exchange_connection_hash
`

type CreateParams struct {
	ExchangeID             uuid.UUID                  `db:"exchange_id" json:"exchange_id"`
	ExchangeOrderID        pgtype.Text                `db:"exchange_order_id" json:"exchange_order_id"`
	ClientOrderID          pgtype.Text                `db:"client_order_id" json:"client_order_id"`
	Symbol                 string                     `db:"symbol" json:"symbol"`
	Side                   models.OrderSide           `db:"side" json:"side"`
	Amount                 decimal.Decimal            `db:"amount" json:"amount"`
	OrderCreatedAt         pgtype.Timestamp           `db:"order_created_at" json:"order_created_at"`
	FailReason             pgtype.Text                `db:"fail_reason" json:"fail_reason"`
	Status                 models.ExchangeOrderStatus `db:"status" json:"status"`
	UserID                 uuid.UUID                  `db:"user_id" json:"user_id"`
	AmountUsd              decimal.NullDecimal        `db:"amount_usd" json:"amount_usd"`
	ExchangeConnectionHash pgtype.Text                `db:"exchange_connection_hash" json:"exchange_connection_hash"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.ExchangeOrder, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ExchangeID,
		arg.ExchangeOrderID,
		arg.ClientOrderID,
		arg.Symbol,
		arg.Side,
		arg.Amount,
		arg.OrderCreatedAt,
		arg.FailReason,
		arg.Status,
		arg.UserID,
		arg.AmountUsd,
		arg.ExchangeConnectionHash,
	)
	var i models.ExchangeOrder
	err := row.Scan(
		&i.ID,
		&i.ExchangeID,
		&i.ExchangeOrderID,
		&i.ClientOrderID,
		&i.Symbol,
		&i.Side,
		&i.Amount,
		&i.OrderCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FailReason,
		&i.Status,
		&i.UserID,
		&i.AmountUsd,
		&i.ExchangeConnectionHash,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, exchange_id, exchange_order_id, client_order_id, symbol, side, amount, order_created_at, created_at, updated_at, fail_reason, status, user_id, amount_usd, exchange_connection_hash FROM exchange_orders WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.ExchangeOrder, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.ExchangeOrder
	err := row.Scan(
		&i.ID,
		&i.ExchangeID,
		&i.ExchangeOrderID,
		&i.ClientOrderID,
		&i.Symbol,
		&i.Side,
		&i.Amount,
		&i.OrderCreatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FailReason,
		&i.Status,
		&i.UserID,
		&i.AmountUsd,
		&i.ExchangeConnectionHash,
	)
	return &i, err
}
