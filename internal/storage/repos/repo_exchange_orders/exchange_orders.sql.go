// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_orders.sql

package repo_exchange_orders

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

const update = `-- name: Update :exec
UPDATE exchange_orders
SET updated_at        = now(),
    status            = COALESCE($1::varchar, status),
    fail_reason       = COALESCE($2, fail_reason),
    amount            = COALESCE($3, amount),
    amount_usd        = COALESCE($4, amount_usd),
    exchange_order_id = COALESCE($5, exchange_order_id),
    client_order_id   = COALESCE($6, client_order_id),
    exchange_connection_hash = COALESCE($7, exchange_connection_hash)
WHERE id = $8
`

type UpdateParams struct {
	Status                 pgtype.Text         `db:"status" json:"status"`
	FailReason             pgtype.Text         `db:"fail_reason" json:"fail_reason"`
	Amount                 decimal.NullDecimal `db:"amount" json:"amount"`
	AmountUsd              decimal.NullDecimal `db:"amount_usd" json:"amount_usd"`
	ExchangeOrderID        pgtype.Text         `db:"exchange_order_id" json:"exchange_order_id"`
	ClientOrderID          pgtype.Text         `db:"client_order_id" json:"client_order_id"`
	ExchangeConnectionHash pgtype.Text         `db:"exchange_connection_hash" json:"exchange_connection_hash"`
	ID                     uuid.UUID           `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Status,
		arg.FailReason,
		arg.Amount,
		arg.AmountUsd,
		arg.ExchangeOrderID,
		arg.ClientOrderID,
		arg.ExchangeConnectionHash,
		arg.ID,
	)
	return err
}
