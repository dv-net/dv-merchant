// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_transfer_transactions

import (
	"context"
	"errors"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchCreate = `-- name: BatchCreate :batchexec
INSERT INTO transfer_transactions (transfer_id, tx_hash, bandwidth_amount, energy_amount, native_token_amount,
                                   native_token_fee, tx_type, status, step, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, now(), now())
ON CONFLICT (transfer_id, tx_type, tx_hash) DO UPDATE SET bandwidth_amount    = $3,
                                                          energy_amount       = $4,
                                                          native_token_amount = $5,
                                                          native_token_fee    = $6,
                                                          status              = $8,
                                                          step                = $9,
                                                          updated_at          = now()
`

type BatchCreateBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchCreateParams struct {
	TransferID        uuid.UUID                         `db:"transfer_id" json:"transfer_id"`
	TxHash            string                            `db:"tx_hash" json:"tx_hash"`
	BandwidthAmount   decimal.Decimal                   `db:"bandwidth_amount" json:"bandwidth_amount"`
	EnergyAmount      decimal.Decimal                   `db:"energy_amount" json:"energy_amount"`
	NativeTokenAmount decimal.Decimal                   `db:"native_token_amount" json:"native_token_amount"`
	NativeTokenFee    decimal.Decimal                   `db:"native_token_fee" json:"native_token_fee"`
	TxType            models.TransferTransactionType    `db:"tx_type" json:"tx_type"`
	Status            models.TransferTransactionsStatus `db:"status" json:"status"`
	Step              string                            `db:"step" json:"step"`
}

func (q *Queries) BatchCreate(ctx context.Context, arg []BatchCreateParams) *BatchCreateBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.TransferID,
			a.TxHash,
			a.BandwidthAmount,
			a.EnergyAmount,
			a.NativeTokenAmount,
			a.NativeTokenFee,
			a.TxType,
			a.Status,
			a.Step,
		}
		batch.Queue(batchCreate, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchCreateBatchResults{br, len(arg), false}
}

func (b *BatchCreateBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchCreateBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
