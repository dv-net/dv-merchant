// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: webhook_send_queue_gen.sql

package repo_webhook_send_queue

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO webhook_send_queue (webhook_id, seconds_delay, transaction_id, payload, signature, event, last_sent_at, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, $7, now())
	RETURNING id, webhook_id, seconds_delay, transaction_id, payload, signature, event, last_sent_at, created_at
`

type CreateParams struct {
	WebhookID     uuid.UUID        `db:"webhook_id" json:"webhook_id"`
	SecondsDelay  int16            `db:"seconds_delay" json:"seconds_delay"`
	TransactionID uuid.UUID        `db:"transaction_id" json:"transaction_id"`
	Payload       []byte           `db:"payload" json:"payload"`
	Signature     string           `db:"signature" json:"signature"`
	Event         string           `db:"event" json:"event"`
	LastSentAt    pgtype.Timestamp `db:"last_sent_at" json:"last_sent_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.WebhookSendQueue, error) {
	row := q.db.QueryRow(ctx, create,
		arg.WebhookID,
		arg.SecondsDelay,
		arg.TransactionID,
		arg.Payload,
		arg.Signature,
		arg.Event,
		arg.LastSentAt,
	)
	var i models.WebhookSendQueue
	err := row.Scan(
		&i.ID,
		&i.WebhookID,
		&i.SecondsDelay,
		&i.TransactionID,
		&i.Payload,
		&i.Signature,
		&i.Event,
		&i.LastSentAt,
		&i.CreatedAt,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, webhook_id, seconds_delay, transaction_id, payload, signature, event, last_sent_at, created_at FROM webhook_send_queue WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.WebhookSendQueue, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.WebhookSendQueue
	err := row.Scan(
		&i.ID,
		&i.WebhookID,
		&i.SecondsDelay,
		&i.TransactionID,
		&i.Payload,
		&i.Signature,
		&i.Event,
		&i.LastSentAt,
		&i.CreatedAt,
	)
	return &i, err
}
