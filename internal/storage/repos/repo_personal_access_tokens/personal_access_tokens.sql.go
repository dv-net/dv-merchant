// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: personal_access_tokens.sql

package repo_personal_access_tokens

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const clearAllByUser = `-- name: ClearAllByUser :exec
DELETE FROM personal_access_tokens WHERE (tokenable_type = 'user' and tokenable_id = $1 and name = 'AuthToken' and token != $2)
`

type ClearAllByUserParams struct {
	TokenableID uuid.UUID `db:"tokenable_id" json:"tokenable_id"`
	Token       string    `db:"token" json:"token"`
}

func (q *Queries) ClearAllByUser(ctx context.Context, arg ClearAllByUserParams) error {
	_, err := q.db.Exec(ctx, clearAllByUser, arg.TokenableID, arg.Token)
	return err
}

const getByToken = `-- name: GetByToken :one
SELECT id, tokenable_type, tokenable_id, name, token, last_used_at, expires_at, created_at, updated_at FROM personal_access_tokens WHERE (expires_at > now() OR expires_at IS NULL)  AND token=$1 LIMIT 1
`

func (q *Queries) GetByToken(ctx context.Context, token string) (*models.PersonalAccessToken, error) {
	row := q.db.QueryRow(ctx, getByToken, token)
	var i models.PersonalAccessToken
	err := row.Scan(
		&i.ID,
		&i.TokenableType,
		&i.TokenableID,
		&i.Name,
		&i.Token,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
