// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: log_types_gen.sql

package repo_log_types

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"
)

const create = `-- name: Create :one
INSERT INTO log_types (slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, now())
	RETURNING id, slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at, updated_at
`

type CreateParams struct {
	Slug                  string `db:"slug" json:"slug"`
	Title                 string `db:"title" json:"title"`
	ErrorCount            int32  `db:"error_count" json:"error_count"`
	ErrorCountNotifyLimit int32  `db:"error_count_notify_limit" json:"error_count_notify_limit"`
	StartParams           []byte `db:"start_params" json:"start_params"`
	NotifyParams          []byte `db:"notify_params" json:"notify_params"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.LogType, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Slug,
		arg.Title,
		arg.ErrorCount,
		arg.ErrorCountNotifyLimit,
		arg.StartParams,
		arg.NotifyParams,
	)
	var i models.LogType
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.ErrorCount,
		&i.ErrorCountNotifyLimit,
		&i.StartParams,
		&i.NotifyParams,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at, updated_at FROM log_types WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id int32) (*models.LogType, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.LogType
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.ErrorCount,
		&i.ErrorCountNotifyLimit,
		&i.StartParams,
		&i.NotifyParams,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE log_types
	SET slug=$1, title=$2, error_count=$3, error_count_notify_limit=$4, start_params=$5, notify_params=$6, 
		updated_at=now()
	WHERE id=$7
	RETURNING id, slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at, updated_at
`

type UpdateParams struct {
	Slug                  string `db:"slug" json:"slug"`
	Title                 string `db:"title" json:"title"`
	ErrorCount            int32  `db:"error_count" json:"error_count"`
	ErrorCountNotifyLimit int32  `db:"error_count_notify_limit" json:"error_count_notify_limit"`
	StartParams           []byte `db:"start_params" json:"start_params"`
	NotifyParams          []byte `db:"notify_params" json:"notify_params"`
	ID                    int32  `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.LogType, error) {
	row := q.db.QueryRow(ctx, update,
		arg.Slug,
		arg.Title,
		arg.ErrorCount,
		arg.ErrorCountNotifyLimit,
		arg.StartParams,
		arg.NotifyParams,
		arg.ID,
	)
	var i models.LogType
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.ErrorCount,
		&i.ErrorCountNotifyLimit,
		&i.StartParams,
		&i.NotifyParams,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
