// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: log_types.sql

package repo_log_types

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
)

const getAll = `-- name: GetAll :many
SELECT id, slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at, updated_at FROM log_types
`

func (q *Queries) GetAll(ctx context.Context) ([]*models.LogType, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.LogType{}
	for rows.Next() {
		var i models.LogType
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.ErrorCount,
			&i.ErrorCountNotifyLimit,
			&i.StartParams,
			&i.NotifyParams,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBySlug = `-- name: GetBySlug :one
SELECT id, slug, title, error_count, error_count_notify_limit, start_params, notify_params, created_at, updated_at FROM log_types WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetBySlug(ctx context.Context, slug string) (*models.LogType, error) {
	row := q.db.QueryRow(ctx, getBySlug, slug)
	var i models.LogType
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.ErrorCount,
		&i.ErrorCountNotifyLimit,
		&i.StartParams,
		&i.NotifyParams,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
