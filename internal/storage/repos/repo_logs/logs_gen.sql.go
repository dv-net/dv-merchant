// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: logs_gen.sql

package repo_logs

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO logs (log_type_slug, process_id, level, status, message, created_at)
	VALUES ($1, $2, $3, $4, $5, now())
	RETURNING id, log_type_slug, process_id, level, status, message, created_at
`

type CreateParams struct {
	LogTypeSlug string    `db:"log_type_slug" json:"log_type_slug"`
	ProcessID   uuid.UUID `db:"process_id" json:"process_id"`
	Level       string    `db:"level" json:"level"`
	Status      string    `db:"status" json:"status"`
	Message     string    `db:"message" json:"message"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Log, error) {
	row := q.db.QueryRow(ctx, create,
		arg.LogTypeSlug,
		arg.ProcessID,
		arg.Level,
		arg.Status,
		arg.Message,
	)
	var i models.Log
	err := row.Scan(
		&i.ID,
		&i.LogTypeSlug,
		&i.ProcessID,
		&i.Level,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, log_type_slug, process_id, level, status, message, created_at FROM logs WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Log, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Log
	err := row.Scan(
		&i.ID,
		&i.LogTypeSlug,
		&i.ProcessID,
		&i.Level,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE logs
	SET log_type_slug=$1, process_id=$2, level=$3, status=$4, message=$5
	WHERE id=$6
	RETURNING id, log_type_slug, process_id, level, status, message, created_at
`

type UpdateParams struct {
	LogTypeSlug string    `db:"log_type_slug" json:"log_type_slug"`
	ProcessID   uuid.UUID `db:"process_id" json:"process_id"`
	Level       string    `db:"level" json:"level"`
	Status      string    `db:"status" json:"status"`
	Message     string    `db:"message" json:"message"`
	ID          uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.Log, error) {
	row := q.db.QueryRow(ctx, update,
		arg.LogTypeSlug,
		arg.ProcessID,
		arg.Level,
		arg.Status,
		arg.Message,
		arg.ID,
	)
	var i models.Log
	err := row.Scan(
		&i.ID,
		&i.LogTypeSlug,
		&i.ProcessID,
		&i.Level,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return &i, err
}
