// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications_gen.sql

package repo_notifications

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO notifications (category, type)
	VALUES ($1, $2)
	RETURNING id, category, type
`

type CreateParams struct {
	Category *models.NotificationCategory `db:"category" json:"category"`
	Type     models.NotificationType      `db:"type" json:"type"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Notification, error) {
	row := q.db.QueryRow(ctx, create, arg.Category, arg.Type)
	var i models.Notification
	err := row.Scan(&i.ID, &i.Category, &i.Type)
	return &i, err
}

const getByID = `-- name: GetByID :one
SELECT id, category, type FROM notifications WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Notification, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Notification
	err := row.Scan(&i.ID, &i.Category, &i.Type)
	return &i, err
}
