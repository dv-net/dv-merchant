// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: withdrawal_wallet_addresses.sql

package repo_withdrawal_wallet_addresses

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const checkAddressExists = `-- name: CheckAddressExists :one
SELECT EXISTS (
    SELECT 1
    FROM withdrawal_wallet_addresses
    WHERE withdrawal_wallet_id = $1
      AND address = $2
      AND deleted_at IS NULL
) AS exists
`

type CheckAddressExistsParams struct {
	WithdrawalWalletID uuid.UUID `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
	Address            string    `db:"address" json:"address"`
}

func (q *Queries) CheckAddressExists(ctx context.Context, arg CheckAddressExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkAddressExists, arg.WithdrawalWalletID, arg.Address)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAddressWithCurrencyByUserID = `-- name: GetAddressWithCurrencyByUserID :many
SELECT distinct address,
       currencies.blockchain as blockchain
FROM withdrawal_wallet_addresses
         INNER JOIN
     withdrawal_wallets ON withdrawal_wallet_addresses.withdrawal_wallet_id = withdrawal_wallets.id
         INNER JOIN currencies ON withdrawal_wallets.currency_id = currencies.id AND currencies.status = true
WHERE user_id = $1
`

type GetAddressWithCurrencyByUserIDRow struct {
	Address    string             `db:"address" json:"address"`
	Blockchain *models.Blockchain `db:"blockchain" json:"blockchain"`
}

func (q *Queries) GetAddressWithCurrencyByUserID(ctx context.Context, userID uuid.UUID) ([]*GetAddressWithCurrencyByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAddressWithCurrencyByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAddressWithCurrencyByUserIDRow{}
	for rows.Next() {
		var i GetAddressWithCurrencyByUserIDRow
		if err := rows.Scan(&i.Address, &i.Blockchain); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddresses = `-- name: GetAddresses :many
select id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at
from withdrawal_wallet_addresses
where withdrawal_wallet_id = $1::uuid
  and deleted_at is null
`

func (q *Queries) GetAddresses(ctx context.Context, dollar_1 uuid.UUID) ([]*models.WithdrawalWalletAddress, error) {
	rows, err := q.db.Query(ctx, getAddresses, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.WithdrawalWalletAddress{}
	for rows.Next() {
		var i models.WithdrawalWalletAddress
		if err := rows.Scan(
			&i.ID,
			&i.WithdrawalWalletID,
			&i.Name,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAddressesList = `-- name: GetAddressesList :many
select address
from withdrawal_wallet_addresses
where withdrawal_wallet_id = $1::uuid
  and deleted_at is null
`

func (q *Queries) GetAddressesList(ctx context.Context, dollar_1 uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getAddressesList, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var address string
		if err := rows.Scan(&address); err != nil {
			return nil, err
		}
		items = append(items, address)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByAddress = `-- name: GetByAddress :one
select id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at
from withdrawal_wallet_addresses
where withdrawal_wallet_id = $2::uuid
  and address = $1
`

type GetByAddressParams struct {
	Address            string    `db:"address" json:"address"`
	WithdrawalWalletID uuid.UUID `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
}

func (q *Queries) GetByAddress(ctx context.Context, arg GetByAddressParams) (*models.WithdrawalWalletAddress, error) {
	row := q.db.QueryRow(ctx, getByAddress, arg.Address, arg.WithdrawalWalletID)
	var i models.WithdrawalWalletAddress
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getByAddressWithTrashed = `-- name: GetByAddressWithTrashed :one
select id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at
from withdrawal_wallet_addresses
where withdrawal_wallet_id = $2::uuid
  and address = $1
`

type GetByAddressWithTrashedParams struct {
	Address            string    `db:"address" json:"address"`
	WithdrawalWalletID uuid.UUID `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
}

func (q *Queries) GetByAddressWithTrashed(ctx context.Context, arg GetByAddressWithTrashedParams) (*models.WithdrawalWalletAddress, error) {
	row := q.db.QueryRow(ctx, getByAddressWithTrashed, arg.Address, arg.WithdrawalWalletID)
	var i models.WithdrawalWalletAddress
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getWithdrawalAddressByCurrencyID = `-- name: GetWithdrawalAddressByCurrencyID :many
select distinct (wa.address)
from withdrawal_wallet_addresses wa
         left join withdrawal_wallets w on w.id = wa.withdrawal_wallet_id
where w.blockchain = $1
  and w.user_id = $2
  and w.currency_id = $3
  and wa.deleted_at is null
`

type GetWithdrawalAddressByCurrencyIDParams struct {
	Blockchain models.Blockchain `db:"blockchain" json:"blockchain"`
	UserID     uuid.UUID         `db:"user_id" json:"user_id"`
	CurrencyID string            `db:"currency_id" json:"currency_id"`
}

func (q *Queries) GetWithdrawalAddressByCurrencyID(ctx context.Context, arg GetWithdrawalAddressByCurrencyIDParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getWithdrawalAddressByCurrencyID, arg.Blockchain, arg.UserID, arg.CurrencyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var address string
		if err := rows.Scan(&address); err != nil {
			return nil, err
		}
		items = append(items, address)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdrawalWalletsByBlockchain = `-- name: GetWithdrawalWalletsByBlockchain :many
select distinct (wa.address)
from withdrawal_wallet_addresses wa
         left join withdrawal_wallets w on w.id = wa.withdrawal_wallet_id
where w.blockchain = $1
  and w.user_id = $2
and wa.deleted_at is null
`

type GetWithdrawalWalletsByBlockchainParams struct {
	Blockchain models.Blockchain `db:"blockchain" json:"blockchain"`
	UserID     uuid.UUID         `db:"user_id" json:"user_id"`
}

func (q *Queries) GetWithdrawalWalletsByBlockchain(ctx context.Context, arg GetWithdrawalWalletsByBlockchainParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getWithdrawalWalletsByBlockchain, arg.Blockchain, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var address string
		if err := rows.Scan(&address); err != nil {
			return nil, err
		}
		items = append(items, address)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softBatchDelete = `-- name: SoftBatchDelete :exec
update withdrawal_wallet_addresses
set deleted_at = now(),
    updated_at = now()
where id = ANY ($1::uuid[])
`

func (q *Queries) SoftBatchDelete(ctx context.Context, id []uuid.UUID) error {
	_, err := q.db.Exec(ctx, softBatchDelete, id)
	return err
}

const softDelete = `-- name: SoftDelete :exec
update withdrawal_wallet_addresses
set deleted_at = now(),
    updated_at = now()
where id = $1::uuid
`

func (q *Queries) SoftDelete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDelete, id)
	return err
}

const softDeleteUnmatchedByAddress = `-- name: SoftDeleteUnmatchedByAddress :exec
update withdrawal_wallet_addresses
set deleted_at = now(),
    updated_at = now()
where withdrawal_wallet_id = $1
  and (address != ANY ($2::varchar[]) or cardinality($2::varchar[]) = 0)
`

type SoftDeleteUnmatchedByAddressParams struct {
	WalletID uuid.UUID `db:"wallet_id" json:"wallet_id"`
	Address  []string  `db:"address" json:"address"`
}

func (q *Queries) SoftDeleteUnmatchedByAddress(ctx context.Context, arg SoftDeleteUnmatchedByAddressParams) error {
	_, err := q.db.Exec(ctx, softDeleteUnmatchedByAddress, arg.WalletID, arg.Address)
	return err
}

const updateDeletedAddress = `-- name: UpdateDeletedAddress :one
update withdrawal_wallet_addresses
set name       = $1,
    deleted_at = NULL,
    updated_at = now()
where id = $2::uuid
RETURNING id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at
`

type UpdateDeletedAddressParams struct {
	Name *string   `db:"name" json:"name"`
	ID   uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateDeletedAddress(ctx context.Context, arg UpdateDeletedAddressParams) (*models.WithdrawalWalletAddress, error) {
	row := q.db.QueryRow(ctx, updateDeletedAddress, arg.Name, arg.ID)
	var i models.WithdrawalWalletAddress
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
