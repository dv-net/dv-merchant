// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_withdrawal_wallet_addresses

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const updateList = `-- name: UpdateList :batchexec
INSERT INTO withdrawal_wallet_addresses (address, name, withdrawal_wallet_id, created_at, updated_at)
VALUES ($1, $2, $3, now(), now())
ON CONFLICT (withdrawal_wallet_id, address) DO UPDATE
    SET name       = $2,
        updated_at = now(),
        deleted_at = null
`

type UpdateListBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type UpdateListParams struct {
	Address            string    `db:"address" json:"address"`
	Name               *string   `db:"name" json:"name"`
	WithdrawalWalletID uuid.UUID `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
}

func (q *Queries) UpdateList(ctx context.Context, arg []UpdateListParams) *UpdateListBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Address,
			a.Name,
			a.WithdrawalWalletID,
		}
		batch.Queue(updateList, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &UpdateListBatchResults{br, len(arg), false}
}

func (b *UpdateListBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *UpdateListBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
