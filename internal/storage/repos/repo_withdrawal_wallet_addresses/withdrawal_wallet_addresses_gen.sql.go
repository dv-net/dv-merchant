// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: withdrawal_wallet_addresses_gen.sql

package repo_withdrawal_wallet_addresses

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO withdrawal_wallet_addresses (withdrawal_wallet_id, name, address, created_at)
	VALUES ($1, $2, $3, now())
	RETURNING id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at
`

type CreateParams struct {
	WithdrawalWalletID uuid.UUID `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
	Name               *string   `db:"name" json:"name"`
	Address            string    `db:"address" json:"address"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.WithdrawalWalletAddress, error) {
	row := q.db.QueryRow(ctx, create, arg.WithdrawalWalletID, arg.Name, arg.Address)
	var i models.WithdrawalWalletAddress
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const getById = `-- name: GetById :one
SELECT id, withdrawal_wallet_id, name, address, created_at, updated_at, deleted_at FROM withdrawal_wallet_addresses WHERE deleted_at IS NULL AND id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.WithdrawalWalletAddress, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.WithdrawalWalletAddress
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Name,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
