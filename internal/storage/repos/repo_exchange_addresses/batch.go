// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: batch.go

package repo_exchange_addresses

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const batchInsertExchangeAddresses = `-- name: BatchInsertExchangeAddresses :batchexec
INSERT INTO exchange_addresses (exchange_id, address, chain, currency, address_type, user_id, create_type)
VALUES ($1, $2, $3, $4, $5, $6, $7)
ON CONFLICT DO NOTHING
`

type BatchInsertExchangeAddressesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type BatchInsertExchangeAddressesParams struct {
	ExchangeID  uuid.UUID `db:"exchange_id" json:"exchange_id"`
	Address     string    `db:"address" json:"address"`
	Chain       string    `db:"chain" json:"chain"`
	Currency    string    `db:"currency" json:"currency"`
	AddressType string    `db:"address_type" json:"address_type"`
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
	CreateType  string    `db:"create_type" json:"create_type"`
}

func (q *Queries) BatchInsertExchangeAddresses(ctx context.Context, arg []BatchInsertExchangeAddressesParams) *BatchInsertExchangeAddressesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.ExchangeID,
			a.Address,
			a.Chain,
			a.Currency,
			a.AddressType,
			a.UserID,
			a.CreateType,
		}
		batch.Queue(batchInsertExchangeAddresses, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &BatchInsertExchangeAddressesBatchResults{br, len(arg), false}
}

func (b *BatchInsertExchangeAddressesBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *BatchInsertExchangeAddressesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
