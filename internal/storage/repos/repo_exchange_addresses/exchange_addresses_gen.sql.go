// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_addresses_gen.sql

package repo_exchange_addresses

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO exchange_addresses (address, chain, currency, address_type, user_id, create_type, created_at, exchange_id)
	VALUES ($1, $2, $3, $4, $5, $6, now(), $7)
	RETURNING id, address, chain, currency, address_type, user_id, create_type, created_at, exchange_id
`

type CreateParams struct {
	Address     string    `db:"address" json:"address"`
	Chain       string    `db:"chain" json:"chain"`
	Currency    string    `db:"currency" json:"currency"`
	AddressType string    `db:"address_type" json:"address_type"`
	UserID      uuid.UUID `db:"user_id" json:"user_id"`
	CreateType  string    `db:"create_type" json:"create_type"`
	ExchangeID  uuid.UUID `db:"exchange_id" json:"exchange_id"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.ExchangeAddress, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Address,
		arg.Chain,
		arg.Currency,
		arg.AddressType,
		arg.UserID,
		arg.CreateType,
		arg.ExchangeID,
	)
	var i models.ExchangeAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Chain,
		&i.Currency,
		&i.AddressType,
		&i.UserID,
		&i.CreateType,
		&i.CreatedAt,
		&i.ExchangeID,
	)
	return &i, err
}

const getAllByUser = `-- name: GetAllByUser :many
SELECT id, address, chain, currency, address_type, user_id, create_type, created_at, exchange_id FROM exchange_addresses WHERE exchange_id=$1 AND user_id=$2
`

type GetAllByUserParams struct {
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) GetAllByUser(ctx context.Context, arg GetAllByUserParams) ([]*models.ExchangeAddress, error) {
	rows, err := q.db.Query(ctx, getAllByUser, arg.ExchangeID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.ExchangeAddress{}
	for rows.Next() {
		var i models.ExchangeAddress
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Chain,
			&i.Currency,
			&i.AddressType,
			&i.UserID,
			&i.CreateType,
			&i.CreatedAt,
			&i.ExchangeID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
