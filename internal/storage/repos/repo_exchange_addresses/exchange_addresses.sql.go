// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: exchange_addresses.sql

package repo_exchange_addresses

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
)

const deleteByUser = `-- name: DeleteByUser :exec
DELETE FROM exchange_addresses WHERE exchange_id=$1 AND user_id=$2
`

type DeleteByUserParams struct {
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteByUser(ctx context.Context, arg DeleteByUserParams) error {
	_, err := q.db.Exec(ctx, deleteByUser, arg.ExchangeID, arg.UserID)
	return err
}

const deleteByUserAndExchangeID = `-- name: DeleteByUserAndExchangeID :exec
DELETE FROM exchange_addresses WHERE exchange_id=$1 AND user_id=$2
`

type DeleteByUserAndExchangeIDParams struct {
	ExchangeID uuid.UUID `db:"exchange_id" json:"exchange_id"`
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteByUserAndExchangeID(ctx context.Context, arg DeleteByUserAndExchangeIDParams) error {
	_, err := q.db.Exec(ctx, deleteByUserAndExchangeID, arg.ExchangeID, arg.UserID)
	return err
}

const getAllDepositAddress = `-- name: GetAllDepositAddress :many
SELECT ea.address,
       ea.currency,
       ea.chain,
       ea.address_type,
       MAX(exchanges.slug)::VARCHAR as slug,
       MAX(exchanges.name)::VARCHAR as name,
       MAX(ec.ticker)::VARCHAR      as ticker
FROM exchange_addresses AS ea
         LEFT JOIN exchanges ON ea.exchange_id = exchanges.id
         LEFT JOIN exchange_chains ec ON ea.chain = ec.chain AND ea.currency = ec.currency_id
WHERE ea.user_id = $1
  AND ea.address_type = 'deposit'
GROUP BY ea.address,
         ea.currency,
         ea.chain,
         ea.address_type
`

type GetAllDepositAddressRow struct {
	Address     string `db:"address" json:"address"`
	Currency    string `db:"currency" json:"currency"`
	Chain       string `db:"chain" json:"chain"`
	AddressType string `db:"address_type" json:"address_type"`
	Slug        string `db:"slug" json:"slug"`
	Name        string `db:"name" json:"name"`
	Ticker      string `db:"ticker" json:"ticker"`
}

func (q *Queries) GetAllDepositAddress(ctx context.Context, userID uuid.UUID) ([]*GetAllDepositAddressRow, error) {
	rows, err := q.db.Query(ctx, getAllDepositAddress, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllDepositAddressRow{}
	for rows.Next() {
		var i GetAllDepositAddressRow
		if err := rows.Scan(
			&i.Address,
			&i.Currency,
			&i.Chain,
			&i.AddressType,
			&i.Slug,
			&i.Name,
			&i.Ticker,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE exchange_addresses
SET address=$1
WHERE id=$2 AND user_id=$3
RETURNING id, address, chain, currency, address_type, user_id, create_type, created_at, exchange_id
`

type UpdateParams struct {
	Address string    `db:"address" json:"address"`
	ID      uuid.UUID `db:"id" json:"id"`
	UserID  uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.ExchangeAddress, error) {
	row := q.db.QueryRow(ctx, update, arg.Address, arg.ID, arg.UserID)
	var i models.ExchangeAddress
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Chain,
		&i.Currency,
		&i.AddressType,
		&i.UserID,
		&i.CreateType,
		&i.CreatedAt,
		&i.ExchangeID,
	)
	return &i, err
}
