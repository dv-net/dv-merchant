// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: receipts_gen.sql

package repo_receipts

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const create = `-- name: Create :one
INSERT INTO receipts (status, store_id, currency_id, amount, wallet_id, created_at)
	VALUES ($1, $2, $3, $4, $5, now())
	RETURNING id, status, store_id, currency_id, amount, wallet_id, created_at, updated_at
`

type CreateParams struct {
	Status     models.ReceiptStatus `db:"status" json:"status"`
	StoreID    uuid.UUID            `db:"store_id" json:"store_id"`
	CurrencyID string               `db:"currency_id" json:"currency_id"`
	Amount     decimal.Decimal      `db:"amount" json:"amount"`
	WalletID   uuid.NullUUID        `db:"wallet_id" json:"wallet_id"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Receipt, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Status,
		arg.StoreID,
		arg.CurrencyID,
		arg.Amount,
		arg.WalletID,
	)
	var i models.Receipt
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.StoreID,
		&i.CurrencyID,
		&i.Amount,
		&i.WalletID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAll = `-- name: GetAll :many
SELECT id, status, store_id, currency_id, amount, wallet_id, created_at, updated_at FROM receipts ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]*models.Receipt, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Receipt{}
	for rows.Next() {
		var i models.Receipt
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.StoreID,
			&i.CurrencyID,
			&i.Amount,
			&i.WalletID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, status, store_id, currency_id, amount, wallet_id, created_at, updated_at FROM receipts WHERE id=$1 LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (*models.Receipt, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i models.Receipt
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.StoreID,
		&i.CurrencyID,
		&i.Amount,
		&i.WalletID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
