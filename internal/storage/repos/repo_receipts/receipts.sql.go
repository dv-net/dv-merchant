// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: receipts.sql

package repo_receipts

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const getByUserId = `-- name: GetByUserId :many
SELECT r.id, r.status, r.store_id, r.currency_id, r.amount, r.wallet_id, r.created_at, r.updated_at from receipts r inner join stores s on r.store_id = s.id where s.user_id = $1 limit $2 offset $3
`

type GetByUserIdParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	Limit  int32     `db:"limit" json:"limit"`
	Offset int32     `db:"offset" json:"offset"`
}

func (q *Queries) GetByUserId(ctx context.Context, arg GetByUserIdParams) ([]*models.Receipt, error) {
	rows, err := q.db.Query(ctx, getByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Receipt{}
	for rows.Next() {
		var i models.Receipt
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.StoreID,
			&i.CurrencyID,
			&i.Amount,
			&i.WalletID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
