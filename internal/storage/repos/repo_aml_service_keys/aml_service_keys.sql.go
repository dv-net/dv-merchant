// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: aml_service_keys.sql

package repo_aml_service_keys

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllByServiceSlug = `-- name: GetAllByServiceSlug :many
SELECT ask.id, service_id, name, description, ask.created_at, ask.updated_at, amls.id, slug, amls.created_at, amls.updated_at FROM aml_service_keys ask INNER JOIN aml_services amls ON ask.service_id = amls.id AND amls.slug = $1
`

type GetAllByServiceSlugRow struct {
	ID          uuid.UUID         `db:"id" json:"id"`
	ServiceID   uuid.UUID         `db:"service_id" json:"service_id"`
	Name        models.AmlKeyType `db:"name" json:"name"`
	Description string            `db:"description" json:"description"`
	CreatedAt   pgtype.Timestamp  `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamp  `db:"updated_at" json:"updated_at"`
	ID_2        uuid.UUID         `db:"id_2" json:"id_2"`
	Slug        models.AMLSlug    `db:"slug" json:"slug"`
	CreatedAt_2 pgtype.Timestamp  `db:"created_at_2" json:"created_at_2"`
	UpdatedAt_2 pgtype.Timestamp  `db:"updated_at_2" json:"updated_at_2"`
}

func (q *Queries) GetAllByServiceSlug(ctx context.Context, slug models.AMLSlug) ([]*GetAllByServiceSlugRow, error) {
	rows, err := q.db.Query(ctx, getAllByServiceSlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllByServiceSlugRow{}
	for rows.Next() {
		var i GetAllByServiceSlugRow
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Slug,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
