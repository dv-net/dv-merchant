// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: store_api_keys_gen.sql

package repo_store_api_keys

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO store_api_keys (store_id, key, enabled, created_at)
	VALUES ($1, $2, $3, $4)
	RETURNING id, store_id, key, enabled, created_at, updated_at
`

type CreateParams struct {
	StoreID   uuid.UUID        `db:"store_id" json:"store_id"`
	Key       string           `db:"key" json:"key"`
	Enabled   bool             `db:"enabled" json:"enabled"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.StoreApiKey, error) {
	row := q.db.QueryRow(ctx, create,
		arg.StoreID,
		arg.Key,
		arg.Enabled,
		arg.CreatedAt,
	)
	var i models.StoreApiKey
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Key,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM store_api_keys WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getById = `-- name: GetById :one
SELECT id, store_id, key, enabled, created_at, updated_at FROM store_api_keys WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.StoreApiKey, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.StoreApiKey
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Key,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateStatus = `-- name: UpdateStatus :one
UPDATE store_api_keys
	SET enabled=$1, updated_at=$2
	WHERE id=$3
	RETURNING id, store_id, key, enabled, created_at, updated_at
`

type UpdateStatusParams struct {
	Enabled   bool             `db:"enabled" json:"enabled"`
	UpdatedAt pgtype.Timestamp `db:"updated_at" json:"updated_at"`
	ID        uuid.UUID        `db:"id" json:"id"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) (*models.StoreApiKey, error) {
	row := q.db.QueryRow(ctx, updateStatus, arg.Enabled, arg.UpdatedAt, arg.ID)
	var i models.StoreApiKey
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.Key,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
