// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification_send_queue.sql

package repo_notification_send_queue

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const getQueuedNotifications = `-- name: GetQueuedNotifications :many
SELECT id, destination, type, parameters, channel, attempts, created_at, updated_at, args
FROM notification_send_queue
WHERE attempts < $1::integer
ORDER BY created_at
LIMIT 500
`

func (q *Queries) GetQueuedNotifications(ctx context.Context, maxAttempts int32) ([]*models.NotificationSendQueue, error) {
	rows, err := q.db.Query(ctx, getQueuedNotifications, maxAttempts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.NotificationSendQueue{}
	for rows.Next() {
		var i models.NotificationSendQueue
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.Type,
			&i.Parameters,
			&i.Channel,
			&i.Attempts,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Args,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseAttempts = `-- name: IncreaseAttempts :one
UPDATE notification_send_queue
SET attempts = attempts + 1
WHERE id = $1 RETURNING attempts
`

func (q *Queries) IncreaseAttempts(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, increaseAttempts, id)
	var attempts int32
	err := row.Scan(&attempts)
	return attempts, err
}
