// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification_send_queue_gen.sql

package repo_notification_send_queue

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO notification_send_queue (destination, type, parameters, channel, created_at, args)
	VALUES ($1, $2, $3, $4, now(), $5)
	RETURNING id, destination, type, parameters, channel, attempts, created_at, updated_at, args
`

type CreateParams struct {
	Destination string                   `db:"destination" json:"destination"`
	Type        models.NotificationType  `db:"type" json:"type"`
	Parameters  []byte                   `db:"parameters" json:"parameters"`
	Channel     models.DeliveryChannel   `db:"channel" json:"channel"`
	Args        *models.NotificationArgs `db:"args" json:"args"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.NotificationSendQueue, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Destination,
		arg.Type,
		arg.Parameters,
		arg.Channel,
		arg.Args,
	)
	var i models.NotificationSendQueue
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Type,
		&i.Parameters,
		&i.Channel,
		&i.Attempts,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Args,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM notification_send_queue WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getById = `-- name: GetById :one
SELECT id, destination, type, parameters, channel, attempts, created_at, updated_at, args FROM notification_send_queue WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.NotificationSendQueue, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.NotificationSendQueue
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Type,
		&i.Parameters,
		&i.Channel,
		&i.Attempts,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Args,
	)
	return &i, err
}
