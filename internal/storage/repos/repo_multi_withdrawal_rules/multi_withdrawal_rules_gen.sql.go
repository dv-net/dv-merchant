// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: multi_withdrawal_rules_gen.sql

package repo_multi_withdrawal_rules

import (
	"context"
	"github.com/dv-net/dv-merchant/internal/models"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO multi_withdrawal_rules (withdrawal_wallet_id, mode, manual_address, created_at, updated_at)
	VALUES ($1, $2, $3, $4, $5)
	RETURNING id, withdrawal_wallet_id, mode, manual_address, created_at, updated_at
`

type CreateParams struct {
	WithdrawalWalletID uuid.UUID                  `db:"withdrawal_wallet_id" json:"withdrawal_wallet_id"`
	Mode               models.MultiWithdrawalMode `db:"mode" json:"mode"`
	ManualAddress      pgtype.Text                `db:"manual_address" json:"manual_address"`
	CreatedAt          pgtype.Timestamp           `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamp           `db:"updated_at" json:"updated_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.MultiWithdrawalRule, error) {
	row := q.db.QueryRow(ctx, create,
		arg.WithdrawalWalletID,
		arg.Mode,
		arg.ManualAddress,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i models.MultiWithdrawalRule
	err := row.Scan(
		&i.ID,
		&i.WithdrawalWalletID,
		&i.Mode,
		&i.ManualAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
