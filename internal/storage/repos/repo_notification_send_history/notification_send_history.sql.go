// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification_send_history.sql

package repo_notification_send_history

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
)

const existWasSentRecently = `-- name: ExistWasSentRecently :one
SELECT EXISTS (
    SELECT 1
    FROM notification_send_history
    WHERE destination = $1
      AND type = $2
      AND channel = $3
      AND created_at >= now() - interval '30 minutes'
) AS was_sent_recently
`

type ExistWasSentRecentlyParams struct {
	Destination string                  `db:"destination" json:"destination"`
	Type        models.NotificationType `db:"type" json:"type"`
	Channel     models.DeliveryChannel  `db:"channel" json:"channel"`
}

func (q *Queries) ExistWasSentRecently(ctx context.Context, arg ExistWasSentRecentlyParams) (bool, error) {
	row := q.db.QueryRow(ctx, existWasSentRecently, arg.Destination, arg.Type, arg.Channel)
	var was_sent_recently bool
	err := row.Scan(&was_sent_recently)
	return was_sent_recently, err
}

const getPendingNotifications = `-- name: GetPendingNotifications :many
SELECT id, destination, message_text, sender, created_at, updated_at, sent_at, type, channel, notification_send_queue_id, store_id, user_id FROM notification_send_history
    WHERE sent_at IS NULL
    AND attempts < 2
    ORDER BY created_at
    LIMIT 500
`

func (q *Queries) GetPendingNotifications(ctx context.Context) ([]*models.NotificationSendHistory, error) {
	rows, err := q.db.Query(ctx, getPendingNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.NotificationSendHistory{}
	for rows.Next() {
		var i models.NotificationSendHistory
		if err := rows.Scan(
			&i.ID,
			&i.Destination,
			&i.MessageText,
			&i.Sender,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SentAt,
			&i.Type,
			&i.Channel,
			&i.NotificationSendQueueID,
			&i.StoreID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
