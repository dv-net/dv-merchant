// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notification_send_history_gen.sql

package repo_notification_send_history

import (
	"context"

	"github.com/dv-net/dv-merchant/internal/models"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :exec
INSERT INTO notification_send_history (destination, message_text, sender, created_at, type, channel, notification_send_queue_id, store_id, user_id)
	VALUES ($1, $2, $3, now(), $4, $5, $6, $7, $8)
`

type CreateParams struct {
	Destination             string                  `db:"destination" json:"destination"`
	MessageText             pgtype.Text             `db:"message_text" json:"message_text"`
	Sender                  string                  `db:"sender" json:"sender"`
	Type                    models.NotificationType `db:"type" json:"type"`
	Channel                 models.DeliveryChannel  `db:"channel" json:"channel"`
	NotificationSendQueueID uuid.UUID               `db:"notification_send_queue_id" json:"notification_send_queue_id"`
	StoreID                 uuid.NullUUID           `db:"store_id" json:"store_id"`
	UserID                  uuid.NullUUID           `db:"user_id" json:"user_id"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.Destination,
		arg.MessageText,
		arg.Sender,
		arg.Type,
		arg.Channel,
		arg.NotificationSendQueueID,
		arg.StoreID,
		arg.UserID,
	)
	return err
}

const getById = `-- name: GetById :one
SELECT id, destination, message_text, sender, created_at, updated_at, sent_at, type, channel, notification_send_queue_id, store_id, user_id FROM notification_send_history WHERE id=$1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (*models.NotificationSendHistory, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i models.NotificationSendHistory
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.MessageText,
		&i.Sender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SentAt,
		&i.Type,
		&i.Channel,
		&i.NotificationSendQueueID,
		&i.StoreID,
		&i.UserID,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE notification_send_history
	SET updated_at=now(), sent_at=$1, notification_send_queue_id=$2, store_id=$3, user_id=$4
	WHERE destination=$5 AND id=$6
	RETURNING id, destination, message_text, sender, created_at, updated_at, sent_at, type, channel, notification_send_queue_id, store_id, user_id
`

type UpdateParams struct {
	SentAt                  pgtype.Timestamp `db:"sent_at" json:"sent_at"`
	NotificationSendQueueID uuid.UUID        `db:"notification_send_queue_id" json:"notification_send_queue_id"`
	StoreID                 uuid.NullUUID    `db:"store_id" json:"store_id"`
	UserID                  uuid.NullUUID    `db:"user_id" json:"user_id"`
	Destination             string           `db:"destination" json:"destination"`
	ID                      uuid.UUID        `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.NotificationSendHistory, error) {
	row := q.db.QueryRow(ctx, update,
		arg.SentAt,
		arg.NotificationSendQueueID,
		arg.StoreID,
		arg.UserID,
		arg.Destination,
		arg.ID,
	)
	var i models.NotificationSendHistory
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.MessageText,
		&i.Sender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SentAt,
		&i.Type,
		&i.Channel,
		&i.NotificationSendQueueID,
		&i.StoreID,
		&i.UserID,
	)
	return &i, err
}
