// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/dv-net/dv-merchant/internal/models"
)

// ICurrency is an autogenerated mock type for the ICurrency type
type ICurrency struct {
	mock.Mock
}

type ICurrency_Expecter struct {
	mock *mock.Mock
}

func (_m *ICurrency) EXPECT() *ICurrency_Expecter {
	return &ICurrency_Expecter{mock: &_m.Mock}
}

// GetAllCurrency provides a mock function with given fields: ctx
func (_m *ICurrency) GetAllCurrency(ctx context.Context) ([]*models.Currency, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCurrency")
	}

	var r0 []*models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Currency, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Currency); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetAllCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCurrency'
type ICurrency_GetAllCurrency_Call struct {
	*mock.Call
}

// GetAllCurrency is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ICurrency_Expecter) GetAllCurrency(ctx interface{}) *ICurrency_GetAllCurrency_Call {
	return &ICurrency_GetAllCurrency_Call{Call: _e.mock.On("GetAllCurrency", ctx)}
}

func (_c *ICurrency_GetAllCurrency_Call) Run(run func(ctx context.Context)) *ICurrency_GetAllCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ICurrency_GetAllCurrency_Call) Return(_a0 []*models.Currency, _a1 error) *ICurrency_GetAllCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetAllCurrency_Call) RunAndReturn(run func(context.Context) ([]*models.Currency, error)) *ICurrency_GetAllCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrenciesByBlockchain provides a mock function with given fields: ctx, blockchain
func (_m *ICurrency) GetCurrenciesByBlockchain(ctx context.Context, blockchain models.Blockchain) ([]*models.Currency, error) {
	ret := _m.Called(ctx, blockchain)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrenciesByBlockchain")
	}

	var r0 []*models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Blockchain) ([]*models.Currency, error)); ok {
		return rf(ctx, blockchain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Blockchain) []*models.Currency); ok {
		r0 = rf(ctx, blockchain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Blockchain) error); ok {
		r1 = rf(ctx, blockchain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetCurrenciesByBlockchain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrenciesByBlockchain'
type ICurrency_GetCurrenciesByBlockchain_Call struct {
	*mock.Call
}

// GetCurrenciesByBlockchain is a helper method to define mock.On call
//   - ctx context.Context
//   - blockchain models.Blockchain
func (_e *ICurrency_Expecter) GetCurrenciesByBlockchain(ctx interface{}, blockchain interface{}) *ICurrency_GetCurrenciesByBlockchain_Call {
	return &ICurrency_GetCurrenciesByBlockchain_Call{Call: _e.mock.On("GetCurrenciesByBlockchain", ctx, blockchain)}
}

func (_c *ICurrency_GetCurrenciesByBlockchain_Call) Run(run func(ctx context.Context, blockchain models.Blockchain)) *ICurrency_GetCurrenciesByBlockchain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Blockchain))
	})
	return _c
}

func (_c *ICurrency_GetCurrenciesByBlockchain_Call) Return(_a0 []*models.Currency, _a1 error) *ICurrency_GetCurrenciesByBlockchain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetCurrenciesByBlockchain_Call) RunAndReturn(run func(context.Context, models.Blockchain) ([]*models.Currency, error)) *ICurrency_GetCurrenciesByBlockchain_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrenciesEnabled provides a mock function with given fields: ctx
func (_m *ICurrency) GetCurrenciesEnabled(ctx context.Context) ([]*models.Currency, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrenciesEnabled")
	}

	var r0 []*models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Currency, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Currency); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetCurrenciesEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrenciesEnabled'
type ICurrency_GetCurrenciesEnabled_Call struct {
	*mock.Call
}

// GetCurrenciesEnabled is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ICurrency_Expecter) GetCurrenciesEnabled(ctx interface{}) *ICurrency_GetCurrenciesEnabled_Call {
	return &ICurrency_GetCurrenciesEnabled_Call{Call: _e.mock.On("GetCurrenciesEnabled", ctx)}
}

func (_c *ICurrency_GetCurrenciesEnabled_Call) Run(run func(ctx context.Context)) *ICurrency_GetCurrenciesEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ICurrency_GetCurrenciesEnabled_Call) Return(_a0 []*models.Currency, _a1 error) *ICurrency_GetCurrenciesEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetCurrenciesEnabled_Call) RunAndReturn(run func(context.Context) ([]*models.Currency, error)) *ICurrency_GetCurrenciesEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrenciesHasBalance provides a mock function with given fields: ctx
func (_m *ICurrency) GetCurrenciesHasBalance(ctx context.Context) ([]*models.Currency, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrenciesHasBalance")
	}

	var r0 []*models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Currency, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Currency); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetCurrenciesHasBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrenciesHasBalance'
type ICurrency_GetCurrenciesHasBalance_Call struct {
	*mock.Call
}

// GetCurrenciesHasBalance is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ICurrency_Expecter) GetCurrenciesHasBalance(ctx interface{}) *ICurrency_GetCurrenciesHasBalance_Call {
	return &ICurrency_GetCurrenciesHasBalance_Call{Call: _e.mock.On("GetCurrenciesHasBalance", ctx)}
}

func (_c *ICurrency_GetCurrenciesHasBalance_Call) Run(run func(ctx context.Context)) *ICurrency_GetCurrenciesHasBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ICurrency_GetCurrenciesHasBalance_Call) Return(_a0 []*models.Currency, _a1 error) *ICurrency_GetCurrenciesHasBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetCurrenciesHasBalance_Call) RunAndReturn(run func(context.Context) ([]*models.Currency, error)) *ICurrency_GetCurrenciesHasBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrencyByBlockchainAndContract provides a mock function with given fields: ctx, blockchain, contract
func (_m *ICurrency) GetCurrencyByBlockchainAndContract(ctx context.Context, blockchain models.Blockchain, contract string) (*models.Currency, error) {
	ret := _m.Called(ctx, blockchain, contract)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyByBlockchainAndContract")
	}

	var r0 *models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Blockchain, string) (*models.Currency, error)); ok {
		return rf(ctx, blockchain, contract)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Blockchain, string) *models.Currency); ok {
		r0 = rf(ctx, blockchain, contract)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Blockchain, string) error); ok {
		r1 = rf(ctx, blockchain, contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetCurrencyByBlockchainAndContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencyByBlockchainAndContract'
type ICurrency_GetCurrencyByBlockchainAndContract_Call struct {
	*mock.Call
}

// GetCurrencyByBlockchainAndContract is a helper method to define mock.On call
//   - ctx context.Context
//   - blockchain models.Blockchain
//   - contract string
func (_e *ICurrency_Expecter) GetCurrencyByBlockchainAndContract(ctx interface{}, blockchain interface{}, contract interface{}) *ICurrency_GetCurrencyByBlockchainAndContract_Call {
	return &ICurrency_GetCurrencyByBlockchainAndContract_Call{Call: _e.mock.On("GetCurrencyByBlockchainAndContract", ctx, blockchain, contract)}
}

func (_c *ICurrency_GetCurrencyByBlockchainAndContract_Call) Run(run func(ctx context.Context, blockchain models.Blockchain, contract string)) *ICurrency_GetCurrencyByBlockchainAndContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Blockchain), args[2].(string))
	})
	return _c
}

func (_c *ICurrency_GetCurrencyByBlockchainAndContract_Call) Return(_a0 *models.Currency, _a1 error) *ICurrency_GetCurrencyByBlockchainAndContract_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetCurrencyByBlockchainAndContract_Call) RunAndReturn(run func(context.Context, models.Blockchain, string) (*models.Currency, error)) *ICurrency_GetCurrencyByBlockchainAndContract_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrencyByID provides a mock function with given fields: ctx, ID
func (_m *ICurrency) GetCurrencyByID(ctx context.Context, ID string) (*models.Currency, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyByID")
	}

	var r0 *models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Currency, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Currency); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetCurrencyByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencyByID'
type ICurrency_GetCurrencyByID_Call struct {
	*mock.Call
}

// GetCurrencyByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *ICurrency_Expecter) GetCurrencyByID(ctx interface{}, ID interface{}) *ICurrency_GetCurrencyByID_Call {
	return &ICurrency_GetCurrencyByID_Call{Call: _e.mock.On("GetCurrencyByID", ctx, ID)}
}

func (_c *ICurrency_GetCurrencyByID_Call) Run(run func(ctx context.Context, ID string)) *ICurrency_GetCurrencyByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ICurrency_GetCurrencyByID_Call) Return(_a0 *models.Currency, _a1 error) *ICurrency_GetCurrencyByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetCurrencyByID_Call) RunAndReturn(run func(context.Context, string) (*models.Currency, error)) *ICurrency_GetCurrencyByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnableCurrencyByAddress provides a mock function with given fields: ctx, ID
func (_m *ICurrency) GetEnableCurrencyByAddress(ctx context.Context, ID string) (*models.Currency, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnableCurrencyByAddress")
	}

	var r0 *models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Currency, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Currency); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetEnableCurrencyByAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnableCurrencyByAddress'
type ICurrency_GetEnableCurrencyByAddress_Call struct {
	*mock.Call
}

// GetEnableCurrencyByAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *ICurrency_Expecter) GetEnableCurrencyByAddress(ctx interface{}, ID interface{}) *ICurrency_GetEnableCurrencyByAddress_Call {
	return &ICurrency_GetEnableCurrencyByAddress_Call{Call: _e.mock.On("GetEnableCurrencyByAddress", ctx, ID)}
}

func (_c *ICurrency_GetEnableCurrencyByAddress_Call) Run(run func(ctx context.Context, ID string)) *ICurrency_GetEnableCurrencyByAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ICurrency_GetEnableCurrencyByAddress_Call) Return(_a0 *models.Currency, _a1 error) *ICurrency_GetEnableCurrencyByAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetEnableCurrencyByAddress_Call) RunAndReturn(run func(context.Context, string) (*models.Currency, error)) *ICurrency_GetEnableCurrencyByAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledCurrencyByCode provides a mock function with given fields: ctx, code, blockchain
func (_m *ICurrency) GetEnabledCurrencyByCode(ctx context.Context, code string, blockchain models.Blockchain) (*models.Currency, error) {
	ret := _m.Called(ctx, code, blockchain)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledCurrencyByCode")
	}

	var r0 *models.Currency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Blockchain) (*models.Currency, error)); ok {
		return rf(ctx, code, blockchain)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Blockchain) *models.Currency); ok {
		r0 = rf(ctx, code, blockchain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Currency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.Blockchain) error); ok {
		r1 = rf(ctx, code, blockchain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrency_GetEnabledCurrencyByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledCurrencyByCode'
type ICurrency_GetEnabledCurrencyByCode_Call struct {
	*mock.Call
}

// GetEnabledCurrencyByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - blockchain models.Blockchain
func (_e *ICurrency_Expecter) GetEnabledCurrencyByCode(ctx interface{}, code interface{}, blockchain interface{}) *ICurrency_GetEnabledCurrencyByCode_Call {
	return &ICurrency_GetEnabledCurrencyByCode_Call{Call: _e.mock.On("GetEnabledCurrencyByCode", ctx, code, blockchain)}
}

func (_c *ICurrency_GetEnabledCurrencyByCode_Call) Run(run func(ctx context.Context, code string, blockchain models.Blockchain)) *ICurrency_GetEnabledCurrencyByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Blockchain))
	})
	return _c
}

func (_c *ICurrency_GetEnabledCurrencyByCode_Call) Return(_a0 *models.Currency, _a1 error) *ICurrency_GetEnabledCurrencyByCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrency_GetEnabledCurrencyByCode_Call) RunAndReturn(run func(context.Context, string, models.Blockchain) (*models.Currency, error)) *ICurrency_GetEnabledCurrencyByCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewICurrency creates a new instance of ICurrency. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICurrency(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICurrency {
	mock := &ICurrency{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
