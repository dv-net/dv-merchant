// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/dv-net/dv-merchant/internal/models"

	mock "github.com/stretchr/testify/mock"

	repo_users "github.com/dv-net/dv-merchant/internal/storage/repos/repo_users"

	storecmn "github.com/dv-net/dv-merchant/internal/storage/storecmn"

	uuid "github.com/google/uuid"
)

// UsersCustomQuerier is an autogenerated mock type for the ICustomQuerier type
type UsersCustomQuerier struct {
	mock.Mock
}

type UsersCustomQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersCustomQuerier) EXPECT() *UsersCustomQuerier_Expecter {
	return &UsersCustomQuerier_Expecter{mock: &_m.Mock}
}

// ChangeEmail provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) ChangeEmail(ctx context.Context, arg repo_users.ChangeEmailParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ChangeEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.ChangeEmailParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersCustomQuerier_ChangeEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeEmail'
type UsersCustomQuerier_ChangeEmail_Call struct {
	*mock.Call
}

// ChangeEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.ChangeEmailParams
func (_e *UsersCustomQuerier_Expecter) ChangeEmail(ctx interface{}, arg interface{}) *UsersCustomQuerier_ChangeEmail_Call {
	return &UsersCustomQuerier_ChangeEmail_Call{Call: _e.mock.On("ChangeEmail", ctx, arg)}
}

func (_c *UsersCustomQuerier_ChangeEmail_Call) Run(run func(ctx context.Context, arg repo_users.ChangeEmailParams)) *UsersCustomQuerier_ChangeEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.ChangeEmailParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_ChangeEmail_Call) Return(_a0 error) *UsersCustomQuerier_ChangeEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersCustomQuerier_ChangeEmail_Call) RunAndReturn(run func(context.Context, repo_users.ChangeEmailParams) error) *UsersCustomQuerier_ChangeEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ChangePassword provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) ChangePassword(ctx context.Context, arg repo_users.ChangePasswordParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.ChangePasswordParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.ChangePasswordParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.ChangePasswordParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type UsersCustomQuerier_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.ChangePasswordParams
func (_e *UsersCustomQuerier_Expecter) ChangePassword(ctx interface{}, arg interface{}) *UsersCustomQuerier_ChangePassword_Call {
	return &UsersCustomQuerier_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, arg)}
}

func (_c *UsersCustomQuerier_ChangePassword_Call) Run(run func(ctx context.Context, arg repo_users.ChangePasswordParams)) *UsersCustomQuerier_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.ChangePasswordParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_ChangePassword_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_ChangePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_ChangePassword_Call) RunAndReturn(run func(context.Context, repo_users.ChangePasswordParams) (*models.User, error)) *UsersCustomQuerier_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) Create(ctx context.Context, arg repo_users.CreateParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.CreateParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.CreateParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.CreateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UsersCustomQuerier_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.CreateParams
func (_e *UsersCustomQuerier_Expecter) Create(ctx interface{}, arg interface{}) *UsersCustomQuerier_Create_Call {
	return &UsersCustomQuerier_Create_Call{Call: _e.mock.On("Create", ctx, arg)}
}

func (_c *UsersCustomQuerier_Create_Call) Run(run func(ctx context.Context, arg repo_users.CreateParams)) *UsersCustomQuerier_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.CreateParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_Create_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_Create_Call) RunAndReturn(run func(context.Context, repo_users.CreateParams) (*models.User, error)) *UsersCustomQuerier_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UsersCustomQuerier) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersCustomQuerier_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UsersCustomQuerier_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersCustomQuerier_Expecter) Delete(ctx interface{}, id interface{}) *UsersCustomQuerier_Delete_Call {
	return &UsersCustomQuerier_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UsersCustomQuerier_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersCustomQuerier_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersCustomQuerier_Delete_Call) Return(_a0 error) *UsersCustomQuerier_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersCustomQuerier_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *UsersCustomQuerier_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveProcessingOwnersWithTronDelegate provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) GetActiveProcessingOwnersWithTronDelegate(ctx context.Context, arg repo_users.GetActiveProcessingOwnersWithTronDelegateParams) ([]uuid.NullUUID, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveProcessingOwnersWithTronDelegate")
	}

	var r0 []uuid.NullUUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetActiveProcessingOwnersWithTronDelegateParams) ([]uuid.NullUUID, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetActiveProcessingOwnersWithTronDelegateParams) []uuid.NullUUID); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.NullUUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.GetActiveProcessingOwnersWithTronDelegateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveProcessingOwnersWithTronDelegate'
type UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call struct {
	*mock.Call
}

// GetActiveProcessingOwnersWithTronDelegate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.GetActiveProcessingOwnersWithTronDelegateParams
func (_e *UsersCustomQuerier_Expecter) GetActiveProcessingOwnersWithTronDelegate(ctx interface{}, arg interface{}) *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call {
	return &UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call{Call: _e.mock.On("GetActiveProcessingOwnersWithTronDelegate", ctx, arg)}
}

func (_c *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call) Run(run func(ctx context.Context, arg repo_users.GetActiveProcessingOwnersWithTronDelegateParams)) *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.GetActiveProcessingOwnersWithTronDelegateParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call) Return(_a0 []uuid.NullUUID, _a1 error) *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call) RunAndReturn(run func(context.Context, repo_users.GetActiveProcessingOwnersWithTronDelegateParams) ([]uuid.NullUUID, error)) *UsersCustomQuerier_GetActiveProcessingOwnersWithTronDelegate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) GetAll(ctx context.Context, arg repo_users.GetAllParams) ([]*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetAllParams) ([]*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetAllParams) []*models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.GetAllParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UsersCustomQuerier_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.GetAllParams
func (_e *UsersCustomQuerier_Expecter) GetAll(ctx interface{}, arg interface{}) *UsersCustomQuerier_GetAll_Call {
	return &UsersCustomQuerier_GetAll_Call{Call: _e.mock.On("GetAll", ctx, arg)}
}

func (_c *UsersCustomQuerier_GetAll_Call) Run(run func(ctx context.Context, arg repo_users.GetAllParams)) *UsersCustomQuerier_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.GetAllParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetAll_Call) Return(_a0 []*models.User, _a1 error) *UsersCustomQuerier_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetAll_Call) RunAndReturn(run func(context.Context, repo_users.GetAllParams) ([]*models.User, error)) *UsersCustomQuerier_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFiltered provides a mock function with given fields: ctx, params
func (_m *UsersCustomQuerier) GetAllFiltered(ctx context.Context, params repo_users.GetAllFilteredParams) (*storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow], error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFiltered")
	}

	var r0 *storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetAllFilteredParams) (*storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow], error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.GetAllFilteredParams) *storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow]); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.GetAllFilteredParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetAllFiltered_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFiltered'
type UsersCustomQuerier_GetAllFiltered_Call struct {
	*mock.Call
}

// GetAllFiltered is a helper method to define mock.On call
//   - ctx context.Context
//   - params repo_users.GetAllFilteredParams
func (_e *UsersCustomQuerier_Expecter) GetAllFiltered(ctx interface{}, params interface{}) *UsersCustomQuerier_GetAllFiltered_Call {
	return &UsersCustomQuerier_GetAllFiltered_Call{Call: _e.mock.On("GetAllFiltered", ctx, params)}
}

func (_c *UsersCustomQuerier_GetAllFiltered_Call) Run(run func(ctx context.Context, params repo_users.GetAllFilteredParams)) *UsersCustomQuerier_GetAllFiltered_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.GetAllFilteredParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetAllFiltered_Call) Return(_a0 *storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow], _a1 error) *UsersCustomQuerier_GetAllFiltered_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetAllFiltered_Call) RunAndReturn(run func(context.Context, repo_users.GetAllFilteredParams) (*storecmn.FindResponseWithFullPagination[*repo_users.GetAllFilteredRow], error)) *UsersCustomQuerier_GetAllFiltered_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllWithExchangeEnabled provides a mock function with given fields: ctx
func (_m *UsersCustomQuerier) GetAllWithExchangeEnabled(ctx context.Context) ([]*models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWithExchangeEnabled")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetAllWithExchangeEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllWithExchangeEnabled'
type UsersCustomQuerier_GetAllWithExchangeEnabled_Call struct {
	*mock.Call
}

// GetAllWithExchangeEnabled is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersCustomQuerier_Expecter) GetAllWithExchangeEnabled(ctx interface{}) *UsersCustomQuerier_GetAllWithExchangeEnabled_Call {
	return &UsersCustomQuerier_GetAllWithExchangeEnabled_Call{Call: _e.mock.On("GetAllWithExchangeEnabled", ctx)}
}

func (_c *UsersCustomQuerier_GetAllWithExchangeEnabled_Call) Run(run func(ctx context.Context)) *UsersCustomQuerier_GetAllWithExchangeEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetAllWithExchangeEnabled_Call) Return(_a0 []*models.User, _a1 error) *UsersCustomQuerier_GetAllWithExchangeEnabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetAllWithExchangeEnabled_Call) RunAndReturn(run func(context.Context) ([]*models.User, error)) *UsersCustomQuerier_GetAllWithExchangeEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UsersCustomQuerier) GetByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UsersCustomQuerier_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UsersCustomQuerier_Expecter) GetByEmail(ctx interface{}, email interface{}) *UsersCustomQuerier_GetByEmail_Call {
	return &UsersCustomQuerier_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UsersCustomQuerier_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UsersCustomQuerier_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetByEmail_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UsersCustomQuerier_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UsersCustomQuerier) GetByID(ctx context.Context, id uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UsersCustomQuerier_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersCustomQuerier_Expecter) GetByID(ctx interface{}, id interface{}) *UsersCustomQuerier_GetByID_Call {
	return &UsersCustomQuerier_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UsersCustomQuerier_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersCustomQuerier_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetByID_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.User, error)) *UsersCustomQuerier_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnverifed provides a mock function with given fields: ctx
func (_m *UsersCustomQuerier) GetUnverifed(ctx context.Context) ([]*models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUnverifed")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_GetUnverifed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnverifed'
type UsersCustomQuerier_GetUnverifed_Call struct {
	*mock.Call
}

// GetUnverifed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersCustomQuerier_Expecter) GetUnverifed(ctx interface{}) *UsersCustomQuerier_GetUnverifed_Call {
	return &UsersCustomQuerier_GetUnverifed_Call{Call: _e.mock.On("GetUnverifed", ctx)}
}

func (_c *UsersCustomQuerier_GetUnverifed_Call) Run(run func(ctx context.Context)) *UsersCustomQuerier_GetUnverifed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersCustomQuerier_GetUnverifed_Call) Return(_a0 []*models.User, _a1 error) *UsersCustomQuerier_GetUnverifed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_GetUnverifed_Call) RunAndReturn(run func(context.Context) ([]*models.User, error)) *UsersCustomQuerier_GetUnverifed_Call {
	_c.Call.Return(run)
	return _c
}

// SetEmail provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) SetEmail(ctx context.Context, arg repo_users.SetEmailParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SetEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.SetEmailParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersCustomQuerier_SetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEmail'
type UsersCustomQuerier_SetEmail_Call struct {
	*mock.Call
}

// SetEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.SetEmailParams
func (_e *UsersCustomQuerier_Expecter) SetEmail(ctx interface{}, arg interface{}) *UsersCustomQuerier_SetEmail_Call {
	return &UsersCustomQuerier_SetEmail_Call{Call: _e.mock.On("SetEmail", ctx, arg)}
}

func (_c *UsersCustomQuerier_SetEmail_Call) Run(run func(ctx context.Context, arg repo_users.SetEmailParams)) *UsersCustomQuerier_SetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.SetEmailParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_SetEmail_Call) Return(_a0 error) *UsersCustomQuerier_SetEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersCustomQuerier_SetEmail_Call) RunAndReturn(run func(context.Context, repo_users.SetEmailParams) error) *UsersCustomQuerier_SetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) Update(ctx context.Context, arg repo_users.UpdateParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.UpdateParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UsersCustomQuerier_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateParams
func (_e *UsersCustomQuerier_Expecter) Update(ctx interface{}, arg interface{}) *UsersCustomQuerier_Update_Call {
	return &UsersCustomQuerier_Update_Call{Call: _e.mock.On("Update", ctx, arg)}
}

func (_c *UsersCustomQuerier_Update_Call) Run(run func(ctx context.Context, arg repo_users.UpdateParams)) *UsersCustomQuerier_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_Update_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_Update_Call) RunAndReturn(run func(context.Context, repo_users.UpdateParams) (*models.User, error)) *UsersCustomQuerier_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBanned provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) UpdateBanned(ctx context.Context, arg repo_users.UpdateBannedParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBanned")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateBannedParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateBannedParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.UpdateBannedParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_UpdateBanned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBanned'
type UsersCustomQuerier_UpdateBanned_Call struct {
	*mock.Call
}

// UpdateBanned is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateBannedParams
func (_e *UsersCustomQuerier_Expecter) UpdateBanned(ctx interface{}, arg interface{}) *UsersCustomQuerier_UpdateBanned_Call {
	return &UsersCustomQuerier_UpdateBanned_Call{Call: _e.mock.On("UpdateBanned", ctx, arg)}
}

func (_c *UsersCustomQuerier_UpdateBanned_Call) Run(run func(ctx context.Context, arg repo_users.UpdateBannedParams)) *UsersCustomQuerier_UpdateBanned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateBannedParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateBanned_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_UpdateBanned_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_UpdateBanned_Call) RunAndReturn(run func(context.Context, repo_users.UpdateBannedParams) (*models.User, error)) *UsersCustomQuerier_UpdateBanned_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDvToken provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) UpdateDvToken(ctx context.Context, arg repo_users.UpdateDvTokenParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDvToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateDvTokenParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersCustomQuerier_UpdateDvToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDvToken'
type UsersCustomQuerier_UpdateDvToken_Call struct {
	*mock.Call
}

// UpdateDvToken is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateDvTokenParams
func (_e *UsersCustomQuerier_Expecter) UpdateDvToken(ctx interface{}, arg interface{}) *UsersCustomQuerier_UpdateDvToken_Call {
	return &UsersCustomQuerier_UpdateDvToken_Call{Call: _e.mock.On("UpdateDvToken", ctx, arg)}
}

func (_c *UsersCustomQuerier_UpdateDvToken_Call) Run(run func(ctx context.Context, arg repo_users.UpdateDvTokenParams)) *UsersCustomQuerier_UpdateDvToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateDvTokenParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateDvToken_Call) Return(_a0 error) *UsersCustomQuerier_UpdateDvToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersCustomQuerier_UpdateDvToken_Call) RunAndReturn(run func(context.Context, repo_users.UpdateDvTokenParams) error) *UsersCustomQuerier_UpdateDvToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmailVerifiedAt provides a mock function with given fields: ctx, id
func (_m *UsersCustomQuerier) UpdateEmailVerifiedAt(ctx context.Context, id uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailVerifiedAt")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_UpdateEmailVerifiedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailVerifiedAt'
type UsersCustomQuerier_UpdateEmailVerifiedAt_Call struct {
	*mock.Call
}

// UpdateEmailVerifiedAt is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UsersCustomQuerier_Expecter) UpdateEmailVerifiedAt(ctx interface{}, id interface{}) *UsersCustomQuerier_UpdateEmailVerifiedAt_Call {
	return &UsersCustomQuerier_UpdateEmailVerifiedAt_Call{Call: _e.mock.On("UpdateEmailVerifiedAt", ctx, id)}
}

func (_c *UsersCustomQuerier_UpdateEmailVerifiedAt_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UsersCustomQuerier_UpdateEmailVerifiedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateEmailVerifiedAt_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_UpdateEmailVerifiedAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_UpdateEmailVerifiedAt_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.User, error)) *UsersCustomQuerier_UpdateEmailVerifiedAt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateExchange provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) UpdateExchange(ctx context.Context, arg repo_users.UpdateExchangeParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExchange")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateExchangeParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateExchangeParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.UpdateExchangeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_UpdateExchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateExchange'
type UsersCustomQuerier_UpdateExchange_Call struct {
	*mock.Call
}

// UpdateExchange is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateExchangeParams
func (_e *UsersCustomQuerier_Expecter) UpdateExchange(ctx interface{}, arg interface{}) *UsersCustomQuerier_UpdateExchange_Call {
	return &UsersCustomQuerier_UpdateExchange_Call{Call: _e.mock.On("UpdateExchange", ctx, arg)}
}

func (_c *UsersCustomQuerier_UpdateExchange_Call) Run(run func(ctx context.Context, arg repo_users.UpdateExchangeParams)) *UsersCustomQuerier_UpdateExchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateExchangeParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateExchange_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_UpdateExchange_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_UpdateExchange_Call) RunAndReturn(run func(context.Context, repo_users.UpdateExchangeParams) (*models.User, error)) *UsersCustomQuerier_UpdateExchange_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProcessingOwnerId provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) UpdateProcessingOwnerId(ctx context.Context, arg repo_users.UpdateProcessingOwnerIdParams) (*models.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcessingOwnerId")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateProcessingOwnerIdParams) (*models.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateProcessingOwnerIdParams) *models.User); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_users.UpdateProcessingOwnerIdParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersCustomQuerier_UpdateProcessingOwnerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProcessingOwnerId'
type UsersCustomQuerier_UpdateProcessingOwnerId_Call struct {
	*mock.Call
}

// UpdateProcessingOwnerId is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateProcessingOwnerIdParams
func (_e *UsersCustomQuerier_Expecter) UpdateProcessingOwnerId(ctx interface{}, arg interface{}) *UsersCustomQuerier_UpdateProcessingOwnerId_Call {
	return &UsersCustomQuerier_UpdateProcessingOwnerId_Call{Call: _e.mock.On("UpdateProcessingOwnerId", ctx, arg)}
}

func (_c *UsersCustomQuerier_UpdateProcessingOwnerId_Call) Run(run func(ctx context.Context, arg repo_users.UpdateProcessingOwnerIdParams)) *UsersCustomQuerier_UpdateProcessingOwnerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateProcessingOwnerIdParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateProcessingOwnerId_Call) Return(_a0 *models.User, _a1 error) *UsersCustomQuerier_UpdateProcessingOwnerId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersCustomQuerier_UpdateProcessingOwnerId_Call) RunAndReturn(run func(context.Context, repo_users.UpdateProcessingOwnerIdParams) (*models.User, error)) *UsersCustomQuerier_UpdateProcessingOwnerId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRate provides a mock function with given fields: ctx, arg
func (_m *UsersCustomQuerier) UpdateRate(ctx context.Context, arg repo_users.UpdateRateParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_users.UpdateRateParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersCustomQuerier_UpdateRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRate'
type UsersCustomQuerier_UpdateRate_Call struct {
	*mock.Call
}

// UpdateRate is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_users.UpdateRateParams
func (_e *UsersCustomQuerier_Expecter) UpdateRate(ctx interface{}, arg interface{}) *UsersCustomQuerier_UpdateRate_Call {
	return &UsersCustomQuerier_UpdateRate_Call{Call: _e.mock.On("UpdateRate", ctx, arg)}
}

func (_c *UsersCustomQuerier_UpdateRate_Call) Run(run func(ctx context.Context, arg repo_users.UpdateRateParams)) *UsersCustomQuerier_UpdateRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_users.UpdateRateParams))
	})
	return _c
}

func (_c *UsersCustomQuerier_UpdateRate_Call) Return(_a0 error) *UsersCustomQuerier_UpdateRate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersCustomQuerier_UpdateRate_Call) RunAndReturn(run func(context.Context, repo_users.UpdateRateParams) error) *UsersCustomQuerier_UpdateRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersCustomQuerier creates a new instance of UsersCustomQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersCustomQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersCustomQuerier {
	mock := &UsersCustomQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
