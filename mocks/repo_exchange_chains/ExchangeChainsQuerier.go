// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/dv-net/dv-merchant/internal/models"

	mock "github.com/stretchr/testify/mock"

	repo_exchange_chains "github.com/dv-net/dv-merchant/internal/storage/repos/repo_exchange_chains"

	uuid "github.com/google/uuid"
)

// ExchangeChainsQuerier is an autogenerated mock type for the Querier type
type ExchangeChainsQuerier struct {
	mock.Mock
}

type ExchangeChainsQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *ExchangeChainsQuerier) EXPECT() *ExchangeChainsQuerier_Expecter {
	return &ExchangeChainsQuerier_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *ExchangeChainsQuerier) GetAll(ctx context.Context) ([]*repo_exchange_chains.GetAllRow, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*repo_exchange_chains.GetAllRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*repo_exchange_chains.GetAllRow, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*repo_exchange_chains.GetAllRow); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repo_exchange_chains.GetAllRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ExchangeChainsQuerier_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExchangeChainsQuerier_Expecter) GetAll(ctx interface{}) *ExchangeChainsQuerier_GetAll_Call {
	return &ExchangeChainsQuerier_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ExchangeChainsQuerier_GetAll_Call) Run(run func(ctx context.Context)) *ExchangeChainsQuerier_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetAll_Call) Return(_a0 []*repo_exchange_chains.GetAllRow, _a1 error) *ExchangeChainsQuerier_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetAll_Call) RunAndReturn(run func(context.Context) ([]*repo_exchange_chains.GetAllRow, error)) *ExchangeChainsQuerier_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ExchangeChainsQuerier) GetByID(ctx context.Context, id uuid.UUID) (*models.ExchangeChain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.ExchangeChain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ExchangeChain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ExchangeChain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExchangeChain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ExchangeChainsQuerier_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ExchangeChainsQuerier_Expecter) GetByID(ctx interface{}, id interface{}) *ExchangeChainsQuerier_GetByID_Call {
	return &ExchangeChainsQuerier_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ExchangeChainsQuerier_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ExchangeChainsQuerier_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetByID_Call) Return(_a0 *models.ExchangeChain, _a1 error) *ExchangeChainsQuerier_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.ExchangeChain, error)) *ExchangeChainsQuerier_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrencyIDByParams provides a mock function with given fields: ctx, arg
func (_m *ExchangeChainsQuerier) GetCurrencyIDByParams(ctx context.Context, arg repo_exchange_chains.GetCurrencyIDByParamsParams) (string, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyIDByParams")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetCurrencyIDByParamsParams) (string, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetCurrencyIDByParamsParams) string); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_exchange_chains.GetCurrencyIDByParamsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetCurrencyIDByParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencyIDByParams'
type ExchangeChainsQuerier_GetCurrencyIDByParams_Call struct {
	*mock.Call
}

// GetCurrencyIDByParams is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_exchange_chains.GetCurrencyIDByParamsParams
func (_e *ExchangeChainsQuerier_Expecter) GetCurrencyIDByParams(ctx interface{}, arg interface{}) *ExchangeChainsQuerier_GetCurrencyIDByParams_Call {
	return &ExchangeChainsQuerier_GetCurrencyIDByParams_Call{Call: _e.mock.On("GetCurrencyIDByParams", ctx, arg)}
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByParams_Call) Run(run func(ctx context.Context, arg repo_exchange_chains.GetCurrencyIDByParamsParams)) *ExchangeChainsQuerier_GetCurrencyIDByParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_exchange_chains.GetCurrencyIDByParamsParams))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByParams_Call) Return(_a0 string, _a1 error) *ExchangeChainsQuerier_GetCurrencyIDByParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByParams_Call) RunAndReturn(run func(context.Context, repo_exchange_chains.GetCurrencyIDByParamsParams) (string, error)) *ExchangeChainsQuerier_GetCurrencyIDByParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrencyIDBySlugAndChain provides a mock function with given fields: ctx, arg
func (_m *ExchangeChainsQuerier) GetCurrencyIDBySlugAndChain(ctx context.Context, arg repo_exchange_chains.GetCurrencyIDBySlugAndChainParams) (string, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyIDBySlugAndChain")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetCurrencyIDBySlugAndChainParams) (string, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetCurrencyIDBySlugAndChainParams) string); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_exchange_chains.GetCurrencyIDBySlugAndChainParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencyIDBySlugAndChain'
type ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call struct {
	*mock.Call
}

// GetCurrencyIDBySlugAndChain is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_exchange_chains.GetCurrencyIDBySlugAndChainParams
func (_e *ExchangeChainsQuerier_Expecter) GetCurrencyIDBySlugAndChain(ctx interface{}, arg interface{}) *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call {
	return &ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call{Call: _e.mock.On("GetCurrencyIDBySlugAndChain", ctx, arg)}
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call) Run(run func(ctx context.Context, arg repo_exchange_chains.GetCurrencyIDBySlugAndChainParams)) *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_exchange_chains.GetCurrencyIDBySlugAndChainParams))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call) Return(_a0 string, _a1 error) *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call) RunAndReturn(run func(context.Context, repo_exchange_chains.GetCurrencyIDBySlugAndChainParams) (string, error)) *ExchangeChainsQuerier_GetCurrencyIDBySlugAndChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrencyIDByTicker provides a mock function with given fields: ctx, ticker
func (_m *ExchangeChainsQuerier) GetCurrencyIDByTicker(ctx context.Context, ticker string) (string, error) {
	ret := _m.Called(ctx, ticker)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrencyIDByTicker")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ticker)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ticker)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetCurrencyIDByTicker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrencyIDByTicker'
type ExchangeChainsQuerier_GetCurrencyIDByTicker_Call struct {
	*mock.Call
}

// GetCurrencyIDByTicker is a helper method to define mock.On call
//   - ctx context.Context
//   - ticker string
func (_e *ExchangeChainsQuerier_Expecter) GetCurrencyIDByTicker(ctx interface{}, ticker interface{}) *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call {
	return &ExchangeChainsQuerier_GetCurrencyIDByTicker_Call{Call: _e.mock.On("GetCurrencyIDByTicker", ctx, ticker)}
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call) Run(run func(ctx context.Context, ticker string)) *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call) Return(_a0 string, _a1 error) *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call) RunAndReturn(run func(context.Context, string) (string, error)) *ExchangeChainsQuerier_GetCurrencyIDByTicker_Call {
	_c.Call.Return(run)
	return _c
}

// GetEnabledCurrencies provides a mock function with given fields: ctx, slug
func (_m *ExchangeChainsQuerier) GetEnabledCurrencies(ctx context.Context, slug models.ExchangeSlug) ([]*repo_exchange_chains.GetEnabledCurrenciesRow, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledCurrencies")
	}

	var r0 []*repo_exchange_chains.GetEnabledCurrenciesRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug) ([]*repo_exchange_chains.GetEnabledCurrenciesRow, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug) []*repo_exchange_chains.GetEnabledCurrenciesRow); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repo_exchange_chains.GetEnabledCurrenciesRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExchangeSlug) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetEnabledCurrencies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabledCurrencies'
type ExchangeChainsQuerier_GetEnabledCurrencies_Call struct {
	*mock.Call
}

// GetEnabledCurrencies is a helper method to define mock.On call
//   - ctx context.Context
//   - slug models.ExchangeSlug
func (_e *ExchangeChainsQuerier_Expecter) GetEnabledCurrencies(ctx interface{}, slug interface{}) *ExchangeChainsQuerier_GetEnabledCurrencies_Call {
	return &ExchangeChainsQuerier_GetEnabledCurrencies_Call{Call: _e.mock.On("GetEnabledCurrencies", ctx, slug)}
}

func (_c *ExchangeChainsQuerier_GetEnabledCurrencies_Call) Run(run func(ctx context.Context, slug models.ExchangeSlug)) *ExchangeChainsQuerier_GetEnabledCurrencies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExchangeSlug))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetEnabledCurrencies_Call) Return(_a0 []*repo_exchange_chains.GetEnabledCurrenciesRow, _a1 error) *ExchangeChainsQuerier_GetEnabledCurrencies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetEnabledCurrencies_Call) RunAndReturn(run func(context.Context, models.ExchangeSlug) ([]*repo_exchange_chains.GetEnabledCurrenciesRow, error)) *ExchangeChainsQuerier_GetEnabledCurrencies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTickerByCurrencyID provides a mock function with given fields: ctx, arg
func (_m *ExchangeChainsQuerier) GetTickerByCurrencyID(ctx context.Context, arg repo_exchange_chains.GetTickerByCurrencyIDParams) (string, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetTickerByCurrencyID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetTickerByCurrencyIDParams) (string, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo_exchange_chains.GetTickerByCurrencyIDParams) string); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo_exchange_chains.GetTickerByCurrencyIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeChainsQuerier_GetTickerByCurrencyID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTickerByCurrencyID'
type ExchangeChainsQuerier_GetTickerByCurrencyID_Call struct {
	*mock.Call
}

// GetTickerByCurrencyID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg repo_exchange_chains.GetTickerByCurrencyIDParams
func (_e *ExchangeChainsQuerier_Expecter) GetTickerByCurrencyID(ctx interface{}, arg interface{}) *ExchangeChainsQuerier_GetTickerByCurrencyID_Call {
	return &ExchangeChainsQuerier_GetTickerByCurrencyID_Call{Call: _e.mock.On("GetTickerByCurrencyID", ctx, arg)}
}

func (_c *ExchangeChainsQuerier_GetTickerByCurrencyID_Call) Run(run func(ctx context.Context, arg repo_exchange_chains.GetTickerByCurrencyIDParams)) *ExchangeChainsQuerier_GetTickerByCurrencyID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo_exchange_chains.GetTickerByCurrencyIDParams))
	})
	return _c
}

func (_c *ExchangeChainsQuerier_GetTickerByCurrencyID_Call) Return(_a0 string, _a1 error) *ExchangeChainsQuerier_GetTickerByCurrencyID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExchangeChainsQuerier_GetTickerByCurrencyID_Call) RunAndReturn(run func(context.Context, repo_exchange_chains.GetTickerByCurrencyIDParams) (string, error)) *ExchangeChainsQuerier_GetTickerByCurrencyID_Call {
	_c.Call.Return(run)
	return _c
}

// NewExchangeChainsQuerier creates a new instance of ExchangeChainsQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExchangeChainsQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExchangeChainsQuerier {
	mock := &ExchangeChainsQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
