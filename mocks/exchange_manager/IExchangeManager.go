// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	exchange_manager "github.com/dv-net/dv-merchant/internal/service/exchange_manager"

	mock "github.com/stretchr/testify/mock"

	models "github.com/dv-net/dv-merchant/internal/models"

	uuid "github.com/google/uuid"
)

// IExchangeManager is an autogenerated mock type for the IExchangeManager type
type IExchangeManager struct {
	mock.Mock
}

type IExchangeManager_Expecter struct {
	mock *mock.Mock
}

func (_m *IExchangeManager) EXPECT() *IExchangeManager_Expecter {
	return &IExchangeManager_Expecter{mock: &_m.Mock}
}

// CreateDriver provides a mock function with given fields: ctx, slug, apiKey, secretKey, passphrase
func (_m *IExchangeManager) CreateDriver(ctx context.Context, slug models.ExchangeSlug, apiKey string, secretKey string, passphrase string) (exchange_manager.IExchangeClient, error) {
	ret := _m.Called(ctx, slug, apiKey, secretKey, passphrase)

	if len(ret) == 0 {
		panic("no return value specified for CreateDriver")
	}

	var r0 exchange_manager.IExchangeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug, string, string, string) (exchange_manager.IExchangeClient, error)); ok {
		return rf(ctx, slug, apiKey, secretKey, passphrase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug, string, string, string) exchange_manager.IExchangeClient); ok {
		r0 = rf(ctx, slug, apiKey, secretKey, passphrase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exchange_manager.IExchangeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExchangeSlug, string, string, string) error); ok {
		r1 = rf(ctx, slug, apiKey, secretKey, passphrase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IExchangeManager_CreateDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDriver'
type IExchangeManager_CreateDriver_Call struct {
	*mock.Call
}

// CreateDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - slug models.ExchangeSlug
//   - apiKey string
//   - secretKey string
//   - passphrase string
func (_e *IExchangeManager_Expecter) CreateDriver(ctx interface{}, slug interface{}, apiKey interface{}, secretKey interface{}, passphrase interface{}) *IExchangeManager_CreateDriver_Call {
	return &IExchangeManager_CreateDriver_Call{Call: _e.mock.On("CreateDriver", ctx, slug, apiKey, secretKey, passphrase)}
}

func (_c *IExchangeManager_CreateDriver_Call) Run(run func(ctx context.Context, slug models.ExchangeSlug, apiKey string, secretKey string, passphrase string)) *IExchangeManager_CreateDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExchangeSlug), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *IExchangeManager_CreateDriver_Call) Return(_a0 exchange_manager.IExchangeClient, _a1 error) *IExchangeManager_CreateDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IExchangeManager_CreateDriver_Call) RunAndReturn(run func(context.Context, models.ExchangeSlug, string, string, string) (exchange_manager.IExchangeClient, error)) *IExchangeManager_CreateDriver_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultDriver provides a mock function with given fields: ctx, userID
func (_m *IExchangeManager) GetDefaultDriver(ctx context.Context, userID uuid.UUID) (exchange_manager.IExchangeClient, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultDriver")
	}

	var r0 exchange_manager.IExchangeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (exchange_manager.IExchangeClient, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) exchange_manager.IExchangeClient); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exchange_manager.IExchangeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IExchangeManager_GetDefaultDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultDriver'
type IExchangeManager_GetDefaultDriver_Call struct {
	*mock.Call
}

// GetDefaultDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *IExchangeManager_Expecter) GetDefaultDriver(ctx interface{}, userID interface{}) *IExchangeManager_GetDefaultDriver_Call {
	return &IExchangeManager_GetDefaultDriver_Call{Call: _e.mock.On("GetDefaultDriver", ctx, userID)}
}

func (_c *IExchangeManager_GetDefaultDriver_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *IExchangeManager_GetDefaultDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *IExchangeManager_GetDefaultDriver_Call) Return(_a0 exchange_manager.IExchangeClient, _a1 error) *IExchangeManager_GetDefaultDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IExchangeManager_GetDefaultDriver_Call) RunAndReturn(run func(context.Context, uuid.UUID) (exchange_manager.IExchangeClient, error)) *IExchangeManager_GetDefaultDriver_Call {
	_c.Call.Return(run)
	return _c
}

// GetDriver provides a mock function with given fields: ctx, slug, userID
func (_m *IExchangeManager) GetDriver(ctx context.Context, slug models.ExchangeSlug, userID uuid.UUID) (exchange_manager.IExchangeClient, error) {
	ret := _m.Called(ctx, slug, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDriver")
	}

	var r0 exchange_manager.IExchangeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug, uuid.UUID) (exchange_manager.IExchangeClient, error)); ok {
		return rf(ctx, slug, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug, uuid.UUID) exchange_manager.IExchangeClient); ok {
		r0 = rf(ctx, slug, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exchange_manager.IExchangeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExchangeSlug, uuid.UUID) error); ok {
		r1 = rf(ctx, slug, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IExchangeManager_GetDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDriver'
type IExchangeManager_GetDriver_Call struct {
	*mock.Call
}

// GetDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - slug models.ExchangeSlug
//   - userID uuid.UUID
func (_e *IExchangeManager_Expecter) GetDriver(ctx interface{}, slug interface{}, userID interface{}) *IExchangeManager_GetDriver_Call {
	return &IExchangeManager_GetDriver_Call{Call: _e.mock.On("GetDriver", ctx, slug, userID)}
}

func (_c *IExchangeManager_GetDriver_Call) Run(run func(ctx context.Context, slug models.ExchangeSlug, userID uuid.UUID)) *IExchangeManager_GetDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExchangeSlug), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *IExchangeManager_GetDriver_Call) Return(_a0 exchange_manager.IExchangeClient, _a1 error) *IExchangeManager_GetDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IExchangeManager_GetDriver_Call) RunAndReturn(run func(context.Context, models.ExchangeSlug, uuid.UUID) (exchange_manager.IExchangeClient, error)) *IExchangeManager_GetDriver_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicDriver provides a mock function with given fields: ctx, slug
func (_m *IExchangeManager) GetPublicDriver(ctx context.Context, slug models.ExchangeSlug) (exchange_manager.IExchangeClient, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicDriver")
	}

	var r0 exchange_manager.IExchangeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug) (exchange_manager.IExchangeClient, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ExchangeSlug) exchange_manager.IExchangeClient); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(exchange_manager.IExchangeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ExchangeSlug) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IExchangeManager_GetPublicDriver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicDriver'
type IExchangeManager_GetPublicDriver_Call struct {
	*mock.Call
}

// GetPublicDriver is a helper method to define mock.On call
//   - ctx context.Context
//   - slug models.ExchangeSlug
func (_e *IExchangeManager_Expecter) GetPublicDriver(ctx interface{}, slug interface{}) *IExchangeManager_GetPublicDriver_Call {
	return &IExchangeManager_GetPublicDriver_Call{Call: _e.mock.On("GetPublicDriver", ctx, slug)}
}

func (_c *IExchangeManager_GetPublicDriver_Call) Run(run func(ctx context.Context, slug models.ExchangeSlug)) *IExchangeManager_GetPublicDriver_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.ExchangeSlug))
	})
	return _c
}

func (_c *IExchangeManager_GetPublicDriver_Call) Return(_a0 exchange_manager.IExchangeClient, _a1 error) *IExchangeManager_GetPublicDriver_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IExchangeManager_GetPublicDriver_Call) RunAndReturn(run func(context.Context, models.ExchangeSlug) (exchange_manager.IExchangeClient, error)) *IExchangeManager_GetPublicDriver_Call {
	_c.Call.Return(run)
	return _c
}

// NewIExchangeManager creates a new instance of IExchangeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExchangeManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExchangeManager {
	mock := &IExchangeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
