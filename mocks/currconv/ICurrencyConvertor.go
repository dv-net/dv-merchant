// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	currconv "github.com/dv-net/dv-merchant/internal/service/currconv"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"
)

// ICurrencyConvertor is an autogenerated mock type for the ICurrencyConvertor type
type ICurrencyConvertor struct {
	mock.Mock
}

type ICurrencyConvertor_Expecter struct {
	mock *mock.Mock
}

func (_m *ICurrencyConvertor) EXPECT() *ICurrencyConvertor_Expecter {
	return &ICurrencyConvertor_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: ctx, dto
func (_m *ICurrencyConvertor) Convert(ctx context.Context, dto currconv.ConvertDTO) (decimal.Decimal, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, currconv.ConvertDTO) (decimal.Decimal, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, currconv.ConvertDTO) decimal.Decimal); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, currconv.ConvertDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ICurrencyConvertor_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type ICurrencyConvertor_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - ctx context.Context
//   - dto currconv.ConvertDTO
func (_e *ICurrencyConvertor_Expecter) Convert(ctx interface{}, dto interface{}) *ICurrencyConvertor_Convert_Call {
	return &ICurrencyConvertor_Convert_Call{Call: _e.mock.On("Convert", ctx, dto)}
}

func (_c *ICurrencyConvertor_Convert_Call) Run(run func(ctx context.Context, dto currconv.ConvertDTO)) *ICurrencyConvertor_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(currconv.ConvertDTO))
	})
	return _c
}

func (_c *ICurrencyConvertor_Convert_Call) Return(_a0 decimal.Decimal, _a1 error) *ICurrencyConvertor_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ICurrencyConvertor_Convert_Call) RunAndReturn(run func(context.Context, currconv.ConvertDTO) (decimal.Decimal, error)) *ICurrencyConvertor_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewICurrencyConvertor creates a new instance of ICurrencyConvertor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICurrencyConvertor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICurrencyConvertor {
	mock := &ICurrencyConvertor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
