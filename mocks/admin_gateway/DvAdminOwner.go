// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	admin_requests "github.com/dv-net/dv-merchant/pkg/admin_gateway/requests"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/dv-net/dv-merchant/pkg/admin_gateway/responses"
)

// DvAdminOwner is an autogenerated mock type for the IOwner type
type DvAdminOwner struct {
	mock.Mock
}

type DvAdminOwner_Expecter struct {
	mock *mock.Mock
}

func (_m *DvAdminOwner) EXPECT() *DvAdminOwner_Expecter {
	return &DvAdminOwner_Expecter{mock: &_m.Mock}
}

// GetAuthCode provides a mock function with given fields: ctx, req
func (_m *DvAdminOwner) GetAuthCode(ctx context.Context, req admin_requests.InitAuthRequest) (*responses.InitAuthResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCode")
	}

	var r0 *responses.InitAuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, admin_requests.InitAuthRequest) (*responses.InitAuthResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, admin_requests.InitAuthRequest) *responses.InitAuthResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.InitAuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, admin_requests.InitAuthRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DvAdminOwner_GetAuthCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthCode'
type DvAdminOwner_GetAuthCode_Call struct {
	*mock.Call
}

// GetAuthCode is a helper method to define mock.On call
//   - ctx context.Context
//   - req admin_requests.InitAuthRequest
func (_e *DvAdminOwner_Expecter) GetAuthCode(ctx interface{}, req interface{}) *DvAdminOwner_GetAuthCode_Call {
	return &DvAdminOwner_GetAuthCode_Call{Call: _e.mock.On("GetAuthCode", ctx, req)}
}

func (_c *DvAdminOwner_GetAuthCode_Call) Run(run func(ctx context.Context, req admin_requests.InitAuthRequest)) *DvAdminOwner_GetAuthCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(admin_requests.InitAuthRequest))
	})
	return _c
}

func (_c *DvAdminOwner_GetAuthCode_Call) Return(_a0 *responses.InitAuthResponse, _a1 error) *DvAdminOwner_GetAuthCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DvAdminOwner_GetAuthCode_Call) RunAndReturn(run func(context.Context, admin_requests.InitAuthRequest) (*responses.InitAuthResponse, error)) *DvAdminOwner_GetAuthCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwnerData provides a mock function with given fields: ctx, token
func (_m *DvAdminOwner) GetOwnerData(ctx context.Context, token string) (*responses.OwnerDataResponse, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetOwnerData")
	}

	var r0 *responses.OwnerDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*responses.OwnerDataResponse, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *responses.OwnerDataResponse); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.OwnerDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DvAdminOwner_GetOwnerData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerData'
type DvAdminOwner_GetOwnerData_Call struct {
	*mock.Call
}

// GetOwnerData is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *DvAdminOwner_Expecter) GetOwnerData(ctx interface{}, token interface{}) *DvAdminOwner_GetOwnerData_Call {
	return &DvAdminOwner_GetOwnerData_Call{Call: _e.mock.On("GetOwnerData", ctx, token)}
}

func (_c *DvAdminOwner_GetOwnerData_Call) Run(run func(ctx context.Context, token string)) *DvAdminOwner_GetOwnerData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DvAdminOwner_GetOwnerData_Call) Return(_a0 *responses.OwnerDataResponse, _a1 error) *DvAdminOwner_GetOwnerData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DvAdminOwner_GetOwnerData_Call) RunAndReturn(run func(context.Context, string) (*responses.OwnerDataResponse, error)) *DvAdminOwner_GetOwnerData_Call {
	_c.Call.Return(run)
	return _c
}

// InitOwnerTg provides a mock function with given fields: ctx, ownerToken
func (_m *DvAdminOwner) InitOwnerTg(ctx context.Context, ownerToken string) (*responses.InitOwnerTgResponse, error) {
	ret := _m.Called(ctx, ownerToken)

	if len(ret) == 0 {
		panic("no return value specified for InitOwnerTg")
	}

	var r0 *responses.InitOwnerTgResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*responses.InitOwnerTgResponse, error)); ok {
		return rf(ctx, ownerToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *responses.InitOwnerTgResponse); ok {
		r0 = rf(ctx, ownerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.InitOwnerTgResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ownerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DvAdminOwner_InitOwnerTg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitOwnerTg'
type DvAdminOwner_InitOwnerTg_Call struct {
	*mock.Call
}

// InitOwnerTg is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerToken string
func (_e *DvAdminOwner_Expecter) InitOwnerTg(ctx interface{}, ownerToken interface{}) *DvAdminOwner_InitOwnerTg_Call {
	return &DvAdminOwner_InitOwnerTg_Call{Call: _e.mock.On("InitOwnerTg", ctx, ownerToken)}
}

func (_c *DvAdminOwner_InitOwnerTg_Call) Run(run func(ctx context.Context, ownerToken string)) *DvAdminOwner_InitOwnerTg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DvAdminOwner_InitOwnerTg_Call) Return(_a0 *responses.InitOwnerTgResponse, _a1 error) *DvAdminOwner_InitOwnerTg_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DvAdminOwner_InitOwnerTg_Call) RunAndReturn(run func(context.Context, string) (*responses.InitOwnerTgResponse, error)) *DvAdminOwner_InitOwnerTg_Call {
	_c.Call.Return(run)
	return _c
}

// NewDvAdminOwner creates a new instance of DvAdminOwner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDvAdminOwner(t interface {
	mock.TestingT
	Cleanup(func())
}) *DvAdminOwner {
	mock := &DvAdminOwner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
