// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/dv-net/dv-merchant/internal/models"

	mock "github.com/stretchr/testify/mock"

	repos "github.com/dv-net/dv-merchant/internal/storage/repos"

	setting "github.com/dv-net/dv-merchant/internal/service/setting"

	settings "github.com/dv-net/dv-merchant/internal/settings"
)

// ISettingService is an autogenerated mock type for the ISettingService type
type ISettingService struct {
	mock.Mock
}

type ISettingService_Expecter struct {
	mock *mock.Mock
}

func (_m *ISettingService) EXPECT() *ISettingService_Expecter {
	return &ISettingService_Expecter{mock: &_m.Mock}
}

// GetAvailableModelSettings provides a mock function with given fields: ctx, model
func (_m *ISettingService) GetAvailableModelSettings(ctx context.Context, model setting.IModelSetting) ([]setting.Dto, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableModelSettings")
	}

	var r0 []setting.Dto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, setting.IModelSetting) ([]setting.Dto, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, setting.IModelSetting) []setting.Dto); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]setting.Dto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, setting.IModelSetting) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetAvailableModelSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableModelSettings'
type ISettingService_GetAvailableModelSettings_Call struct {
	*mock.Call
}

// GetAvailableModelSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - model setting.IModelSetting
func (_e *ISettingService_Expecter) GetAvailableModelSettings(ctx interface{}, model interface{}) *ISettingService_GetAvailableModelSettings_Call {
	return &ISettingService_GetAvailableModelSettings_Call{Call: _e.mock.On("GetAvailableModelSettings", ctx, model)}
}

func (_c *ISettingService_GetAvailableModelSettings_Call) Run(run func(ctx context.Context, model setting.IModelSetting)) *ISettingService_GetAvailableModelSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(setting.IModelSetting))
	})
	return _c
}

func (_c *ISettingService_GetAvailableModelSettings_Call) Return(_a0 []setting.Dto, _a1 error) *ISettingService_GetAvailableModelSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetAvailableModelSettings_Call) RunAndReturn(run func(context.Context, setting.IModelSetting) ([]setting.Dto, error)) *ISettingService_GetAvailableModelSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailerSettings provides a mock function with given fields: ctx
func (_m *ISettingService) GetMailerSettings(ctx context.Context) (*settings.MailerSettings, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMailerSettings")
	}

	var r0 *settings.MailerSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*settings.MailerSettings, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *settings.MailerSettings); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*settings.MailerSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetMailerSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailerSettings'
type ISettingService_GetMailerSettings_Call struct {
	*mock.Call
}

// GetMailerSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISettingService_Expecter) GetMailerSettings(ctx interface{}) *ISettingService_GetMailerSettings_Call {
	return &ISettingService_GetMailerSettings_Call{Call: _e.mock.On("GetMailerSettings", ctx)}
}

func (_c *ISettingService_GetMailerSettings_Call) Run(run func(ctx context.Context)) *ISettingService_GetMailerSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISettingService_GetMailerSettings_Call) Return(_a0 *settings.MailerSettings, _a1 error) *ISettingService_GetMailerSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetMailerSettings_Call) RunAndReturn(run func(context.Context) (*settings.MailerSettings, error)) *ISettingService_GetMailerSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelSetting provides a mock function with given fields: ctx, name, model
func (_m *ISettingService) GetModelSetting(ctx context.Context, name string, model setting.IModelSetting) (*models.Setting, error) {
	ret := _m.Called(ctx, name, model)

	if len(ret) == 0 {
		panic("no return value specified for GetModelSetting")
	}

	var r0 *models.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, setting.IModelSetting) (*models.Setting, error)); ok {
		return rf(ctx, name, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, setting.IModelSetting) *models.Setting); ok {
		r0 = rf(ctx, name, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, setting.IModelSetting) error); ok {
		r1 = rf(ctx, name, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetModelSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelSetting'
type ISettingService_GetModelSetting_Call struct {
	*mock.Call
}

// GetModelSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - model setting.IModelSetting
func (_e *ISettingService_Expecter) GetModelSetting(ctx interface{}, name interface{}, model interface{}) *ISettingService_GetModelSetting_Call {
	return &ISettingService_GetModelSetting_Call{Call: _e.mock.On("GetModelSetting", ctx, name, model)}
}

func (_c *ISettingService_GetModelSetting_Call) Run(run func(ctx context.Context, name string, model setting.IModelSetting)) *ISettingService_GetModelSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(setting.IModelSetting))
	})
	return _c
}

func (_c *ISettingService_GetModelSetting_Call) Return(_a0 *models.Setting, _a1 error) *ISettingService_GetModelSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetModelSetting_Call) RunAndReturn(run func(context.Context, string, setting.IModelSetting) (*models.Setting, error)) *ISettingService_GetModelSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootSetting provides a mock function with given fields: ctx, name
func (_m *ISettingService) GetRootSetting(ctx context.Context, name string) (*models.Setting, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRootSetting")
	}

	var r0 *models.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Setting, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Setting); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetRootSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootSetting'
type ISettingService_GetRootSetting_Call struct {
	*mock.Call
}

// GetRootSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ISettingService_Expecter) GetRootSetting(ctx interface{}, name interface{}) *ISettingService_GetRootSetting_Call {
	return &ISettingService_GetRootSetting_Call{Call: _e.mock.On("GetRootSetting", ctx, name)}
}

func (_c *ISettingService_GetRootSetting_Call) Run(run func(ctx context.Context, name string)) *ISettingService_GetRootSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ISettingService_GetRootSetting_Call) Return(_a0 *models.Setting, _a1 error) *ISettingService_GetRootSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetRootSetting_Call) RunAndReturn(run func(context.Context, string) (*models.Setting, error)) *ISettingService_GetRootSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootSettings provides a mock function with given fields: ctx
func (_m *ISettingService) GetRootSettings(ctx context.Context) ([]*models.Setting, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRootSettings")
	}

	var r0 []*models.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Setting, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Setting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetRootSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootSettings'
type ISettingService_GetRootSettings_Call struct {
	*mock.Call
}

// GetRootSettings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISettingService_Expecter) GetRootSettings(ctx interface{}) *ISettingService_GetRootSettings_Call {
	return &ISettingService_GetRootSettings_Call{Call: _e.mock.On("GetRootSettings", ctx)}
}

func (_c *ISettingService_GetRootSettings_Call) Run(run func(ctx context.Context)) *ISettingService_GetRootSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISettingService_GetRootSettings_Call) Return(_a0 []*models.Setting, _a1 error) *ISettingService_GetRootSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetRootSettings_Call) RunAndReturn(run func(context.Context) ([]*models.Setting, error)) *ISettingService_GetRootSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootSettingsByNames provides a mock function with given fields: ctx, names
func (_m *ISettingService) GetRootSettingsByNames(ctx context.Context, names []string) ([]*models.Setting, error) {
	ret := _m.Called(ctx, names)

	if len(ret) == 0 {
		panic("no return value specified for GetRootSettingsByNames")
	}

	var r0 []*models.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.Setting, error)); ok {
		return rf(ctx, names)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.Setting); ok {
		r0 = rf(ctx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetRootSettingsByNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootSettingsByNames'
type ISettingService_GetRootSettingsByNames_Call struct {
	*mock.Call
}

// GetRootSettingsByNames is a helper method to define mock.On call
//   - ctx context.Context
//   - names []string
func (_e *ISettingService_Expecter) GetRootSettingsByNames(ctx interface{}, names interface{}) *ISettingService_GetRootSettingsByNames_Call {
	return &ISettingService_GetRootSettingsByNames_Call{Call: _e.mock.On("GetRootSettingsByNames", ctx, names)}
}

func (_c *ISettingService_GetRootSettingsByNames_Call) Run(run func(ctx context.Context, names []string)) *ISettingService_GetRootSettingsByNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *ISettingService_GetRootSettingsByNames_Call) Return(_a0 []*models.Setting, _a1 error) *ISettingService_GetRootSettingsByNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetRootSettingsByNames_Call) RunAndReturn(run func(context.Context, []string) ([]*models.Setting, error)) *ISettingService_GetRootSettingsByNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootSettingsList provides a mock function with given fields: ctx
func (_m *ISettingService) GetRootSettingsList(ctx context.Context) ([]setting.Dto, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRootSettingsList")
	}

	var r0 []setting.Dto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]setting.Dto, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []setting.Dto); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]setting.Dto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_GetRootSettingsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootSettingsList'
type ISettingService_GetRootSettingsList_Call struct {
	*mock.Call
}

// GetRootSettingsList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ISettingService_Expecter) GetRootSettingsList(ctx interface{}) *ISettingService_GetRootSettingsList_Call {
	return &ISettingService_GetRootSettingsList_Call{Call: _e.mock.On("GetRootSettingsList", ctx)}
}

func (_c *ISettingService_GetRootSettingsList_Call) Run(run func(ctx context.Context)) *ISettingService_GetRootSettingsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ISettingService_GetRootSettingsList_Call) Return(_a0 []setting.Dto, _a1 error) *ISettingService_GetRootSettingsList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_GetRootSettingsList_Call) RunAndReturn(run func(context.Context) ([]setting.Dto, error)) *ISettingService_GetRootSettingsList_Call {
	_c.Call.Return(run)
	return _c
}

// Is2faRequired provides a mock function with given fields: name
func (_m *ISettingService) Is2faRequired(name string) bool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Is2faRequired")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ISettingService_Is2faRequired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Is2faRequired'
type ISettingService_Is2faRequired_Call struct {
	*mock.Call
}

// Is2faRequired is a helper method to define mock.On call
//   - name string
func (_e *ISettingService_Expecter) Is2faRequired(name interface{}) *ISettingService_Is2faRequired_Call {
	return &ISettingService_Is2faRequired_Call{Call: _e.mock.On("Is2faRequired", name)}
}

func (_c *ISettingService_Is2faRequired_Call) Run(run func(name string)) *ISettingService_Is2faRequired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ISettingService_Is2faRequired_Call) Return(_a0 bool) *ISettingService_Is2faRequired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ISettingService_Is2faRequired_Call) RunAndReturn(run func(string) bool) *ISettingService_Is2faRequired_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRootSetting provides a mock function with given fields: ctx, name
func (_m *ISettingService) RemoveRootSetting(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRootSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ISettingService_RemoveRootSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRootSetting'
type ISettingService_RemoveRootSetting_Call struct {
	*mock.Call
}

// RemoveRootSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ISettingService_Expecter) RemoveRootSetting(ctx interface{}, name interface{}) *ISettingService_RemoveRootSetting_Call {
	return &ISettingService_RemoveRootSetting_Call{Call: _e.mock.On("RemoveRootSetting", ctx, name)}
}

func (_c *ISettingService_RemoveRootSetting_Call) Run(run func(ctx context.Context, name string)) *ISettingService_RemoveRootSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ISettingService_RemoveRootSetting_Call) Return(_a0 error) *ISettingService_RemoveRootSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ISettingService_RemoveRootSetting_Call) RunAndReturn(run func(context.Context, string) error) *ISettingService_RemoveRootSetting_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveSetting provides a mock function with given fields: ctx, user, name
func (_m *ISettingService) RemoveSetting(ctx context.Context, user *models.User, name string) error {
	ret := _m.Called(ctx, user, name)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, string) error); ok {
		r0 = rf(ctx, user, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ISettingService_RemoveSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveSetting'
type ISettingService_RemoveSetting_Call struct {
	*mock.Call
}

// RemoveSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
//   - name string
func (_e *ISettingService_Expecter) RemoveSetting(ctx interface{}, user interface{}, name interface{}) *ISettingService_RemoveSetting_Call {
	return &ISettingService_RemoveSetting_Call{Call: _e.mock.On("RemoveSetting", ctx, user, name)}
}

func (_c *ISettingService_RemoveSetting_Call) Run(run func(ctx context.Context, user *models.User, name string)) *ISettingService_RemoveSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User), args[2].(string))
	})
	return _c
}

func (_c *ISettingService_RemoveSetting_Call) Return(_a0 error) *ISettingService_RemoveSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ISettingService_RemoveSetting_Call) RunAndReturn(run func(context.Context, *models.User, string) error) *ISettingService_RemoveSetting_Call {
	_c.Call.Return(run)
	return _c
}

// SetModelSetting provides a mock function with given fields: ctx, dto, option
func (_m *ISettingService) SetModelSetting(ctx context.Context, dto setting.UpdateDTO, option ...repos.Option) error {
	_va := make([]interface{}, len(option))
	for _i := range option {
		_va[_i] = option[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dto)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetModelSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, setting.UpdateDTO, ...repos.Option) error); ok {
		r0 = rf(ctx, dto, option...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ISettingService_SetModelSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetModelSetting'
type ISettingService_SetModelSetting_Call struct {
	*mock.Call
}

// SetModelSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - dto setting.UpdateDTO
//   - option ...repos.Option
func (_e *ISettingService_Expecter) SetModelSetting(ctx interface{}, dto interface{}, option ...interface{}) *ISettingService_SetModelSetting_Call {
	return &ISettingService_SetModelSetting_Call{Call: _e.mock.On("SetModelSetting",
		append([]interface{}{ctx, dto}, option...)...)}
}

func (_c *ISettingService_SetModelSetting_Call) Run(run func(ctx context.Context, dto setting.UpdateDTO, option ...repos.Option)) *ISettingService_SetModelSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]repos.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(repos.Option)
			}
		}
		run(args[0].(context.Context), args[1].(setting.UpdateDTO), variadicArgs...)
	})
	return _c
}

func (_c *ISettingService_SetModelSetting_Call) Return(_a0 error) *ISettingService_SetModelSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ISettingService_SetModelSetting_Call) RunAndReturn(run func(context.Context, setting.UpdateDTO, ...repos.Option) error) *ISettingService_SetModelSetting_Call {
	_c.Call.Return(run)
	return _c
}

// SetRootSetting provides a mock function with given fields: ctx, name, value
func (_m *ISettingService) SetRootSetting(ctx context.Context, name string, value string) (*models.Setting, error) {
	ret := _m.Called(ctx, name, value)

	if len(ret) == 0 {
		panic("no return value specified for SetRootSetting")
	}

	var r0 *models.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Setting, error)); ok {
		return rf(ctx, name, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Setting); ok {
		r0 = rf(ctx, name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Setting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ISettingService_SetRootSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRootSetting'
type ISettingService_SetRootSetting_Call struct {
	*mock.Call
}

// SetRootSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - value string
func (_e *ISettingService_Expecter) SetRootSetting(ctx interface{}, name interface{}, value interface{}) *ISettingService_SetRootSetting_Call {
	return &ISettingService_SetRootSetting_Call{Call: _e.mock.On("SetRootSetting", ctx, name, value)}
}

func (_c *ISettingService_SetRootSetting_Call) Run(run func(ctx context.Context, name string, value string)) *ISettingService_SetRootSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ISettingService_SetRootSetting_Call) Return(_a0 *models.Setting, _a1 error) *ISettingService_SetRootSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ISettingService_SetRootSetting_Call) RunAndReturn(run func(context.Context, string, string) (*models.Setting, error)) *ISettingService_SetRootSetting_Call {
	_c.Call.Return(run)
	return _c
}

// NewISettingService creates a new instance of ISettingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISettingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISettingService {
	mock := &ISettingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
