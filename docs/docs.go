// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "DV Support",
            "email": "support@dv.net"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/admin/ban": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Issue ban to user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Issue ban to user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-BanUserResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/admin/invite": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invite user with role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Invite user with role",
                "parameters": [
                    {
                        "description": "Invite user with specific role",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InviteUserWithRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/admin/role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request to add user role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Add user role",
                "parameters": [
                    {
                        "description": "AddUserRoleRequest",
                        "name": "string",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AddUserRoleResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Request to remove user role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Remove user role",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "user",
                            "root",
                            "support",
                            "finance_manager"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "UserRoleDefault",
                            "UserRoleRoot",
                            "UserRoleSupport",
                            "UserRoleFinanceManager"
                        ],
                        "name": "user_role",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/admin/unban": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unban user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Unban user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-UnbanUserResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/admin/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "root",
                            "user"
                        ],
                        "type": "string",
                        "name": "roles",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-GetUsersResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/2fa/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches the secret needed for setting up Time-based One-Time Password (TOTP).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "2fa"
                ],
                "summary": "Retrieve 2FA authentication secret",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetTwoFactorAuthDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/2fa/confirm": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates the provided TOTP code against the stored secret to activate 2FA.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "2fa"
                ],
                "summary": "Confirm 2FA authentication",
                "parameters": [
                    {
                        "description": "Confirmation data",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfirmTwoFactorAuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/2fa/disable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deactivates 2FA, effectively removing the current TOTP secret.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "2fa"
                ],
                "summary": "Disable 2FA authentication",
                "parameters": [
                    {
                        "description": "Status data",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeTwoFactorAuthStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/aml/history": {
            "get": {
                "description": "Get AML-provider checks history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Get AML-provider checks history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AML-provider slug",
                        "name": "aml_provider_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "aml_bot",
                            "bit_ok"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "AMLSlugAMLBot",
                            "AMLSlugBitOK"
                        ],
                        "name": "provider_slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-AmlHistoryResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/aml/score-transaction": {
            "post": {
                "description": "Score transaction in specific AML-provider",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Score transaction in specific AML-provider",
                "parameters": [
                    {
                        "description": "Score transaction",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ScoreTxRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/aml/{aml_provider_slug}/currencies": {
            "get": {
                "description": "Get supported by AML-provider currencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Get supported by AML-provider currencies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AML-provider slug",
                        "name": "aml_provider_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_CurrencyShort"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/aml/{aml_provider_slug}/keys": {
            "get": {
                "description": "Get AML-provider user keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Get AML-provider keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AML-provider slug",
                        "name": "aml_provider_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_AMLKey"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "description": "Update or create AML-provider user keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Update AML-provider keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AML-provider slug",
                        "name": "aml_provider_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update AML keys",
                        "name": "update_keys",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserAMLKeys"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete AML-provider user keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AML"
                ],
                "summary": "Delete AML-provider keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AML-provider slug",
                        "name": "aml_provider_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/auth/login": {
            "post": {
                "description": "Auth a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Auth user",
                "parameters": [
                    {
                        "description": "Register account",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/auth/register": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Register account",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-RegisterUserResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/auth/register-root": {
            "post": {
                "description": "Register root user - available only for first user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register root user",
                "parameters": [
                    {
                        "description": "Register account",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-RegisterRootResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/console/auth-link": {
            "get": {
                "description": "Get link for auth in dvnet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DVnet"
                ],
                "summary": "Get link for auth in dvnet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AuthLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/console/owner-data": {
            "get": {
                "description": "Get system information about initialization, root user existence, registration status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-OwnerData"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/currencies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all Currencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get all Currencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_GetCurrencyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/currencies/rate/": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Currency rate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get Currency rate",
                "parameters": [
                    {
                        "description": "Rate scale",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_currency_request.UpdateCurrencyRateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/currencies/rate/{source}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Currency rate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get Currency rate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency Source example binance or coingate",
                        "name": "source",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ExchangeRate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/currencies/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Currency by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get Currency by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Currency ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetCurrencyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/deposit/summary/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load user deposits summary",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get deposits summary",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "currency_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "hour",
                            "day",
                            "week",
                            "month",
                            "quarter",
                            "year"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "StatisticsResolutionHour",
                            "StatisticsResolutionDay",
                            "StatisticsResolutionWeek",
                            "StatisticsResolutionMonth",
                            "StatisticsResolutionQuarter",
                            "StatisticsResolutionYear"
                        ],
                        "name": "resolution",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "store_uuids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_StatisticsDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/dictionaries/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dictionaries load",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dictionary"
                ],
                "summary": "Dictionaries load",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetDictionariesResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/:slug/balance": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get exchange balances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange balances",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeBalance"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/:slug/keys": {
            "post": {
                "description": "Update or create exchange user keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Update exchange keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update exchange keys",
                        "name": "update_keys",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeUpdateKeysRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete exchange user keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Delete exchange keys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/:slug/set": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set current exchange",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Set current exchange",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/:slug/test": {
            "get": {
                "description": "Route for ensure exchange correct set up",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Test exchange",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/:slug/user-pairs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user exchange pairs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get user exchange pairs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeUserPairResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update user exchange pairs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Update user exchange pairs",
                "parameters": [
                    {
                        "description": "Update exchange pairs",
                        "name": "update_pairs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeUpdatePairsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/list": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all available exchanges with keys",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "List exchanges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeWithKeysResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/exchange/test": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Test exchange API connection with provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Test exchange API connection",
                "parameters": [
                    {
                        "description": "Test connection request",
                        "name": "test_connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeTestConnectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/logs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Get available logs types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetMonitorTypesResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/logs/{slug}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "Get logs by slug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Monitor UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetMonitorTypesResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/notifications/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated notification history for the authenticated user with filtering options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user notification history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "user_verification",
                                "user_registration",
                                "user_password_reset",
                                "user_forgot_password",
                                "two_factor_authentication",
                                "external_wallet_requested",
                                "user_invite",
                                "user_email_reset",
                                "user_change_email",
                                "user_access_key_changed",
                                "user_authorization_from_new_device",
                                "user_remind_verification",
                                "user_update_setting_verification",
                                "user_test_email",
                                "user_crypto_receipt"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Notification types to filter by",
                        "name": "types",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "email",
                                "telegram"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Delivery channels to filter by",
                        "name": "channels",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from created date (RFC3339 format)",
                        "name": "created_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to created date (RFC3339 format)",
                        "name": "created_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from sent date (RFC3339 format)",
                        "name": "sent_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to sent date (RFC3339 format)",
                        "name": "sent_to",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Notification UUIDs to filter by",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Destinations to filter by",
                        "name": "destinations",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-NotificationHistoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/notifications/types": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get available notification types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get available notification types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-NotificationTypeListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/callback": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Processing callback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Processing callback",
                "parameters": [
                    {
                        "description": "Processing webhook",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProcessingWebhook"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/callback-url": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update callback URL from processing to backend",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Update callback URL from processing to backend",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-CallbackURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update callback URL from processing to backend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Update callback URL from processing to backend",
                "parameters": [
                    {
                        "description": "Chang processing callback domain",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_processing_request.UpdateProcessingCallbackDomain"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/init": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Perform processing registration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Register in processing",
                "parameters": [
                    {
                        "description": "Initialize processing",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InitializeProcessingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-InitProcessingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/list": {
            "get": {
                "description": "Get available processing addresses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Get available processing",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ProcessingListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/register-owner": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a root user in the processing system using provided mnemonic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Register root user in processing",
                "parameters": [
                    {
                        "description": "Mnemonic to register root user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_processing_request.MnemonicRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-github.com/dv-net/dv-merchant_internal_delivery_http_responses_processing_response_OwnerProcessingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/processing/wallets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get available processing wallets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Processing"
                ],
                "summary": "Get available processing wallets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ProcessingWalletWithAssets"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/receipts/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load receipts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Receipt"
                ],
                "summary": "Load receipts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ReceiptResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/receipts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load receipt",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Receipt"
                ],
                "summary": "Load receipt",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ReceiptResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/root-setting/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create or update root settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Create or update root settings",
                "parameters": [
                    {
                        "description": "Create or update root setting",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/search/{searchParam}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search tx or wallet information in system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Get wallet/tx data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-SearchByCriteriaResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/setting/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get root settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get root settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_SettingResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/setting/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List available root settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "List available root settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_github.com/dv-net/dv-merchant_internal_service_setting_Dto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load all user store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get store",
                "parameters": [
                    {
                        "description": "Create store",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateStoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_StoreResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create new store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Create store",
                "parameters": [
                    {
                        "description": "Create store",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateStoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/archived/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archived stores list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Archived stores list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Update store",
                "parameters": [
                    {
                        "description": "Update store",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateStoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/apikey": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create store api key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Create store api key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreAPIKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/apikey/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store api key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store api key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_StoreAPIKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/apikey/{apiKeyId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store api key status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Delete store api key status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Apikey ID",
                        "name": "apiKeyId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/apikey/{apiKeyId}/status": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store api key status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Update store api key status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Apikey ID",
                        "name": "apiKeyId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update status store api key",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAPIKeyStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreAPIKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Delete store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/currencies/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store currency",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store currency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store currency",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Update store currency",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update store currency",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateStoreCurrencyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/secret": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetch store webhook secret",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Fetch store webhook secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreSecretResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate store webhook secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Generate store webhook secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreSecretResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove store webhook secret",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Remove store webhook secret",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/transactions/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_StoreTransactionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/unarchive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Delete store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/webhooks/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store webhooks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_StoreWebhookResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create store webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Create store webhooks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create store webhook",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateStoreWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreWebhookResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/webhooks/{webhookId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store webhook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreWebhookResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Update store webhooks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create store webhook",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateStoreWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreWebhookResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Delete store webhooks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Webhook ID",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/store/{id}/whitelists/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load store whitelist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Load store whitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreWhitelistResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update store whitelist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Update store whitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update store whitelist",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateWhitelistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Patch store whitelist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Patch store whitelist",
                "parameters": [
                    {
                        "description": "Patch store whitelist",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PatchWhitelistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-StoreWhitelistResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/system/info": {
            "get": {
                "description": "Get system information about initialization, root user existence, registration status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-SystemInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/system/update/backend": {
            "post": {
                "description": "Update backend",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Update backend",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/system/update/processing": {
            "post": {
                "description": "Update processing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Update processing",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/system/version": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Application versions info with no cache",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Application versions info with no cache",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-VersionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transaction/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load user transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Load user transactions",
                "parameters": [
                    {
                        "enum": [
                            "arbitrum",
                            "bitcoin",
                            "bitcoincash",
                            "bsc",
                            "dogecoin",
                            "ethereum",
                            "litecoin",
                            "polygon",
                            "tron"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "BlockchainArbitrum",
                            "BlockchainBitcoin",
                            "BlockchainBitcoinCash",
                            "BlockchainBinanceSmartChain",
                            "BlockchainDogecoin",
                            "BlockchainEthereum",
                            "BlockchainLitecoin",
                            "BlockchainPolygon",
                            "BlockchainTron"
                        ],
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "currencies",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_address",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_system",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "min_amount_usd",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at_index",
                            "amount_usd",
                            "tx_hash",
                            "user_email"
                        ],
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "sort_direction",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "store_uuids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_address",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "transfer",
                            "deposit",
                            "withdrawal_from_processing"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionsTypeTransfer",
                            "TransactionsTypeDeposit",
                            "TransactionsTypeWithdrawalFromProcessing"
                        ],
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "wallet_address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_FindRow"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transaction/export": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download user transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Download user transactions",
                "parameters": [
                    {
                        "enum": [
                            "arbitrum",
                            "bitcoin",
                            "bitcoincash",
                            "bsc",
                            "dogecoin",
                            "ethereum",
                            "litecoin",
                            "polygon",
                            "tron"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "BlockchainArbitrum",
                            "BlockchainBitcoin",
                            "BlockchainBitcoinCash",
                            "BlockchainBinanceSmartChain",
                            "BlockchainDogecoin",
                            "BlockchainEthereum",
                            "BlockchainLitecoin",
                            "BlockchainPolygon",
                            "BlockchainTron"
                        ],
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "currencies",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_address",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_system",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "min_amount_usd",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "created_at_index",
                            "amount_usd",
                            "tx_hash",
                            "user_email"
                        ],
                        "type": "string",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "name": "sort_direction",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "store_uuids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_address",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "transfer",
                            "deposit",
                            "withdrawal_from_processing"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionsTypeTransfer",
                            "TransactionsTypeDeposit",
                            "TransactionsTypeWithdrawalFromProcessing"
                        ],
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "wallet_address",
                        "in": "query"
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transaction/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Load user transactions statistic by date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Load user transactions statistic by date",
                "parameters": [
                    {
                        "enum": [
                            "arbitrum",
                            "bitcoin",
                            "bitcoincash",
                            "bsc",
                            "dogecoin",
                            "ethereum",
                            "litecoin",
                            "polygon",
                            "tron"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "BlockchainArbitrum",
                            "BlockchainBitcoin",
                            "BlockchainBitcoinCash",
                            "BlockchainBinanceSmartChain",
                            "BlockchainDogecoin",
                            "BlockchainEthereum",
                            "BlockchainLitecoin",
                            "BlockchainPolygon",
                            "BlockchainTron"
                        ],
                        "name": "blockchain",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "currencies",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "name": "is_system",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "min_amount_usd",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "day",
                            "hour"
                        ],
                        "type": "string",
                        "name": "resolution",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "transfer",
                            "deposit",
                            "withdrawal_from_processing"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "TransactionsTypeTransfer",
                            "TransactionsTypeDeposit",
                            "TransactionsTypeWithdrawalFromProcessing"
                        ],
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_StatisticsRow"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transaction/{hash}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search transactions by hash **Deprecated**: Use ` + "`" + `/v1/dv-admin/search/:searchParam instead",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Search transactions by hash",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-TransactionInfoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transaction/{id}/send-webhooks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send webhook manually. Accepts confirmed/unconfirmed tx",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StoreWebhook"
                ],
                "summary": "Send webhook",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction id",
                        "name": "ID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transfer/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for filter transfer by status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Get transfer by status",
                "parameters": [
                    {
                        "description": "Transfer Request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WithdrawalWalletsTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-GetTransferResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for removal action of transfers by ids",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Delete transfers by ids",
                "parameters": [
                    {
                        "description": "Delete Transfer Request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transfer/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for get transfer history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Get transfer history",
                "parameters": [
                    {
                        "description": "Transfer History Request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransferHistoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-GetTransferResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transfer/mode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for on/off transfer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Disable or enable transfers",
                "parameters": [
                    {
                        "description": "Transfer Request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransfersToggleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transfer/prefetch": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for get prefetch transfer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Get prefetch Transfers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_GetPrefetchDataResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/transfer/tron/transfer-type": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for update transfer type by resources or burntrx",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transfers"
                ],
                "summary": "Update tron transfer type",
                "parameters": [
                    {
                        "description": "Tron Transfers Type Request",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TronTransfersTypeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-SettingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/tron/resource-expenses/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves aggregated statistics for Tron wallet balances, transfer expenses, and deposit counts for a user over a specified date range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Statistics"
                ],
                "summary": "Get Tron resource and deposit statistics",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"2025-06-17\"",
                        "description": "Start date (YYYY-MM-DD)",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"2025-06-24\"",
                        "description": "End date (YYYY-MM-DD)",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "\"hour\"",
                        "description": "day/hour",
                        "name": "resolution",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with statistics",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-map_string_CombinedStats"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters or processing error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or missing Bearer token",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Auth a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Auth user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetUserInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "Update user info",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetUserInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user-setting/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create or update root settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Create or update root settings",
                "parameters": [
                    {
                        "description": "Create or update user setting",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/change-email": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change email",
                "parameters": [
                    {
                        "description": "Confirm email",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user password",
                "parameters": [
                    {
                        "description": "Update user password",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangePasswordInternalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/email-confirmation": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Auth a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Auth user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/init-email-change": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Init email change",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Init email change",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/init-email-confirmation": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Init email confirnation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Init email confirnation",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/tg-link": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate telegram link",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Generate telegram link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-TgLinkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/tg-unlink/confirm": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Confirm telegram unlink",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Confirm telegram unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/user/tg-unlink/init": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Init telegram unlink",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Init telegram unlink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's with balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet's with balance",
                "parameters": [
                    {
                        "description": "GetWalletByStoreRequest",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetWalletByStoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-GetWalletBalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/addresses": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates/returns wallet with addressed pre-generated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Create/return wallet with addresses",
                "parameters": [
                    {
                        "description": "CreateRequest",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletShort"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/addresses/converter": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint convert legacy address to new format",
                "tags": [
                    "Wallet"
                ],
                "summary": "Convert wallet's address",
                "parameters": [
                    {
                        "description": "AddressConverterRequest",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_wallet_request.AddressConverterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ConvertedAddressResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/addresses/keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns private keys for each wallet's asset.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet's private/public keys.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TOTP auth code",
                        "name": "totp",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/addresses/seeds": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's seed phrases",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet's seed phrase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TOTP auth code",
                        "name": "totp",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletSeedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/balances/cold": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get cold wallet's addresses total balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get cold wallet's addresses total balance",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletAddressTotalUSDResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/balances/exchange-settings": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get withdrawal wallet's addresses total balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get withdrawal wallet's addresses total balance",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletAddressTotalUSDResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/balances/hot": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get hot wallet's addresses total balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get hot wallet's addresses total balance",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletAddressTotalUSDResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/info/{searchParam}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's data group by blockchains  **Deprecated**: Use ` + "`" + `/v1/dv-admin/search/:searchParam instead",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Find wallet's and get info grouped by blockchain",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WalletWithBlockchains"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/keys/hot": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get hot wallet's keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get hot wallet's keys",
                "parameters": [
                    {
                        "description": "GetHotWalletKeysRequest",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetHotWalletKeysRequest"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/restore/{walletId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's data group by blockchains",
                "tags": [
                    "Wallet"
                ],
                "summary": "Restore missed wallet transaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/summary": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's summary stats grouped by currencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Get wallet's summary by currencies",
                "parameters": [
                    {
                        "type": "number",
                        "name": "min_balance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_SummaryDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/wallet/{searchParam}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns wallet's data with transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Find wallet's by address, id or  summary by currencies",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_WalletWithTransactionsInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/webhook/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns webhook history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebhookHistory"
                ],
                "summary": "Get webhooks history by stores",
                "parameters": [
                    {
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "store_uuids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WhHistoryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/webhook/send-test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint emulates store webhook",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StoreWebhook"
                ],
                "summary": "Emulate webhook to store",
                "parameters": [
                    {
                        "description": "TestWebhookRequest",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-SendTestResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdraw-multiple-to-processing": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for import manual withdraw",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Create manual withdraw by specific wallet",
                "parameters": [
                    {
                        "description": "Withdraw to processing",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MultipleWithdrawalToProcessingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal-wallet/{walletID}/addresses": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for update full addresses list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WithdrawalWallet"
                ],
                "summary": "Update withdrawal wallet addresses",
                "parameters": [
                    {
                        "description": "Update address",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAddressesListRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "walletID",
                        "name": "walletID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/address-book": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all address book entries for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address Book"
                ],
                "summary": "Get user address book",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AddressBookListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new address book entry for the current user. Requires 2FA verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address Book"
                ],
                "summary": "Create address book entry",
                "parameters": [
                    {
                        "description": "Address book entry data with TOTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.CreateAddressBookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AddressBookEntryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete address book entries based on type (individual, universal, or EVM). Requires 2FA verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address Book"
                ],
                "summary": "Delete address book entries",
                "parameters": [
                    {
                        "description": "Deletion request with type flags",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.DeleteAddressBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/address-book/withdrawal-rule": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add withdrawal rules based on type (individual, universal, or EVM). Requires 2FA verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address Book"
                ],
                "summary": "Add withdrawal rules",
                "parameters": [
                    {
                        "description": "Withdrawal rule request with type flags",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.AddWithdrawalRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/address-book/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing address book entry. Requires 2FA verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Address Book"
                ],
                "summary": "Update address book entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Address book entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update data with TOTP",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.UpdateAddressBookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-AddressBookEntryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns withdrawal wallet's",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WithdrawalWallet"
                ],
                "summary": "Get withdrawal wallets",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_WithdrawalWalletWithAddress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/withdraw-manual": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for import manual withdraw",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Create manual withdraw by specific wallet",
                "parameters": [
                    {
                        "description": "Manual withdraw",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ManualWithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/withdraw-multiple-manual": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for import manual withdraw",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Create manual withdraw by specific wallet",
                "parameters": [
                    {
                        "description": "Manual withdraw",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ManualMultipleWithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/withdraw-to-processing": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for import manual withdraw",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Create manual withdraw by specific wallet",
                "parameters": [
                    {
                        "description": "Withdraw to processing",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WithdrawalToProcessingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/withdrawal-from-processing": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Initialize withdrawal from processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Initialize withdrawal from processing",
                "parameters": [
                    {
                        "description": "Init withdrawal",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProcessingWithdrawalInternalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ProcessingWithdrawalResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "423": {
                        "description": "Locked",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/dv-admin/withdrawal/{currencyID}/rules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns withdrawal wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WithdrawalWallet"
                ],
                "summary": "Get withdrawal wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency ID",
                        "name": "currencyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WithdrawalRulesByCurrencyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint for update withdrawal wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WithdrawalWallet"
                ],
                "summary": "Update withdrawal wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "walletID",
                        "name": "walletID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update withdrawal wallet",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateWithdrawalWalletsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/:exchange_slug/deposit-update": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update deposit addresses",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Update deposit addresses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_DepositUpdateResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/:exchange_slug/withdrawal-setting": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get all withdrawal settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ExchangeWithdrawalSettingResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Creates withdrawal setting with minimum value in USD to withdrawal from exchange",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Create withdrawal setting",
                "parameters": [
                    {
                        "description": "Create withdrawal",
                        "name": "withdrawal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeCreateWithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/:slug/pairs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get exchange pairs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange pairs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_github.com/dv-net/dv-merchant_internal_models_ExchangeSymbolDTO"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/:slug/withdrawal-rules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get exchange withdrawal rules for all enabled currencies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange withdrawal rules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_array_github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response_ExchangeWithdrawalRulesResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/deposit-addresses": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get exchange deposit address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange deposit address",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_GetDepositAddressesResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/exchange-history": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user exchange orders history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get user exchange orders history",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-ExchangeOrderHistoryResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/exchange-history/export": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Download user exchange orders history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Download user exchange orders history",
                "parameters": [
                    {
                        "type": "string",
                        "name": "date_from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "date_to",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "csv",
                            "xlsx"
                        ],
                        "type": "string",
                        "name": "format",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "slug",
                        "in": "query"
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/withdrawal": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get withdrawals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get withdrawals",
                "parameters": [
                    {
                        "description": "Get withdrawal request",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeGetWithdrawalsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ResponseWithFullPagination-ExchangeWithdrawalHistoryResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/withdrawal/export": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Download withdrawals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Download withdrawals",
                "parameters": [
                    {
                        "description": "Get withdrawal exported request",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeGetWithdrawalsExportedRequest"
                        }
                    }
                ],
                "responses": {
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/{exchange_slug}/chains": {
            "get": {
                "description": "Get exchange chains",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange chains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ExchangeChain"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/{exchange_slug}/toggle-swaps": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle exchange swaps",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Toggle exchange swaps",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Toggle swaps request",
                        "name": "state",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeToggleSwapsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/{exchange_slug}/toggle-withdrawals": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle exchange withdrawals",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Toggle exchange withdrawals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Toggle withdrawals request",
                        "name": "state",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExchangeToggleWithdrawalsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/{exchange_slug}/withdrawal-setting/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get all withdrawal setting by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Setting UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeWithdrawalSettingResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Delete withdrawal setting by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Setting UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Update withdrawal setting by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Setting UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update exchange settings",
                        "name": "update_keys",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateWithdrawalSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeWithdrawalSettingResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/exchange/{exchange_slug}/withdrawal/{id}": {
            "get": {
                "description": "Get withdrawal by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get withdrawal by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Withdrawal UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange slug",
                        "name": "exchange_slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExchangeWithdrawalHistoryResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/exchange-balances": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get external exchange balances",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get external exchange balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExternalExchangeBalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/processing-wallet-balances": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get external processing wallet balances",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Get external processing wallet balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "enum": [
                                "arbitrum",
                                "bitcoin",
                                "bitcoincash",
                                "bsc",
                                "dogecoin",
                                "ethereum",
                                "litecoin",
                                "polygon",
                                "tron"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "blockchains",
                        "in": "query"
                    },
                    {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "name": "currencies",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ExternalProcessingWalletBalanceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/store/currencies": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get store currencies list",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get store currencies list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_GetCurrencyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/store/currencies/{id}/rate": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get store currency rate",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get store currency rate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-CurrencyRate"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/wallet": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Create wallet with address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Create wallet with address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "amount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "currency",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "ipv4",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "locale",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "name": "store_external_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-CreateWalletExternalResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Create wallet with address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet"
                ],
                "summary": "Create wallet with address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "description": "Create wallet",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateWalletExternalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-CreateWalletExternalResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/wallet/balance/hot": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get external hot wallet balances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get external hot wallet balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "name": "min_balance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_SummaryDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/withdrawal-from-processing": {
            "post": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Initialize withdrawal from processing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Initialize withdrawal from processing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Init withdrawal",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProcessingWithdrawRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ProcessingWithdrawalResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "423": {
                        "description": "Locked",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/external/withdrawal-from-processing/{id}": {
            "get": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Get withdrawal from processing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Get withdrawal from processing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Withdrawal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-WithdrawalFromProcessingDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "XApiKey": []
                    }
                ],
                "description": "Delete withdrawal from processing",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Withdrawal"
                ],
                "summary": "Delete withdrawal from processing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store API key",
                        "name": "api_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Withdrawal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/notifications/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List available user notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "List available user notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_UserNotificationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/notifications/list/update": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update list user notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Update list user notifications",
                "parameters": [
                    {
                        "description": "Update user notifications list",
                        "name": "updateList",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateList"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/notifications/test": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Test local SMTP server email sending",
                "parameters": [
                    {
                        "description": "Test email request",
                        "name": "testEmailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/notifications/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List available user settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "List available user settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/currencies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all Currencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get all Currencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_GetCurrencyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/currencies/rate/{source}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Currency rate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get Currency rate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency Source example binance or coingate",
                        "name": "source",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_ExchangeRate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/currencies/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Currency by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get Currency by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Currency ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-GetCurrencyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/mnemonic/generate": {
            "get": {
                "description": "Generate random mnemonic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mnemonic",
                    "Public"
                ],
                "summary": "Generate random mnemonic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Length of mnemonic, 12 or 24 words",
                        "name": "length",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-github.com/dv-net/dv-merchant_internal_delivery_http_responses_mnemonic_response_MnemonicResponse"
                        }
                    }
                }
            }
        },
        "/v1/public/store/topup/{store_id}/{external_id}": {
            "get": {
                "description": "Get wallet full data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet",
                    "Public"
                ],
                "summary": "Get top up data by store",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Slug of the shop",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "External client ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "ipv4",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "locale",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-PublicGetWalletResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/user/accept-invite": {
            "post": {
                "description": "Accept admin invite link",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User",
                    "Public"
                ],
                "summary": "Accept admin invite link",
                "parameters": [
                    {
                        "description": "Invite request",
                        "name": "inviteRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublicAcceptInviteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    }
                }
            }
        },
        "/v1/public/user/forgot-password": {
            "post": {
                "description": "Request password reset link by email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User",
                    "Public"
                ],
                "summary": "Request password reset link by email",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublicUserForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    }
                }
            }
        },
        "/v1/public/user/reset-password": {
            "post": {
                "description": "Reset user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User",
                    "Public"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Public reset password request",
                        "name": "resetPassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublicResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-string"
                        }
                    }
                }
            }
        },
        "/v1/public/wallet/{id}": {
            "get": {
                "description": "Get wallet full data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet",
                    "Public"
                ],
                "summary": "Get wallet full data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-PublicGetWalletResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/public/wallet/{id}/tx-find": {
            "get": {
                "description": "Get recent wallet transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Wallet",
                    "Public"
                ],
                "summary": "Get recent wallet transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-ShortTransactionInfoListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/store/{id}/whitelists/{ip}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete store whitelist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Delete store whitelist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Store ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Whitelist IP",
                        "name": "ip",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-any"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/user-setting/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List available user settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "List available user settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-array_github.com/dv-net/dv-merchant_internal_service_setting_Dto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        },
        "/v1/user-setting/{setting_name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get setting value",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Setting"
                ],
                "summary": "Get setting value",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/JSONResponse-SettingResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/APIErrors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AMLKey": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "APIError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "APIErrors": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/APIError"
                    }
                }
            }
        },
        "AddUserRoleRequest": {
            "type": "object",
            "required": [
                "user_id",
                "user_role"
            ],
            "properties": {
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "user_role": {
                    "enum": [
                        "root",
                        "user"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/UserRole"
                        }
                    ]
                }
            }
        },
        "AddUserRoleResponse": {
            "type": "object",
            "required": [
                "user_id",
                "user_roles"
            ],
            "properties": {
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "user_roles": {
                    "type": "array",
                    "items": {
                        "enum": [
                            "root",
                            "user"
                        ],
                        "$ref": "#/definitions/UserRole"
                    }
                }
            }
        },
        "AddressBookEntryResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "AddressBookEntryResponseShort": {
            "type": "object",
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "AddressBookListResponse": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressBookEntryResponse"
                    }
                },
                "evm_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EVMAddressGroupResponse"
                    }
                },
                "universal_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UniversalAddressGroupResponse"
                    }
                }
            }
        },
        "AmlHistoryResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "request_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CheckHistory"
                    }
                },
                "risk_level": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "service_id": {
                    "type": "string"
                },
                "service_slug": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AMLSlug"
                },
                "status": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AMLCheckStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "Asset": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "amount_usd": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "identity": {
                    "type": "string"
                }
            }
        },
        "AssetWallet": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "total_deposit": {
                    "type": "number"
                },
                "tx_count": {
                    "type": "number"
                }
            }
        },
        "AuthLinkResponse": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                }
            }
        },
        "AuthRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                },
                "remember_me": {
                    "type": "boolean"
                }
            }
        },
        "AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "Balance": {
            "type": "object",
            "properties": {
                "native_token": {
                    "type": "string"
                },
                "native_token_usd": {
                    "type": "string"
                }
            }
        },
        "BanUserResponse": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "Blockchain": {
            "type": "string",
            "enum": [
                "arbitrum",
                "bitcoin",
                "bitcoincash",
                "bsc",
                "dogecoin",
                "ethereum",
                "litecoin",
                "polygon",
                "tron"
            ],
            "x-enum-varnames": [
                "BlockchainArbitrum",
                "BlockchainBitcoin",
                "BlockchainBitcoinCash",
                "BlockchainBinanceSmartChain",
                "BlockchainDogecoin",
                "BlockchainEthereum",
                "BlockchainLitecoin",
                "BlockchainPolygon",
                "BlockchainTron"
            ]
        },
        "BlockchainAdditionalData": {
            "type": "object",
            "properties": {
                "evm_data": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_wallet.EVMData"
                },
                "tron_data": {
                    "$ref": "#/definitions/TronData"
                }
            }
        },
        "BlockchainGroup": {
            "type": "object",
            "properties": {
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssetWallet"
                    }
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                }
            }
        },
        "CallbackURLResponse": {
            "type": "object",
            "properties": {
                "callback_url": {
                    "type": "string"
                }
            }
        },
        "ChangeEmailRequest": {
            "type": "object",
            "required": [
                "new_email"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "new_email": {
                    "type": "string"
                },
                "new_email_confirmation": {
                    "type": "string"
                }
            }
        },
        "ChangePasswordInternalRequest": {
            "type": "object",
            "required": [
                "password_new",
                "password_old"
            ],
            "properties": {
                "password_new": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                },
                "password_old": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "ChangeTwoFactorAuthStatusRequest": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "CheckHistory": {
            "type": "object",
            "properties": {
                "aml_check_id": {
                    "type": "string"
                },
                "attempt_number": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "error_msg": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "request_payload": {
                    "type": "string"
                },
                "service_response": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "CombinedStats": {
            "type": "object",
            "properties": {
                "available_bandwidth": {
                    "type": "number"
                },
                "available_energy": {
                    "type": "number"
                },
                "delegated_bandwidth": {
                    "type": "number"
                },
                "delegated_energy": {
                    "type": "number"
                },
                "staked_bandwidth": {
                    "type": "number"
                },
                "staked_energy": {
                    "type": "number"
                },
                "total_bandwidth_used": {
                    "type": "number"
                },
                "total_energy_used": {
                    "type": "number"
                },
                "total_trx_fee": {
                    "type": "number"
                },
                "transfer_count": {
                    "type": "integer"
                }
            }
        },
        "ConfirmTwoFactorAuthRequest": {
            "type": "object",
            "required": [
                "otp"
            ],
            "properties": {
                "otp": {
                    "type": "string"
                }
            }
        },
        "ConvertedAddressResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "legacy": {
                    "type": "string"
                }
            }
        },
        "CreateProcessingWithdrawRequest": {
            "type": "object",
            "required": [
                "address_to",
                "amount",
                "currency_id",
                "request_id"
            ],
            "properties": {
                "address_to": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 16
                },
                "amount": {
                    "type": "number"
                },
                "currency_id": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "CreateProcessingWithdrawalInternalRequest": {
            "type": "object",
            "required": [
                "address_to",
                "amount",
                "currency_id",
                "request_id",
                "totp"
            ],
            "properties": {
                "address_to": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 16
                },
                "amount": {
                    "type": "number"
                },
                "currency_id": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "totp": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 6
                }
            }
        },
        "CreateSettingRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2
                },
                "otp": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 0
                }
            }
        },
        "CreateStoreRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 2
                },
                "site": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 5
                }
            }
        },
        "CreateStoreWebhookRequest": {
            "type": "object",
            "required": [
                "events",
                "url"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebhookEvent"
                    }
                },
                "url": {
                    "type": "string",
                    "format": "url"
                }
            }
        },
        "CreateWalletExternalRequest": {
            "type": "object",
            "required": [
                "store_external_id"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "ip": {
                    "type": "string",
                    "format": "ipv4"
                },
                "locale": {
                    "type": "string"
                },
                "store_external_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "CreateWalletExternalResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletAddressResponse"
                    }
                },
                "amount_usd": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string"
                },
                "pay_url": {
                    "type": "string"
                },
                "rates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "store_external_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "CreateWalletRequest": {
            "type": "object",
            "required": [
                "store_external_id",
                "store_id"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "locale": {
                    "type": "string"
                },
                "store_external_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "store_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "CurrencyDTO": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sort_order": {
                    "type": "integer"
                }
            }
        },
        "CurrencyIcon": {
            "type": "object",
            "properties": {
                "icon_128": {
                    "type": "string"
                },
                "icon_512": {
                    "type": "string"
                },
                "icon_svg": {
                    "type": "string"
                }
            }
        },
        "CurrencyRate": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "rate": {
                    "type": "string"
                },
                "rate_source": {
                    "type": "string"
                }
            }
        },
        "CurrencyShort": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_bitcoin_like": {
                    "type": "boolean"
                },
                "is_evm_like": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "precision": {
                    "type": "integer"
                }
            }
        },
        "DeleteTransferRequest": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            }
        },
        "DeliveryChannel": {
            "type": "string",
            "enum": [
                "email",
                "telegram"
            ],
            "x-enum-varnames": [
                "EmailDeliveryChannel",
                "TelegramDeliveryChannel"
            ]
        },
        "DepositUpdateResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "address_type": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AddressType"
                },
                "chain": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "min_deposit_amount": {
                    "type": "string"
                }
            }
        },
        "EVMAddressGroupResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Blockchain"
                    }
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressBookEntryResponseShort"
                    }
                },
                "currency_count": {
                    "type": "integer"
                },
                "is_evm": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "ExchangeAsset": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "ExchangeBalance": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeAsset"
                    }
                },
                "total_usd": {
                    "type": "number"
                }
            }
        },
        "ExchangeChain": {
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string"
                },
                "chain_label": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "ticker": {
                    "type": "string"
                },
                "ticker_label": {
                    "type": "string"
                }
            }
        },
        "ExchangeCreateWithdrawalRequest": {
            "type": "object",
            "required": [
                "address",
                "chain",
                "currency_id",
                "min_amount"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "chain": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "min_amount": {
                    "type": "string"
                }
            }
        },
        "ExchangeGetWithdrawalsExportedRequest": {
            "type": "object",
            "required": [
                "format"
            ],
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "date_from": {
                    "type": "string"
                },
                "date_to": {
                    "type": "string"
                },
                "format": {
                    "type": "string",
                    "enum": [
                        "csv",
                        "xlsx"
                    ]
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "ExchangeGetWithdrawalsRequest": {
            "type": "object",
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "date_from": {
                    "type": "string"
                },
                "date_to": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "ExchangeKeyData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ExchangeOrderHistoryResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "amount_usd": {
                    "type": "string"
                },
                "client_order_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "exchange_id": {
                    "type": "string"
                },
                "exchange_order_id": {
                    "type": "string"
                },
                "exchange_slug": {
                    "type": "string"
                },
                "fail_reason": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "side": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "ExchangePair": {
            "type": "object",
            "required": [
                "base_symbol",
                "quote_symbol",
                "symbol",
                "type"
            ],
            "properties": {
                "base_symbol": {
                    "type": "string"
                },
                "quote_symbol": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ExchangeRate": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "value": {
                    "type": "string"
                },
                "value_scale": {
                    "type": "string"
                }
            }
        },
        "ExchangeSlug": {
            "type": "string",
            "enum": [
                "htx",
                "okx",
                "binance",
                "bitget",
                "kucoin",
                "bybit",
                "gate"
            ],
            "x-enum-varnames": [
                "ExchangeSlugHtx",
                "ExchangeSlugOkx",
                "ExchangeSlugBinance",
                "ExchangeSlugBitget",
                "ExchangeSlugKucoin",
                "ExchangeSlugBybit",
                "ExchangeSlugGateio"
            ]
        },
        "ExchangeTestConnectionRequest": {
            "type": "object",
            "required": [
                "credentials",
                "slug"
            ],
            "properties": {
                "credentials": {
                    "type": "object",
                    "required": [
                        "key",
                        "secret"
                    ],
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "passphrase": {
                            "type": "string"
                        },
                        "secret": {
                            "type": "string"
                        }
                    }
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "ExchangeToggleSwapsRequest": {
            "type": "object",
            "required": [
                "new_state"
            ],
            "properties": {
                "new_state": {
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                }
            }
        },
        "ExchangeToggleWithdrawalsRequest": {
            "type": "object",
            "required": [
                "new_state"
            ],
            "properties": {
                "new_state": {
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                }
            }
        },
        "ExchangeUpdateKeyData": {
            "type": "object",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "value": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "ExchangeUpdateKeysRequest": {
            "type": "object",
            "required": [
                "keys"
            ],
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeUpdateKeyData"
                    }
                }
            }
        },
        "ExchangeUpdatePairsRequest": {
            "type": "object",
            "required": [
                "pairs"
            ],
            "properties": {
                "pairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangePair"
                    }
                }
            }
        },
        "ExchangeUserPairResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                }
            }
        },
        "ExchangeWithKeysResponse": {
            "type": "object",
            "properties": {
                "current_exchange": {
                    "type": "string"
                },
                "exchanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response.ExchangeData"
                    }
                },
                "swap_state": {
                    "type": "string"
                },
                "withdrawal_state": {
                    "type": "string"
                }
            }
        },
        "ExchangeWithdrawalHistoryResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount_native": {
                    "type": "string"
                },
                "amount_usd": {
                    "type": "string"
                },
                "chain": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "exchange_id": {
                    "type": "string"
                },
                "exchange_slug": {
                    "type": "string"
                },
                "fail_reason": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tx_id": {
                    "type": "string"
                }
            }
        },
        "ExchangeWithdrawalSettingResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "chain": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "min_amount": {
                    "type": "number"
                }
            }
        },
        "ExternalExchangeBalanceResponse": {
            "type": "object",
            "properties": {
                "balances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeAsset"
                    }
                },
                "total_usd": {
                    "type": "number"
                }
            }
        },
        "FullPagingData": {
            "type": "object",
            "properties": {
                "last_page": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "GetCurrencyResponse": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "type": "string"
                },
                "blockchain_icon": {
                    "$ref": "#/definitions/CurrencyIcon"
                },
                "code": {
                    "type": "string"
                },
                "contract_address": {
                    "type": "string"
                },
                "explorer_link": {
                    "type": "string"
                },
                "has_balance": {
                    "type": "boolean"
                },
                "icon": {
                    "$ref": "#/definitions/CurrencyIcon"
                },
                "id": {
                    "type": "string"
                },
                "is_fiat": {
                    "type": "boolean"
                },
                "min_confirmation": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "precision": {
                    "type": "integer"
                },
                "status": {
                    "type": "boolean"
                },
                "withdrawal_min_balance": {
                    "type": "number"
                }
            }
        },
        "GetDepositAddressesResponse": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DepositUpdateResponse"
                    }
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "GetDictionariesResponse": {
            "type": "object",
            "properties": {
                "available_aml_providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AMLSlug"
                    }
                },
                "available_currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CurrencyShort"
                    }
                },
                "available_rate_sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "backend_address": {
                    "type": "string",
                    "format": "ipv4"
                },
                "backend_version_hash": {
                    "type": "string"
                },
                "backend_version_tag": {
                    "type": "string"
                },
                "general_settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SettingResponse"
                    }
                },
                "processing_version_hash": {
                    "type": "string"
                },
                "processing_version_tag": {
                    "type": "string"
                }
            }
        },
        "GetHotWalletKeysRequest": {
            "type": "object",
            "required": [
                "file_type",
                "totp"
            ],
            "properties": {
                "exclude_wallet_address_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "file_type": {
                    "type": "string",
                    "enum": [
                        "csv",
                        "json",
                        "txt"
                    ]
                },
                "totp": {
                    "type": "string"
                },
                "wallet_address_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "GetMonitorTypesResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_responses_log_response.LogData"
                    }
                }
            }
        },
        "GetPrefetchDataResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "currency": {
                    "$ref": "#/definitions/CurrencyShort"
                },
                "from_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "to_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/TransferKind"
                }
            }
        },
        "GetTransferResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "from_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "kind": {
                    "$ref": "#/definitions/TransferKind"
                },
                "message": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "stage": {
                    "$ref": "#/definitions/TransferStage"
                },
                "status": {
                    "$ref": "#/definitions/TransferStatus"
                },
                "step": {
                    "type": "string"
                },
                "to_addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tx_hash": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "GetTwoFactorAuthDataResponse": {
            "type": "object",
            "properties": {
                "is_confirmed": {
                    "type": "boolean"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "GetUserInfoResponse": {
            "type": "object",
            "required": [
                "email",
                "location"
            ],
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "email_verified_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "language": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "processing_owner_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "quick_start_guide_status": {
                    "type": "string"
                },
                "rate_scale": {
                    "type": "number"
                },
                "rate_source": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserRole"
                    }
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "GetUsersResponse": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "root",
                            "user"
                        ]
                    }
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "GetWalletBalanceResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "currency_id": {
                    "type": "string"
                },
                "dirty": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "GetWalletByStoreRequest": {
            "type": "object",
            "required": [
                "store_ids"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "balance_fiat_from": {
                    "type": "number"
                },
                "balance_fiat_to": {
                    "type": "number"
                },
                "blockchain": {
                    "type": "string",
                    "enum": [
                        "bitcoin",
                        "tron",
                        "ethereum",
                        "litecoin"
                    ]
                },
                "currency_id": {
                    "type": "string"
                },
                "is_sort_by_amount": {
                    "type": "boolean"
                },
                "is_sort_by_balance": {
                    "type": "boolean"
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "page_size": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "store_ids": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "wallet_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "InitProcessingResponse": {
            "type": "object",
            "properties": {
                "base_url": {
                    "type": "string",
                    "format": "uri"
                },
                "processing_client_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "processing_client_key": {
                    "type": "string"
                }
            }
        },
        "InitializeProcessingRequest": {
            "type": "object",
            "required": [
                "callback_domain",
                "host",
                "merchant_domain",
                "merchant_pay_form_domain"
            ],
            "properties": {
                "callback_domain": {
                    "type": "string"
                },
                "host": {
                    "description": "Host (http://domain.example:574 or https://127.0.0.1:999)",
                    "type": "string"
                },
                "merchant_domain": {
                    "type": "string"
                },
                "merchant_pay_form_domain": {
                    "type": "string"
                }
            }
        },
        "InviteUserWithRoleRequest": {
            "type": "object",
            "required": [
                "email",
                "mnemonic",
                "role",
                "store_ids"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "mnemonic": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/UserRole"
                },
                "store_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "JSONResponse-AddUserRoleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/AddUserRoleResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-AddressBookEntryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/AddressBookEntryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-AddressBookListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/AddressBookListResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-AuthLinkResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/AuthLinkResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-AuthResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/AuthResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-BanUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/BanUserResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-CallbackURLResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/CallbackURLResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ConvertedAddressResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ConvertedAddressResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-CreateWalletExternalResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/CreateWalletExternalResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-CurrencyRate": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/CurrencyRate"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExchangeBalance": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExchangeBalance"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExchangeUserPairResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExchangeUserPairResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExchangeWithKeysResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExchangeWithKeysResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExchangeWithdrawalHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExchangeWithdrawalHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExchangeWithdrawalSettingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExchangeWithdrawalSettingResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExternalExchangeBalanceResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ExternalExchangeBalanceResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ExternalProcessingWalletBalanceResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProcessingWalletWithAssets"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-GetCurrencyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/GetCurrencyResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-GetDictionariesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/GetDictionariesResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-GetMonitorTypesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/GetMonitorTypesResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-GetTwoFactorAuthDataResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/GetTwoFactorAuthDataResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-GetUserInfoResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/GetUserInfoResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-InitProcessingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/InitProcessingResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-NotificationTypeListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/NotificationTypeListResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-OwnerData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/OwnerData"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ProcessingListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ProcessingListResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ProcessingWithdrawalResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ProcessingWithdrawalResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-PublicGetWalletResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/PublicGetWalletResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ReceiptResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ReceiptResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-RegisterRootResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/RegisterRootResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-RegisterUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/RegisterUserResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-AmlHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-AmlHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-ExchangeOrderHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-ExchangeOrderHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-ExchangeWithdrawalHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-ExchangeWithdrawalHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-GetTransferResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-GetTransferResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-GetUsersResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-GetUsersResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-GetWalletBalanceResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-GetWalletBalanceResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-NotificationHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-NotificationHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ResponseWithFullPagination-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_FindRow": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ResponseWithFullPagination-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_FindRow"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-SearchByCriteriaResponse-any": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/SearchByCriteriaResponse-any"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-SendTestResult": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/SendTestResult"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-SettingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/SettingResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-ShortTransactionInfoListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/ShortTransactionInfoListResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-StoreAPIKeyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/StoreAPIKeyResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-StoreResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/StoreResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-StoreSecretResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/StoreSecretResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-StoreWebhookResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/StoreWebhookResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-StoreWhitelistResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-SystemInfoResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/SystemInfoResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-TgLinkResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/TgLinkResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-TransactionInfoResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/TransactionInfoResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-UnbanUserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/UnbanUserResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-VersionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/VersionResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WalletAddressTotalUSDResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WalletAddressTotalUSDResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WalletSeedResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WalletSeedResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WalletShort": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WalletShort"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WalletWithBlockchains": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WalletWithBlockchains"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WhHistoryResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WhHistoryResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WithdrawalFromProcessingDto": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WithdrawalFromProcessingDto"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-WithdrawalRulesByCurrencyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/WithdrawalRulesByCurrencyResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-any": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_AMLKey": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AMLKey"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_CurrencyShort": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CurrencyShort"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_DepositUpdateResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DepositUpdateResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_ExchangeChain": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeChain"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_ExchangeRate": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeRate"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_ExchangeWithdrawalSettingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeWithdrawalSettingResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_GetCurrencyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCurrencyResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_GetDepositAddressesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDepositAddressesResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_GetPrefetchDataResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetPrefetchDataResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_ProcessingWalletWithAssets": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProcessingWalletWithAssets"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_ReceiptResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReceiptResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_SettingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SettingResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_StatisticsDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StatisticsDTO"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_StoreAPIKeyResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StoreAPIKeyResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_StoreResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StoreResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_StoreTransactionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StoreTransactionResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_StoreWebhookResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StoreWebhookResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_SummaryDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SummaryDTO"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_UserNotificationResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserNotificationResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_WalletWithTransactionsInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletWithTransactionsInfo"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_WithdrawalWalletWithAddress": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithdrawalWalletWithAddress"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_array_github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response_ExchangeWithdrawalRulesResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response.ExchangeWithdrawalRulesResponse"
                        }
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_github.com/dv-net/dv-merchant_internal_models_ExchangeSymbolDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.ExchangeSymbolDTO"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_github.com/dv-net/dv-merchant_internal_service_setting_Dto": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_setting.Dto"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-array_string": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-github.com/dv-net/dv-merchant_internal_delivery_http_responses_mnemonic_response_MnemonicResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_responses_mnemonic_response.MnemonicResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-github.com/dv-net/dv-merchant_internal_delivery_http_responses_processing_response_OwnerProcessingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_delivery_http_responses_processing_response.OwnerProcessingResponse"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_StatisticsRow": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.StatisticsRow"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-map_string_CombinedStats": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/map_string_CombinedStats"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "JSONResponse-string": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "LowBalanceWithdrawalRuleResponse": {
            "type": "object",
            "properties": {
                "manual_address": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.MultiWithdrawalMode"
                }
            }
        },
        "ManualMultipleWithdrawRequest": {
            "type": "object",
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "exclude_wallet_addresses_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wallet_address_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "withdrawal_wallet_id": {
                    "type": "string"
                }
            }
        },
        "ManualWithdrawRequest": {
            "type": "object",
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "wallet_address_id": {
                    "type": "string"
                }
            }
        },
        "MonitorTypeData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "MultiWithdrawalRules": {
            "type": "object",
            "required": [
                "mode"
            ],
            "properties": {
                "manual_address": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "mode": {
                    "enum": [
                        "random",
                        "disabled",
                        "processing",
                        "manual"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.MultiWithdrawalMode"
                        }
                    ]
                }
            }
        },
        "MultipleWithdrawalToProcessingRequest": {
            "type": "object",
            "required": [
                "currency_id"
            ],
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wallet_address_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "NotificationHistoryResponse": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/DeliveryChannel"
                },
                "created_at": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message_text": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/NotificationType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "NotificationType": {
            "type": "string",
            "enum": [
                "user_verification",
                "user_registration",
                "user_password_reset",
                "user_forgot_password",
                "two_factor_authentication",
                "external_wallet_requested",
                "user_invite",
                "user_email_reset",
                "user_change_email",
                "user_access_key_changed",
                "user_authorization_from_new_device",
                "user_remind_verification",
                "user_update_setting_verification",
                "user_test_email",
                "user_crypto_receipt"
            ],
            "x-enum-varnames": [
                "NotificationTypeUserVerification",
                "NotificationTypeUserRegistration",
                "NotificationTypeUserPasswordChanged",
                "NotificationTypeUserForgotPassword",
                "NotificationTypeTwoFactorAuthentication",
                "NotificationTypeExternalWalletRequested",
                "NotificationTypeUserInvite",
                "NotificationTypeUserEmailReset",
                "NotificationTypeUserEmailChange",
                "NotificationTypeUserAccessKeyChanged",
                "NotificationTypeUserAuthorizationFromNewDevice",
                "NotificationTypeUserRemindVerification",
                "NotificationTypeUserUpdateSetting",
                "NotificationTypeUserTestEmail",
                "NotificationTypeUserCryptoReceipt"
            ]
        },
        "NotificationTypeListResponse": {
            "type": "object",
            "properties": {
                "types": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "OwnerData": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "is_authorized": {
                    "type": "boolean"
                },
                "owner_id": {
                    "type": "string"
                },
                "telegram": {
                    "type": "string"
                }
            }
        },
        "PatchWhitelistRequest": {
            "type": "object",
            "required": [
                "ip"
            ],
            "properties": {
                "ip": {
                    "type": "string",
                    "format": "ipv4"
                }
            }
        },
        "ProcessingListResponse": {
            "type": "object"
        },
        "ProcessingWalletWithAssets": {
            "type": "object",
            "properties": {
                "additional_data": {
                    "$ref": "#/definitions/BlockchainAdditionalData"
                },
                "address": {
                    "type": "string"
                },
                "assets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Asset"
                    }
                },
                "balance": {
                    "$ref": "#/definitions/Balance"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "currency": {
                    "$ref": "#/definitions/CurrencyShort"
                }
            }
        },
        "ProcessingWebhook": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "confirmations": {
                    "type": "integer"
                },
                "contract_address": {
                    "type": "string"
                },
                "external_wallet_id": {
                    "type": "string"
                },
                "fee": {
                    "type": "string"
                },
                "from_address": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "is_system": {
                    "type": "boolean"
                },
                "kind": {
                    "$ref": "#/definitions/WebhookKind"
                },
                "network_created_at": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/TransactionStatus"
                },
                "to_address": {
                    "type": "string"
                },
                "tx_uniq_key": {
                    "type": "string"
                },
                "wallet_type": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.WalletType"
                }
            }
        },
        "ProcessingWithdrawalResponse": {
            "type": "object",
            "properties": {
                "address_from": {
                    "type": "string"
                },
                "address_to": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                },
                "amount_usd": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "transfer_id": {
                    "type": "string"
                }
            }
        },
        "PublicAcceptInviteRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "password_confirmation",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                },
                "password_confirmation": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                },
                "token": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "PublicCurrency": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "code": {
                    "type": "string"
                },
                "currency_label": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "token_label": {
                    "type": "string"
                }
            }
        },
        "PublicGetWalletResponse": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublicWalletAddress"
                    }
                },
                "rates": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "store": {
                    "$ref": "#/definitions/PublicStore"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "PublicResetPasswordRequest": {
            "type": "object",
            "required": [
                "code",
                "email",
                "password",
                "password_confirmation"
            ],
            "properties": {
                "code": {
                    "type": "integer"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                },
                "password_confirmation": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "PublicStore": {
            "type": "object",
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "minimal_payment": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "return_url": {
                    "type": "string"
                },
                "site_url": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "success_url": {
                    "type": "string"
                }
            }
        },
        "PublicUserForgotPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                }
            }
        },
        "PublicWalletAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "currency": {
                    "$ref": "#/definitions/PublicCurrency"
                }
            }
        },
        "ReceiptResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/ReceiptStatus"
                },
                "store_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "ReceiptStatus": {
            "type": "string",
            "enum": [
                "paid",
                "canceled"
            ],
            "x-enum-varnames": [
                "ReceiptStatusPaid",
                "ReceiptStatusCanceled"
            ]
        },
        "RegisterOwnerInfo": {
            "type": "object",
            "properties": {
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "language",
                "location",
                "password"
            ],
            "properties": {
                "cf-turnstile-response": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "language": {
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 2
                },
                "location": {
                    "type": "string"
                },
                "mnemonic": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "RegisterRootResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "RegisterUserResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user_info": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_user.RegisterUserDTO"
                }
            }
        },
        "ResponseWithFullPagination-AmlHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AmlHistoryResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-ExchangeOrderHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeOrderHistoryResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-ExchangeWithdrawalHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeWithdrawalHistoryResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-GetTransferResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTransferResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-GetUsersResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetUsersResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-GetWalletBalanceResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetWalletBalanceResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-NotificationHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NotificationHistoryResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ResponseWithFullPagination-github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions_FindRow": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.FindRow"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/FullPagingData"
                }
            }
        },
        "ScoreTxRequest": {
            "type": "object",
            "required": [
                "currency_id",
                "direction",
                "output_address",
                "provider_slug",
                "tx_id"
            ],
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "direction": {
                    "type": "string",
                    "enum": [
                        "in",
                        "out"
                    ]
                },
                "output_address": {
                    "type": "string"
                },
                "provider_slug": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AMLSlug"
                },
                "tx_id": {
                    "type": "string"
                }
            }
        },
        "SearchByCriteriaResponse-any": {
            "type": "object",
            "properties": {
                "data": {},
                "search_type": {
                    "type": "string"
                }
            }
        },
        "SendTestResult": {
            "type": "object",
            "properties": {
                "request_body": {
                    "type": "string"
                },
                "response_body": {
                    "type": "string"
                },
                "response_code": {
                    "type": "integer"
                },
                "response_status": {
                    "type": "string"
                }
            }
        },
        "SettingResponse": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "ShortTransactionInfoListResponse": {
            "type": "object",
            "properties": {
                "confirmed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShortTransactionResponse"
                    }
                },
                "unconfirmed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ShortTransactionResponse"
                    }
                }
            }
        },
        "ShortTransactionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "string"
                },
                "amount_usd": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency_code": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "ShortTransferDto": {
            "type": "object",
            "properties": {
                "kind": {
                    "$ref": "#/definitions/TransferKind"
                },
                "message": {
                    "type": "string"
                },
                "stage": {
                    "$ref": "#/definitions/TransferStage"
                },
                "status": {
                    "$ref": "#/definitions/TransferStatus"
                }
            }
        },
        "StatisticsDTO": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string",
                    "format": "date-time"
                },
                "details_by_currency": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_transactions.CurrencyDetailsDTO"
                    }
                },
                "sum_usd": {
                    "type": "string"
                },
                "transactions_count": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/StatisticsResolution"
                }
            }
        },
        "StatisticsResolution": {
            "type": "string",
            "enum": [
                "hour",
                "day",
                "week",
                "month",
                "quarter",
                "year"
            ],
            "x-enum-varnames": [
                "StatisticsResolutionHour",
                "StatisticsResolutionDay",
                "StatisticsResolutionWeek",
                "StatisticsResolutionMonth",
                "StatisticsResolutionQuarter",
                "StatisticsResolutionYear"
            ]
        },
        "StoreAPIKeyResponse": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "StoreResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "minimal_payment": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "public_payment_form_enabled": {
                    "type": "boolean"
                },
                "rate_scale": {
                    "type": "number"
                },
                "rate_source": {
                    "type": "string"
                },
                "return_url": {
                    "type": "string",
                    "format": "uri"
                },
                "site": {
                    "type": "string",
                    "format": "uri"
                },
                "status": {
                    "type": "boolean"
                },
                "success_url": {
                    "type": "string",
                    "format": "uri"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "StoreSecretResponse": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                }
            }
        },
        "StoreTransactionResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "bc_uniq_key": {
                    "type": "string"
                },
                "blockchain": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "from_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "network_created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "receipt_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "store_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "to_address": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/TransactionsType"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "wallet_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "withdrawal_is_manual": {
                    "type": "boolean"
                }
            }
        },
        "StoreWebhookResponse": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "PaymentReceived",
                            "PaymentNotConfirmed"
                        ]
                    }
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "url": {
                    "description": "StoreID   string    ` + "`" + `json:\"store_id\" format:\"uuid\"` + "`" + `",
                    "type": "string",
                    "format": "uri"
                }
            }
        },
        "SummaryDTO": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                },
                "balance_usd": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "count_with_balance": {
                    "type": "integer"
                },
                "currency": {
                    "$ref": "#/definitions/CurrencyDTO"
                }
            }
        },
        "SystemInfoResponse": {
            "type": "object",
            "properties": {
                "app_profile": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AppProfile"
                },
                "initialized": {
                    "type": "boolean"
                },
                "is_captcha_enabled": {
                    "type": "boolean"
                },
                "registration_state": {
                    "type": "string"
                },
                "root_user_exists": {
                    "type": "boolean"
                },
                "site_key": {
                    "type": "string"
                }
            }
        },
        "TestNotificationRequest": {
            "type": "object",
            "required": [
                "recipient"
            ],
            "properties": {
                "recipient": {
                    "type": "string"
                }
            }
        },
        "TestWebhookRequest": {
            "type": "object",
            "required": [
                "event_type",
                "wh_id"
            ],
            "properties": {
                "event_type": {
                    "type": "string",
                    "enum": [
                        "PaymentReceived",
                        "PaymentNotConfirmed",
                        " WithdrawalFromProcessingReceived"
                    ]
                },
                "wh_id": {
                    "type": "string"
                }
            }
        },
        "TgLinkResponse": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string"
                }
            }
        },
        "TransactionInfoResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "bc_uniq_key": {
                    "type": "string"
                },
                "blockchain": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "from_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_confirmed": {
                    "type": "boolean"
                },
                "network_created_at": {
                    "type": "string"
                },
                "receipt_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet": {
                    "$ref": "#/definitions/WalletInfoResponse"
                },
                "webhook_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WhSendHistoryResponse"
                    }
                },
                "withdrawal_is_manual": {
                    "type": "boolean"
                }
            }
        },
        "TransactionStatus": {
            "type": "string",
            "enum": [
                "waiting_confirmations",
                "in_mempool",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "TransactionStatusWaitingConfirmations",
                "TransactionStatusInMempool",
                "TransactionStatusCompleted",
                "TransactionStatusFailed"
            ]
        },
        "TransactionsType": {
            "type": "string",
            "enum": [
                "transfer",
                "deposit",
                "withdrawal_from_processing"
            ],
            "x-enum-varnames": [
                "TransactionsTypeTransfer",
                "TransactionsTypeDeposit",
                "TransactionsTypeWithdrawalFromProcessing"
            ]
        },
        "TransferHistoryRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                }
            }
        },
        "TransferKind": {
            "type": "string",
            "enum": [
                "from_address",
                "from_processing"
            ],
            "x-enum-varnames": [
                "TransferKindFromAddress",
                "TransferKindFromProcessing"
            ]
        },
        "TransferStage": {
            "type": "string",
            "enum": [
                "in_progress",
                "failed",
                "completed"
            ],
            "x-enum-varnames": [
                "TransferStageInProgress",
                "TransferStageFailed",
                "TransferStageCompleted"
            ]
        },
        "TransferStatus": {
            "type": "string",
            "enum": [
                "new",
                "pending",
                "processing",
                "in_mempool",
                "unconfirmed",
                "completed",
                "failed",
                "frozen"
            ],
            "x-enum-varnames": [
                "TransferStatusNew",
                "TransferStatusPending",
                "TransferStatusProcessing",
                "TransferStatusInMempool",
                "TransferStatusUnconfirmed",
                "TransferStatusCompleted",
                "TransferStatusFailed",
                "TransferStatusFrozen"
            ]
        },
        "TransfersToggleRequest": {
            "type": "object",
            "properties": {
                "mode": {
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                }
            }
        },
        "TronData": {
            "type": "object",
            "properties": {
                "available_bandwidth_for_use": {
                    "type": "string"
                },
                "available_energy_for_use": {
                    "type": "string"
                },
                "stacked_bandwidth": {
                    "type": "string"
                },
                "stacked_bandwidth_trx": {
                    "type": "string"
                },
                "stacked_energy": {
                    "type": "string"
                },
                "stacked_energy_trx": {
                    "type": "string"
                },
                "stacked_trx": {
                    "type": "string"
                },
                "total_bandwidth": {
                    "type": "string"
                },
                "total_energy": {
                    "type": "string"
                },
                "total_used_bandwidth": {
                    "type": "string"
                },
                "total_used_energy": {
                    "type": "string"
                },
                "tron_transfer_data": {
                    "$ref": "#/definitions/TronTransferData"
                }
            }
        },
        "TronTransferData": {
            "type": "object",
            "properties": {
                "max_transfers_native": {
                    "type": "string"
                },
                "max_transfers_trc20": {
                    "type": "string"
                }
            }
        },
        "TronTransfersTypeRequest": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "burntrx",
                        "resources"
                    ]
                }
            }
        },
        "UnbanUserResponse": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "banned": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "UniversalAddressGroupResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressBookEntryResponseShort"
                    }
                },
                "currency_count": {
                    "type": "integer"
                },
                "is_universal": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "submitted_at": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "UpdateAPIKeyStatusRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "UpdateAddressesListRequest": {
            "type": "object",
            "required": [
                "totp"
            ],
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletAddress"
                    }
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "UpdateList": {
            "type": "object",
            "required": [
                "list"
            ],
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "id"
                        ],
                        "properties": {
                            "email_enabled": {
                                "type": "boolean"
                            },
                            "id": {
                                "type": "string"
                            },
                            "tg_enabled": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "UpdateStoreCurrencyRequest": {
            "type": "object",
            "properties": {
                "currency_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "UpdateStoreRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "minimal_payment": {
                    "type": "number"
                },
                "name": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 2
                },
                "public_payment_form_enabled": {
                    "type": "boolean"
                },
                "rate_scale": {
                    "type": "number"
                },
                "rate_source": {
                    "type": "string"
                },
                "return_url": {
                    "type": "string"
                },
                "site": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "success_url": {
                    "type": "string"
                }
            }
        },
        "UpdateStoreWebhookRequest": {
            "type": "object",
            "required": [
                "events",
                "url"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WebhookEvent"
                    }
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "UpdateUserAMLKeys": {
            "type": "object",
            "required": [
                "keys"
            ],
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserAMLKey"
                    }
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "required": [
                "language",
                "location",
                "rate_source"
            ],
            "properties": {
                "language": {
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 2
                },
                "location": {
                    "type": "string"
                },
                "rate_source": {
                    "type": "string",
                    "enum": [
                        "okx",
                        "htx",
                        "binance",
                        "bitget",
                        "coingate",
                        "bybit",
                        "gate",
                        "dv-min",
                        "dv-max",
                        "dv-avg"
                    ]
                }
            }
        },
        "UpdateWhitelistRequest": {
            "type": "object",
            "required": [
                "ips"
            ],
            "properties": {
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "ipv4"
                    }
                }
            }
        },
        "UpdateWithdrawalSetting": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "UpdateWithdrawalWalletsRequest": {
            "type": "object",
            "required": [
                "interval"
            ],
            "properties": {
                "interval": {
                    "$ref": "#/definitions/WithdrawalInterval"
                },
                "low_balance_rules": {
                    "$ref": "#/definitions/MultiWithdrawalRules"
                },
                "min_balance": {
                    "type": "number"
                },
                "min_balance_usd": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/WithdrawalStatus"
                }
            }
        },
        "UserAMLKey": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "enum": [
                        "access_key_id",
                        "access_key",
                        "secret_key",
                        "access_id"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.AmlKeyType"
                        }
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "UserNotificationResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "email_enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tg_enabled": {
                    "type": "boolean"
                }
            }
        },
        "UserRole": {
            "type": "string",
            "enum": [
                "user",
                "root",
                "support",
                "finance_manager"
            ],
            "x-enum-varnames": [
                "UserRoleDefault",
                "UserRoleRoot",
                "UserRoleSupport",
                "UserRoleFinanceManager"
            ]
        },
        "VersionResponse": {
            "type": "object",
            "properties": {
                "new_backend_version": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_updater.VersionInfo"
                },
                "new_processing_version": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_service_updater.VersionInfo"
                }
            }
        },
        "WalletAddress": {
            "type": "object",
            "required": [
                "address"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1
                }
            }
        },
        "WalletAddressLog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "text_variables": {
                    "type": "object",
                    "additionalProperties": true
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "WalletAddressResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "currency_id": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "dirty": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "WalletAddressTotalUSDResponse": {
            "type": "object",
            "properties": {
                "total_dust": {
                    "type": "number"
                },
                "total_usd": {
                    "type": "number"
                }
            }
        },
        "WalletInfoResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "store_external_id": {
                    "type": "string"
                },
                "wallet_created_at": {
                    "type": "string"
                },
                "wallet_store_id": {
                    "type": "string"
                },
                "wallet_updated_at": {
                    "type": "string"
                }
            }
        },
        "WalletSeedResponse": {
            "type": "object",
            "properties": {
                "mnemonic": {
                    "type": "string"
                },
                "pass_phrase": {
                    "type": "string"
                }
            }
        },
        "WalletShort": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletShort"
                    }
                },
                "id": {
                    "type": "string"
                },
                "store_external_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "WalletTransactionInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "from": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "WalletWithBlockchains": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BlockchainGroup"
                    }
                },
                "email": {
                    "type": "string"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletAddressLog"
                    }
                },
                "store_external_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "store_name": {
                    "type": "string"
                },
                "total_tx": {
                    "type": "number"
                },
                "wallet_created_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "WalletWithTransactionsInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "currencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "store_external_id": {
                    "type": "string"
                },
                "store_uuid": {
                    "type": "string"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WalletTransactionInfo"
                    }
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "WebhookEvent": {
            "type": "string",
            "enum": [
                "PaymentReceived",
                "PaymentNotConfirmed",
                "WithdrawalFromProcessingReceived"
            ],
            "x-enum-varnames": [
                "WebhookEventPaymentReceived",
                "WebhookEventPaymentNotConfirmed",
                "WebhookEventWithdrawalFromProcessingReceived"
            ]
        },
        "WebhookKind": {
            "type": "string",
            "enum": [
                "transfer",
                "deposit",
                "transfer_status"
            ],
            "x-enum-varnames": [
                "WebhookKindTransfer",
                "WebhookKindDeposit",
                "WebhookKindTransferStatus"
            ]
        },
        "WhHistory": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string"
                },
                "is_success": {
                    "type": "boolean"
                },
                "request": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "store_id": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "WhHistoryResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WhHistory"
                    }
                },
                "next_page_exists": {
                    "type": "boolean"
                }
            }
        },
        "WhSendHistoryResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_success": {
                    "type": "boolean"
                },
                "request": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "store_id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "wh_type": {
                    "type": "string"
                }
            }
        },
        "WithdrawalFromProcessingDto": {
            "type": "object",
            "properties": {
                "address_from": {
                    "type": "string"
                },
                "address_to": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "currency_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "transfer": {
                    "$ref": "#/definitions/ShortTransferDto"
                },
                "tx_hash": {
                    "type": "string"
                }
            }
        },
        "WithdrawalInterval": {
            "type": "string",
            "enum": [
                "never",
                "every-one-min",
                "every-12hours",
                "every-day",
                "every-3days",
                "every-week"
            ],
            "x-enum-varnames": [
                "WithdrawalIntervalNever",
                "WithdrawalIntervalEveryOneMin",
                "WithdrawalIntervalEvery12hours",
                "WithdrawalIntervalEveryDay",
                "WithdrawalIntervalEvery3Days",
                "WithdrawalIntervalEveryWeek"
            ]
        },
        "WithdrawalRulesByCurrencyResponse": {
            "type": "object",
            "properties": {
                "addressees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.WithdrawalWalletAddress"
                    }
                },
                "currency": {
                    "$ref": "#/definitions/CurrencyShort"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "$ref": "#/definitions/WithdrawalInterval"
                },
                "low_balance_rules": {
                    "$ref": "#/definitions/LowBalanceWithdrawalRuleResponse"
                },
                "native_balance": {
                    "type": "number"
                },
                "rate": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/WithdrawalStatus"
                },
                "usd_balance": {
                    "type": "number"
                }
            }
        },
        "WithdrawalStatus": {
            "type": "string",
            "enum": [
                "enabled",
                "disabled"
            ],
            "x-enum-varnames": [
                "WithdrawalStatusEnabled",
                "WithdrawalStatusDisabled"
            ]
        },
        "WithdrawalToProcessingRequest": {
            "type": "object",
            "required": [
                "currency_id",
                "wallet_address_id"
            ],
            "properties": {
                "currency_id": {
                    "type": "string"
                },
                "wallet_address_id": {
                    "type": "string"
                }
            }
        },
        "WithdrawalWalletWithAddress": {
            "type": "object",
            "properties": {
                "addressees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WithdrawalWalletWithAddress"
                    }
                },
                "currency": {
                    "$ref": "#/definitions/CurrencyShort"
                },
                "id": {
                    "type": "string",
                    "format": "uuid"
                },
                "interval": {
                    "$ref": "#/definitions/WithdrawalInterval"
                },
                "low_balance_rules": {
                    "$ref": "#/definitions/LowBalanceWithdrawalRuleResponse"
                },
                "native_balance": {
                    "type": "number"
                },
                "rate": {
                    "type": "number"
                },
                "status": {
                    "$ref": "#/definitions/WithdrawalStatus"
                },
                "usd_balance": {
                    "type": "number"
                }
            }
        },
        "WithdrawalWalletsTransferRequest": {
            "type": "object",
            "required": [
                "stages"
            ],
            "properties": {
                "date_from": {
                    "type": "string",
                    "format": "date-time,omitempty"
                },
                "kinds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransferKind"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "page_size": {
                    "type": "integer"
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransferStage"
                    }
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_currency_request.UpdateCurrencyRateRequest": {
            "type": "object",
            "required": [
                "rate_scale",
                "rate_source"
            ],
            "properties": {
                "rate_scale": {
                    "type": "number"
                },
                "rate_source": {
                    "type": "string",
                    "enum": [
                        "okx htx binance bitget coingate bybit gate dv-min dv-max dv-avg"
                    ]
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_processing_request.MnemonicRequest": {
            "type": "object",
            "required": [
                "mnemonic"
            ],
            "properties": {
                "mnemonic": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_processing_request.UpdateProcessingCallbackDomain": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "domain": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_wallet_request.AddressConverterRequest": {
            "type": "object",
            "required": [
                "address",
                "blockchain"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 16
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.AddWithdrawalRuleRequest": {
            "type": "object",
            "required": [
                "totp"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "id": {
                    "type": "string"
                },
                "is_evm": {
                    "type": "boolean"
                },
                "is_universal": {
                    "type": "boolean"
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.CreateAddressBookRequest": {
            "type": "object",
            "required": [
                "address",
                "totp"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "create_withdrawal_rule": {
                    "type": "boolean"
                },
                "currency_id": {
                    "type": "string"
                },
                "is_evm": {
                    "type": "boolean"
                },
                "is_universal": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.DeleteAddressBookRequest": {
            "type": "object",
            "required": [
                "totp"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "blockchain": {
                    "$ref": "#/definitions/Blockchain"
                },
                "delete_withdrawal_rule": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "is_evm": {
                    "type": "boolean"
                },
                "is_universal": {
                    "type": "boolean"
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_request_withdrawal_requests.UpdateAddressBookRequest": {
            "type": "object",
            "required": [
                "totp"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "totp": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response.ExchangeData": {
            "type": "object",
            "properties": {
                "exchange": {
                    "type": "string"
                },
                "exchange_connected_at": {
                    "type": "string"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExchangeKeyData"
                    }
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_responses_exchange_response.ExchangeWithdrawalRulesResponse": {
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "fee": {
                    "type": "string"
                },
                "max_withdraw_amount": {
                    "type": "string"
                },
                "min_deposit_amount": {
                    "type": "string"
                },
                "min_withdraw_amount": {
                    "type": "string"
                },
                "num_of_confirmations": {
                    "type": "string"
                },
                "withdraw_fee_type": {
                    "type": "string"
                },
                "withdraw_precision": {
                    "type": "string"
                },
                "withdraw_quota_per_day": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_responses_log_response.LogData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "failure": {
                    "type": "boolean"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "process_id": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_responses_mnemonic_response.MnemonicResponse": {
            "type": "object",
            "properties": {
                "mnemonic": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_delivery_http_responses_processing_response.OwnerProcessingResponse": {
            "type": "object",
            "properties": {
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_models.AMLCheckStatus": {
            "type": "string",
            "enum": [
                "pending",
                "success",
                "failed"
            ],
            "x-enum-varnames": [
                "AmlCheckStatusPending",
                "AmlCheckStatusSuccess",
                "AmlCheckStatusFailed"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.AMLSlug": {
            "type": "string",
            "enum": [
                "aml_bot",
                "bit_ok"
            ],
            "x-enum-varnames": [
                "AMLSlugAMLBot",
                "AMLSlugBitOK"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.AddressType": {
            "type": "string",
            "enum": [
                "deposit",
                "withdraw"
            ],
            "x-enum-varnames": [
                "DepositAddress",
                "WithdrawAddress"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.AmlKeyType": {
            "type": "string",
            "enum": [
                "access_key_id",
                "secret_key",
                "access_key",
                "access_id"
            ],
            "x-enum-varnames": [
                "AmlKeyTypeAccessKeyID",
                "AmlKeyTypeSecret",
                "AmlKeyTypeAccessKey",
                "AmlKeyTypeAccessID"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.AppProfile": {
            "type": "string",
            "enum": [
                "dev",
                "prod",
                "demo"
            ],
            "x-enum-varnames": [
                "AppProfileDev",
                "AppProfileProd",
                "AppProfileDemo"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.ExchangeSymbolDTO": {
            "type": "object",
            "properties": {
                "base_symbol": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "quote_symbol": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_models.MultiWithdrawalMode": {
            "type": "string",
            "enum": [
                "random",
                "disabled",
                "processing",
                "manual"
            ],
            "x-enum-varnames": [
                "MultiWithdrawalModeRandom",
                "MultiWithdrawalModeDisabled",
                "MultiWithdrawalModeProcessing",
                "MultiWithdrawalModeManual"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.RateSource": {
            "type": "string",
            "enum": [
                "okx",
                "htx",
                "binance",
                "bitget",
                "coingate",
                "dv-min",
                "dv-max",
                "dv-avg",
                "kucoin",
                "bybit",
                "gate"
            ],
            "x-enum-varnames": [
                "RateSourceOKX",
                "RateSourceHTX",
                "RateSourceBinance",
                "RateSourceBitGet",
                "RateSourceCoingate",
                "RateSourceDVMin",
                "RateSourceDVMax",
                "RateSourceDVAvg",
                "RateSourceKucoin",
                "RateSourceBybit",
                "RateSourceGateio"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.User": {
            "type": "object",
            "required": [
                "email",
                "location",
                "password"
            ],
            "properties": {
                "banned": {
                    "$ref": "#/definitions/pgtype.Bool"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "dvnet_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified_at": {
                    "type": "string"
                },
                "exchange_slug": {
                    "$ref": "#/definitions/ExchangeSlug"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                },
                "processing_owner_id": {
                    "type": "string"
                },
                "rate_scale": {
                    "type": "number"
                },
                "rate_source": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.RateSource"
                },
                "remember_token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_models.WalletType": {
            "type": "string",
            "enum": [
                "cold",
                "hot",
                "processing"
            ],
            "x-enum-varnames": [
                "WalletTypeCold",
                "WalletTypeHot",
                "WalletTypeProcessing"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_models.WithdrawalWalletAddress": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "withdrawal_wallet_id": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_service_setting.Dto": {
            "type": "object",
            "properties": {
                "available_values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_editable": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "two_factor_verification_required": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_service_transactions.CurrencyDetailsDTO": {
            "type": "object",
            "properties": {
                "sum_usd": {
                    "type": "number"
                },
                "tx_count": {
                    "type": "integer"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_service_updater.VersionInfo": {
            "type": "object",
            "properties": {
                "available_version": {
                    "type": "string"
                },
                "installed_version": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "need_for_update": {
                    "type": "boolean"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_service_user.RegisterUserDTO": {
            "type": "object",
            "properties": {
                "owner_info": {
                    "$ref": "#/definitions/RegisterOwnerInfo"
                },
                "user": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_models.User"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_service_wallet.EVMData": {
            "type": "object",
            "properties": {
                "cost_per_erc20": {
                    "description": "Cost in Wei for single ERC20 transfer",
                    "type": "string"
                },
                "cost_per_native": {
                    "description": "Cost in Wei for single native transfer",
                    "type": "string"
                },
                "is_l2": {
                    "description": "Whether this is an L2 chain",
                    "type": "boolean"
                },
                "l1_data_fee_estimate": {
                    "description": "Estimated L1 data fee for L2 chains",
                    "type": "string"
                },
                "max_transfers_erc20": {
                    "type": "string"
                },
                "max_transfers_native": {
                    "type": "string"
                },
                "suggested_gas_price": {
                    "type": "string"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.FindRow": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amount_usd": {
                    "type": "number"
                },
                "bc_uniq_key": {
                    "type": "string"
                },
                "blockchain": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_at_index": {
                    "$ref": "#/definitions/pgtype.Int8"
                },
                "currency": {
                    "type": "object",
                    "properties": {
                        "blockchain": {
                            "$ref": "#/definitions/Blockchain"
                        },
                        "code": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                },
                "currency_id": {
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "from_address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_system": {
                    "type": "boolean"
                },
                "network_created_at": {
                    "type": "string"
                },
                "receipt_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "to_address": {
                    "type": "string"
                },
                "tx_hash": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/TransactionsType"
                },
                "untrusted_email": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                },
                "withdrawal_is_manual": {
                    "type": "boolean"
                }
            }
        },
        "github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.Resolution": {
            "type": "string",
            "enum": [
                "hour",
                "day"
            ],
            "x-enum-varnames": [
                "ResolutionHour",
                "ResolutionDay"
            ]
        },
        "github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.StatisticsRow": {
            "type": "object",
            "properties": {
                "amount_usd": {
                    "type": "number"
                },
                "currency_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "date": {
                    "type": "string"
                },
                "resolution": {
                    "$ref": "#/definitions/github.com/dv-net/dv-merchant_internal_storage_repos_repo_transactions.Resolution"
                }
            }
        },
        "map_string_CombinedStats": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/CombinedStats"
            }
        },
        "pgtype.Bool": {
            "type": "object",
            "properties": {
                "bool": {
                    "type": "boolean"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Int8": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "XApiKey": {
            "description": "Store API key",
            "type": "apiKey",
            "name": "X-Api-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "DV Merchant",
	Description:      "This is an API for DV Merchant",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
